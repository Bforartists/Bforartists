# Makefile.in generated by automake 1.7.6 from Makefile.am.
# source/gameengine/GamePlayer/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/blender
pkglibdir = $(libdir)/blender
pkgincludedir = $(includedir)/blender
top_builddir = ../../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoconf
AUTOHEADER = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoheader
AUTOMAKE = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run automake-1.7
AWK = mawk
BLIB_JPEG = 
BLIB_PNG = 
BLIB_SDL = 
BlenderFMOD_FALSE = 
BlenderFMOD_TRUE = #
BlenderGAME_FALSE = 
BlenderGAME_TRUE = #
BlenderOPENAL_FALSE = 
BlenderOPENAL_TRUE = #
BlenderPLUGIN_FALSE = 
BlenderPLUGIN_TRUE = #
BlenderQUICKTIME_FALSE = 
BlenderQUICKTIME_TRUE = #
BlenderSTATIC_FALSE = 
BlenderSTATIC_TRUE = #
CARBON_FALSE = 
CARBON_TRUE = #
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS =  -funsigned-char
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -funsigned-char
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = 
FFLAGS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBM = -lm
LIBOBJS = 
LIBS = -lGLU -lGL -lX11 -lXext -lutil -ldl -lstdc++ -lSDL -lpng -ljpeg -lpthread -lz  -L/usr/lib -lSDL -lpthread
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKE = /usr/bin/make
MAKEINFO = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run makeinfo
OBJEXT = o
PACKAGE = blender
PACKAGE_BUGREPORT = 
PACKAGE_NAME = blender
PACKAGE_STRING = blender 2.29
PACKAGE_TARNAME = blender
PACKAGE_VERSION = 2.29
PATH_SEPARATOR = :
PBBUILD = 
PYTHON = /usr/bin/python
PYTHONSYSPREFIX = /usr
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_LDFLAGS = -Xlinker -export-dynamic
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.2
RANLIB = ranlib
SDL_CFLAGS = -I/usr/include/SDL -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib -lSDL -lpthread
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USE_OPENAL_FALSE = 
USE_OPENAL_TRUE = #
VERSION = 2.29
WIN32_FALSE = 
WIN32_TRUE = #
X11_FALSE = #
X11_TRUE = 
X_CFLAGS =  -I/usr/X11R6/include
X_EXTRA_LIBS = 
X_LIBS =  -L/usr/X11R6/lib
X_PRE_LIBS =  -lSM -lICE
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
b_jpeg_FALSE = 
b_jpeg_TRUE = #
b_png_FALSE = 
b_png_TRUE = #
b_sdl_FALSE = 
b_sdl_TRUE = #
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/qword/nuevo/fuentes/trabajo/blender/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
pkgpyexecdir = ${pyexecdir}/blender
pkgpythondir = ${pythondir}/blender
prefix = /usr/local
program_transform_name = s,x,x,
pyexecdir = ${exec_prefix}/lib/python2.2/site-packages
pythondir = ${prefix}/lib/python2.2/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
BUILDTYPE = libgameblender_player_Ghost.la
#BUILDTYPE = libgameblender_player_win.la
PLUGBUILDTYPE = libgameblender_plugin_netscape.la
#PLUGBUILDTYPE = libgameblender_plugin_win.la
PLUGINLIB = 

#PLUGINLIB = libgameblender_plugin.la $(PLUGBUILDTYPE)

noinst_LTLIBRARIES = $(BUILDTYPE) $(PLUGINLIB) libgameblender_player.la

libgameblender_player_la_SOURCES = \
	common/GPC_Canvas.cpp \
	common/GPC_Engine.cpp \
	common/GPC_KeyboardDevice.cpp \
	common/GPC_MouseDevice.cpp \
	common/GPC_PolygonMaterial.cpp \
	common/GPC_RawImage.cpp \
	common/GPC_RawLoadDotBlendArray.cpp \
	common/GPC_RawLogoArrays.cpp \
	common/GPC_RenderTools.cpp \
	common/GPC_System.cpp \
	common/bmfont.cpp \
	ghost/GPG_Application.cpp \
	ghost/GPG_Canvas.cpp \
	ghost/GPG_KeyboardDevice.cpp \
	ghost/GPG_System.cpp \
	ghost/GPG_ghost.cpp


libgameblender_player_la_LIBADD = \
	$(BUILDTYPE)


libgameblender_player_Ghost_la_SOURCES = \
	common/unix/GPU_Canvas.cpp \
	common/unix/GPU_Engine.cpp \
	common/unix/GPU_KeyboardDevice.cpp \
	common/unix/GPU_System.cpp


libgameblender_player_win_la_SOURCES = \
	common/windows/GPW_Canvas.cpp \
	common/windows/GPW_Engine.cpp \
	common/windows/GPW_KeyboardDevice.cpp \
	common/windows/GPW_System.cpp


libgameblender_plugin_la_SOURCES = 

libgameblender_plugin_win_la_SOURCES = 

libgameblender_plugin_netscape_la_SOURCES = 

INCLUDES = -I$(top_srcdir)/source/gameengine/Rasterizer \
	-I$(top_srcdir)/intern/string \
	-I$(top_srcdir)/intern/moto/include \
	-I$(top_srcdir)/source/blender/blenkernel \
	-I$(top_srcdir)/source/blender/makesdna \
	-I$(top_srcdir)/source/blender/blenloader \
	-I$(top_srcdir)/source/blender/blenlib \
	-I$(top_srcdir)/source/gameengine/GameLogic \
	-I$(top_srcdir)/source/gameengine/Converter \
	-I$(top_srcdir)/source/gameengine/Network/LoopBackNetwork \
	-I$(top_srcdir)/source/gameengine/SoundSystem \
	-I$(top_srcdir)/source/gameengine/Expressions \
	-I/usr/include/python2.2 \
	-I$(top_srcdir)/source/kernel/gen_system \
	-I$(top_srcdir)/source/kernel/gen_messaging \
	-I$(top_srcdir)/source/gameengine/Ketsji \
	-I$(top_srcdir)/source/gameengine/SceneGraph \
	-I$(top_srcdir)/source/gameengine/Network \
	-I$(top_srcdir)/source/gameengine/GamePlayer/common \
	-I$(top_srcdir)/source/gameengine/GamePlayer/netscape/src/ketsji \
	-I$(top_srcdir)/source/gameengine/Rasterizer/RAS_OpenGLRasterizer \
	-I$(top_srcdir)/source/gameengine/Physics/Sumo/Fuzzics/include \
	-I$(top_srcdir)/intern/guardedalloc \
	-I$(top_srcdir)/source/blender/imbuf \
	-I$(top_srcdir)/intern/ghost \
	-I$(top_srcdir)/intern/bmfont

subdir = source/gameengine/GamePlayer
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)

libgameblender_player_la_LDFLAGS =
#libgameblender_player_la_DEPENDENCIES = \
#	libgameblender_player_win.la
libgameblender_player_la_DEPENDENCIES = \
	libgameblender_player_Ghost.la
am_libgameblender_player_la_OBJECTS = GPC_Canvas.lo GPC_Engine.lo \
	GPC_KeyboardDevice.lo GPC_MouseDevice.lo GPC_PolygonMaterial.lo \
	GPC_RawImage.lo GPC_RawLoadDotBlendArray.lo \
	GPC_RawLogoArrays.lo GPC_RenderTools.lo GPC_System.lo bmfont.lo \
	GPG_Application.lo GPG_Canvas.lo GPG_KeyboardDevice.lo \
	GPG_System.lo GPG_ghost.lo
libgameblender_player_la_OBJECTS = \
	$(am_libgameblender_player_la_OBJECTS)
libgameblender_player_Ghost_la_LDFLAGS =
libgameblender_player_Ghost_la_LIBADD =
am_libgameblender_player_Ghost_la_OBJECTS = GPU_Canvas.lo GPU_Engine.lo \
	GPU_KeyboardDevice.lo GPU_System.lo
libgameblender_player_Ghost_la_OBJECTS = \
	$(am_libgameblender_player_Ghost_la_OBJECTS)
libgameblender_player_win_la_LDFLAGS =
libgameblender_player_win_la_LIBADD =
am_libgameblender_player_win_la_OBJECTS = GPW_Canvas.lo GPW_Engine.lo \
	GPW_KeyboardDevice.lo GPW_System.lo
libgameblender_player_win_la_OBJECTS = \
	$(am_libgameblender_player_win_la_OBJECTS)
libgameblender_plugin_la_LDFLAGS =
libgameblender_plugin_la_LIBADD =
am_libgameblender_plugin_la_OBJECTS =
libgameblender_plugin_la_OBJECTS = \
	$(am_libgameblender_plugin_la_OBJECTS)
libgameblender_plugin_netscape_la_LDFLAGS =
libgameblender_plugin_netscape_la_LIBADD =
am_libgameblender_plugin_netscape_la_OBJECTS =
libgameblender_plugin_netscape_la_OBJECTS = \
	$(am_libgameblender_plugin_netscape_la_OBJECTS)
libgameblender_plugin_win_la_LDFLAGS =
libgameblender_plugin_win_la_LIBADD =
am_libgameblender_plugin_win_la_OBJECTS =
libgameblender_plugin_win_la_OBJECTS = \
	$(am_libgameblender_plugin_win_la_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/GPC_Canvas.Plo \
	./$(DEPDIR)/GPC_Engine.Plo \
	./$(DEPDIR)/GPC_KeyboardDevice.Plo \
	./$(DEPDIR)/GPC_MouseDevice.Plo \
	./$(DEPDIR)/GPC_PolygonMaterial.Plo \
	./$(DEPDIR)/GPC_RawImage.Plo \
	./$(DEPDIR)/GPC_RawLoadDotBlendArray.Plo \
	./$(DEPDIR)/GPC_RawLogoArrays.Plo \
	./$(DEPDIR)/GPC_RenderTools.Plo \
	./$(DEPDIR)/GPC_System.Plo \
	./$(DEPDIR)/GPG_Application.Plo \
	./$(DEPDIR)/GPG_Canvas.Plo \
	./$(DEPDIR)/GPG_KeyboardDevice.Plo \
	./$(DEPDIR)/GPG_System.Plo \
	./$(DEPDIR)/GPG_ghost.Plo \
	./$(DEPDIR)/GPU_Canvas.Plo \
	./$(DEPDIR)/GPU_Engine.Plo \
	./$(DEPDIR)/GPU_KeyboardDevice.Plo \
	./$(DEPDIR)/GPU_System.Plo \
	./$(DEPDIR)/GPW_Canvas.Plo \
	./$(DEPDIR)/GPW_Engine.Plo \
	./$(DEPDIR)/GPW_KeyboardDevice.Plo \
	./$(DEPDIR)/GPW_System.Plo ./$(DEPDIR)/bmfont.Plo
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libgameblender_player_la_SOURCES) \
	$(libgameblender_player_Ghost_la_SOURCES) \
	$(libgameblender_player_win_la_SOURCES) \
	$(libgameblender_plugin_la_SOURCES) \
	$(libgameblender_plugin_netscape_la_SOURCES) \
	$(libgameblender_plugin_win_la_SOURCES)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(libgameblender_player_la_SOURCES) $(libgameblender_player_Ghost_la_SOURCES) $(libgameblender_player_win_la_SOURCES) $(libgameblender_plugin_la_SOURCES) $(libgameblender_plugin_netscape_la_SOURCES) $(libgameblender_plugin_win_la_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  source/gameengine/GamePlayer/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libgameblender_player.la: $(libgameblender_player_la_OBJECTS) $(libgameblender_player_la_DEPENDENCIES) 
	$(CXXLINK)  $(libgameblender_player_la_LDFLAGS) $(libgameblender_player_la_OBJECTS) $(libgameblender_player_la_LIBADD) $(LIBS)
libgameblender_player_Ghost.la: $(libgameblender_player_Ghost_la_OBJECTS) $(libgameblender_player_Ghost_la_DEPENDENCIES) 
	$(CXXLINK)  $(libgameblender_player_Ghost_la_LDFLAGS) $(libgameblender_player_Ghost_la_OBJECTS) $(libgameblender_player_Ghost_la_LIBADD) $(LIBS)
libgameblender_player_win.la: $(libgameblender_player_win_la_OBJECTS) $(libgameblender_player_win_la_DEPENDENCIES) 
	$(CXXLINK)  $(libgameblender_player_win_la_LDFLAGS) $(libgameblender_player_win_la_OBJECTS) $(libgameblender_player_win_la_LIBADD) $(LIBS)
libgameblender_plugin.la: $(libgameblender_plugin_la_OBJECTS) $(libgameblender_plugin_la_DEPENDENCIES) 
	$(LINK)  $(libgameblender_plugin_la_LDFLAGS) $(libgameblender_plugin_la_OBJECTS) $(libgameblender_plugin_la_LIBADD) $(LIBS)
libgameblender_plugin_netscape.la: $(libgameblender_plugin_netscape_la_OBJECTS) $(libgameblender_plugin_netscape_la_DEPENDENCIES) 
	$(LINK)  $(libgameblender_plugin_netscape_la_LDFLAGS) $(libgameblender_plugin_netscape_la_OBJECTS) $(libgameblender_plugin_netscape_la_LIBADD) $(LIBS)
libgameblender_plugin_win.la: $(libgameblender_plugin_win_la_OBJECTS) $(libgameblender_plugin_win_la_DEPENDENCIES) 
	$(LINK)  $(libgameblender_plugin_win_la_LDFLAGS) $(libgameblender_plugin_win_la_OBJECTS) $(libgameblender_plugin_win_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/GPC_Canvas.Plo
include ./$(DEPDIR)/GPC_Engine.Plo
include ./$(DEPDIR)/GPC_KeyboardDevice.Plo
include ./$(DEPDIR)/GPC_MouseDevice.Plo
include ./$(DEPDIR)/GPC_PolygonMaterial.Plo
include ./$(DEPDIR)/GPC_RawImage.Plo
include ./$(DEPDIR)/GPC_RawLoadDotBlendArray.Plo
include ./$(DEPDIR)/GPC_RawLogoArrays.Plo
include ./$(DEPDIR)/GPC_RenderTools.Plo
include ./$(DEPDIR)/GPC_System.Plo
include ./$(DEPDIR)/GPG_Application.Plo
include ./$(DEPDIR)/GPG_Canvas.Plo
include ./$(DEPDIR)/GPG_KeyboardDevice.Plo
include ./$(DEPDIR)/GPG_System.Plo
include ./$(DEPDIR)/GPG_ghost.Plo
include ./$(DEPDIR)/GPU_Canvas.Plo
include ./$(DEPDIR)/GPU_Engine.Plo
include ./$(DEPDIR)/GPU_KeyboardDevice.Plo
include ./$(DEPDIR)/GPU_System.Plo
include ./$(DEPDIR)/GPW_Canvas.Plo
include ./$(DEPDIR)/GPW_Engine.Plo
include ./$(DEPDIR)/GPW_KeyboardDevice.Plo
include ./$(DEPDIR)/GPW_System.Plo
include ./$(DEPDIR)/bmfont.Plo

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

GPC_Canvas.o: common/GPC_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_Canvas.o -MD -MP -MF "$(DEPDIR)/GPC_Canvas.Tpo" \
	  -c -o GPC_Canvas.o `test -f 'common/GPC_Canvas.cpp' || echo '$(srcdir)/'`common/GPC_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPC_Canvas.Tpo" "$(DEPDIR)/GPC_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPC_Canvas.Tpo"; exit 1; \
	fi
#	source='common/GPC_Canvas.cpp' object='GPC_Canvas.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_Canvas.Po' tmpdepfile='$(DEPDIR)/GPC_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_Canvas.o `test -f 'common/GPC_Canvas.cpp' || echo '$(srcdir)/'`common/GPC_Canvas.cpp

GPC_Canvas.obj: common/GPC_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_Canvas.obj -MD -MP -MF "$(DEPDIR)/GPC_Canvas.Tpo" \
	  -c -o GPC_Canvas.obj `if test -f 'common/GPC_Canvas.cpp'; then $(CYGPATH_W) 'common/GPC_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_Canvas.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_Canvas.Tpo" "$(DEPDIR)/GPC_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPC_Canvas.Tpo"; exit 1; \
	fi
#	source='common/GPC_Canvas.cpp' object='GPC_Canvas.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_Canvas.Po' tmpdepfile='$(DEPDIR)/GPC_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_Canvas.obj `if test -f 'common/GPC_Canvas.cpp'; then $(CYGPATH_W) 'common/GPC_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_Canvas.cpp'; fi`

GPC_Canvas.lo: common/GPC_Canvas.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_Canvas.lo -MD -MP -MF "$(DEPDIR)/GPC_Canvas.Tpo" \
	  -c -o GPC_Canvas.lo `test -f 'common/GPC_Canvas.cpp' || echo '$(srcdir)/'`common/GPC_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPC_Canvas.Tpo" "$(DEPDIR)/GPC_Canvas.Plo"; \
	else rm -f "$(DEPDIR)/GPC_Canvas.Tpo"; exit 1; \
	fi
#	source='common/GPC_Canvas.cpp' object='GPC_Canvas.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_Canvas.Plo' tmpdepfile='$(DEPDIR)/GPC_Canvas.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_Canvas.lo `test -f 'common/GPC_Canvas.cpp' || echo '$(srcdir)/'`common/GPC_Canvas.cpp

GPC_Engine.o: common/GPC_Engine.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_Engine.o -MD -MP -MF "$(DEPDIR)/GPC_Engine.Tpo" \
	  -c -o GPC_Engine.o `test -f 'common/GPC_Engine.cpp' || echo '$(srcdir)/'`common/GPC_Engine.cpp; \
	then mv -f "$(DEPDIR)/GPC_Engine.Tpo" "$(DEPDIR)/GPC_Engine.Po"; \
	else rm -f "$(DEPDIR)/GPC_Engine.Tpo"; exit 1; \
	fi
#	source='common/GPC_Engine.cpp' object='GPC_Engine.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_Engine.Po' tmpdepfile='$(DEPDIR)/GPC_Engine.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_Engine.o `test -f 'common/GPC_Engine.cpp' || echo '$(srcdir)/'`common/GPC_Engine.cpp

GPC_Engine.obj: common/GPC_Engine.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_Engine.obj -MD -MP -MF "$(DEPDIR)/GPC_Engine.Tpo" \
	  -c -o GPC_Engine.obj `if test -f 'common/GPC_Engine.cpp'; then $(CYGPATH_W) 'common/GPC_Engine.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_Engine.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_Engine.Tpo" "$(DEPDIR)/GPC_Engine.Po"; \
	else rm -f "$(DEPDIR)/GPC_Engine.Tpo"; exit 1; \
	fi
#	source='common/GPC_Engine.cpp' object='GPC_Engine.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_Engine.Po' tmpdepfile='$(DEPDIR)/GPC_Engine.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_Engine.obj `if test -f 'common/GPC_Engine.cpp'; then $(CYGPATH_W) 'common/GPC_Engine.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_Engine.cpp'; fi`

GPC_Engine.lo: common/GPC_Engine.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_Engine.lo -MD -MP -MF "$(DEPDIR)/GPC_Engine.Tpo" \
	  -c -o GPC_Engine.lo `test -f 'common/GPC_Engine.cpp' || echo '$(srcdir)/'`common/GPC_Engine.cpp; \
	then mv -f "$(DEPDIR)/GPC_Engine.Tpo" "$(DEPDIR)/GPC_Engine.Plo"; \
	else rm -f "$(DEPDIR)/GPC_Engine.Tpo"; exit 1; \
	fi
#	source='common/GPC_Engine.cpp' object='GPC_Engine.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_Engine.Plo' tmpdepfile='$(DEPDIR)/GPC_Engine.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_Engine.lo `test -f 'common/GPC_Engine.cpp' || echo '$(srcdir)/'`common/GPC_Engine.cpp

GPC_KeyboardDevice.o: common/GPC_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_KeyboardDevice.o -MD -MP -MF "$(DEPDIR)/GPC_KeyboardDevice.Tpo" \
	  -c -o GPC_KeyboardDevice.o `test -f 'common/GPC_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/GPC_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPC_KeyboardDevice.Tpo" "$(DEPDIR)/GPC_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPC_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/GPC_KeyboardDevice.cpp' object='GPC_KeyboardDevice.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPC_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_KeyboardDevice.o `test -f 'common/GPC_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/GPC_KeyboardDevice.cpp

GPC_KeyboardDevice.obj: common/GPC_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_KeyboardDevice.obj -MD -MP -MF "$(DEPDIR)/GPC_KeyboardDevice.Tpo" \
	  -c -o GPC_KeyboardDevice.obj `if test -f 'common/GPC_KeyboardDevice.cpp'; then $(CYGPATH_W) 'common/GPC_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_KeyboardDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_KeyboardDevice.Tpo" "$(DEPDIR)/GPC_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPC_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/GPC_KeyboardDevice.cpp' object='GPC_KeyboardDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPC_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_KeyboardDevice.obj `if test -f 'common/GPC_KeyboardDevice.cpp'; then $(CYGPATH_W) 'common/GPC_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_KeyboardDevice.cpp'; fi`

GPC_KeyboardDevice.lo: common/GPC_KeyboardDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_KeyboardDevice.lo -MD -MP -MF "$(DEPDIR)/GPC_KeyboardDevice.Tpo" \
	  -c -o GPC_KeyboardDevice.lo `test -f 'common/GPC_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/GPC_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPC_KeyboardDevice.Tpo" "$(DEPDIR)/GPC_KeyboardDevice.Plo"; \
	else rm -f "$(DEPDIR)/GPC_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/GPC_KeyboardDevice.cpp' object='GPC_KeyboardDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_KeyboardDevice.Plo' tmpdepfile='$(DEPDIR)/GPC_KeyboardDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_KeyboardDevice.lo `test -f 'common/GPC_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/GPC_KeyboardDevice.cpp

GPC_MouseDevice.o: common/GPC_MouseDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_MouseDevice.o -MD -MP -MF "$(DEPDIR)/GPC_MouseDevice.Tpo" \
	  -c -o GPC_MouseDevice.o `test -f 'common/GPC_MouseDevice.cpp' || echo '$(srcdir)/'`common/GPC_MouseDevice.cpp; \
	then mv -f "$(DEPDIR)/GPC_MouseDevice.Tpo" "$(DEPDIR)/GPC_MouseDevice.Po"; \
	else rm -f "$(DEPDIR)/GPC_MouseDevice.Tpo"; exit 1; \
	fi
#	source='common/GPC_MouseDevice.cpp' object='GPC_MouseDevice.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_MouseDevice.Po' tmpdepfile='$(DEPDIR)/GPC_MouseDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_MouseDevice.o `test -f 'common/GPC_MouseDevice.cpp' || echo '$(srcdir)/'`common/GPC_MouseDevice.cpp

GPC_MouseDevice.obj: common/GPC_MouseDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_MouseDevice.obj -MD -MP -MF "$(DEPDIR)/GPC_MouseDevice.Tpo" \
	  -c -o GPC_MouseDevice.obj `if test -f 'common/GPC_MouseDevice.cpp'; then $(CYGPATH_W) 'common/GPC_MouseDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_MouseDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_MouseDevice.Tpo" "$(DEPDIR)/GPC_MouseDevice.Po"; \
	else rm -f "$(DEPDIR)/GPC_MouseDevice.Tpo"; exit 1; \
	fi
#	source='common/GPC_MouseDevice.cpp' object='GPC_MouseDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_MouseDevice.Po' tmpdepfile='$(DEPDIR)/GPC_MouseDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_MouseDevice.obj `if test -f 'common/GPC_MouseDevice.cpp'; then $(CYGPATH_W) 'common/GPC_MouseDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_MouseDevice.cpp'; fi`

GPC_MouseDevice.lo: common/GPC_MouseDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_MouseDevice.lo -MD -MP -MF "$(DEPDIR)/GPC_MouseDevice.Tpo" \
	  -c -o GPC_MouseDevice.lo `test -f 'common/GPC_MouseDevice.cpp' || echo '$(srcdir)/'`common/GPC_MouseDevice.cpp; \
	then mv -f "$(DEPDIR)/GPC_MouseDevice.Tpo" "$(DEPDIR)/GPC_MouseDevice.Plo"; \
	else rm -f "$(DEPDIR)/GPC_MouseDevice.Tpo"; exit 1; \
	fi
#	source='common/GPC_MouseDevice.cpp' object='GPC_MouseDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_MouseDevice.Plo' tmpdepfile='$(DEPDIR)/GPC_MouseDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_MouseDevice.lo `test -f 'common/GPC_MouseDevice.cpp' || echo '$(srcdir)/'`common/GPC_MouseDevice.cpp

GPC_PolygonMaterial.o: common/GPC_PolygonMaterial.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_PolygonMaterial.o -MD -MP -MF "$(DEPDIR)/GPC_PolygonMaterial.Tpo" \
	  -c -o GPC_PolygonMaterial.o `test -f 'common/GPC_PolygonMaterial.cpp' || echo '$(srcdir)/'`common/GPC_PolygonMaterial.cpp; \
	then mv -f "$(DEPDIR)/GPC_PolygonMaterial.Tpo" "$(DEPDIR)/GPC_PolygonMaterial.Po"; \
	else rm -f "$(DEPDIR)/GPC_PolygonMaterial.Tpo"; exit 1; \
	fi
#	source='common/GPC_PolygonMaterial.cpp' object='GPC_PolygonMaterial.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_PolygonMaterial.Po' tmpdepfile='$(DEPDIR)/GPC_PolygonMaterial.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_PolygonMaterial.o `test -f 'common/GPC_PolygonMaterial.cpp' || echo '$(srcdir)/'`common/GPC_PolygonMaterial.cpp

GPC_PolygonMaterial.obj: common/GPC_PolygonMaterial.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_PolygonMaterial.obj -MD -MP -MF "$(DEPDIR)/GPC_PolygonMaterial.Tpo" \
	  -c -o GPC_PolygonMaterial.obj `if test -f 'common/GPC_PolygonMaterial.cpp'; then $(CYGPATH_W) 'common/GPC_PolygonMaterial.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_PolygonMaterial.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_PolygonMaterial.Tpo" "$(DEPDIR)/GPC_PolygonMaterial.Po"; \
	else rm -f "$(DEPDIR)/GPC_PolygonMaterial.Tpo"; exit 1; \
	fi
#	source='common/GPC_PolygonMaterial.cpp' object='GPC_PolygonMaterial.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_PolygonMaterial.Po' tmpdepfile='$(DEPDIR)/GPC_PolygonMaterial.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_PolygonMaterial.obj `if test -f 'common/GPC_PolygonMaterial.cpp'; then $(CYGPATH_W) 'common/GPC_PolygonMaterial.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_PolygonMaterial.cpp'; fi`

GPC_PolygonMaterial.lo: common/GPC_PolygonMaterial.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_PolygonMaterial.lo -MD -MP -MF "$(DEPDIR)/GPC_PolygonMaterial.Tpo" \
	  -c -o GPC_PolygonMaterial.lo `test -f 'common/GPC_PolygonMaterial.cpp' || echo '$(srcdir)/'`common/GPC_PolygonMaterial.cpp; \
	then mv -f "$(DEPDIR)/GPC_PolygonMaterial.Tpo" "$(DEPDIR)/GPC_PolygonMaterial.Plo"; \
	else rm -f "$(DEPDIR)/GPC_PolygonMaterial.Tpo"; exit 1; \
	fi
#	source='common/GPC_PolygonMaterial.cpp' object='GPC_PolygonMaterial.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_PolygonMaterial.Plo' tmpdepfile='$(DEPDIR)/GPC_PolygonMaterial.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_PolygonMaterial.lo `test -f 'common/GPC_PolygonMaterial.cpp' || echo '$(srcdir)/'`common/GPC_PolygonMaterial.cpp

GPC_RawImage.o: common/GPC_RawImage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawImage.o -MD -MP -MF "$(DEPDIR)/GPC_RawImage.Tpo" \
	  -c -o GPC_RawImage.o `test -f 'common/GPC_RawImage.cpp' || echo '$(srcdir)/'`common/GPC_RawImage.cpp; \
	then mv -f "$(DEPDIR)/GPC_RawImage.Tpo" "$(DEPDIR)/GPC_RawImage.Po"; \
	else rm -f "$(DEPDIR)/GPC_RawImage.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawImage.cpp' object='GPC_RawImage.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_RawImage.Po' tmpdepfile='$(DEPDIR)/GPC_RawImage.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawImage.o `test -f 'common/GPC_RawImage.cpp' || echo '$(srcdir)/'`common/GPC_RawImage.cpp

GPC_RawImage.obj: common/GPC_RawImage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawImage.obj -MD -MP -MF "$(DEPDIR)/GPC_RawImage.Tpo" \
	  -c -o GPC_RawImage.obj `if test -f 'common/GPC_RawImage.cpp'; then $(CYGPATH_W) 'common/GPC_RawImage.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RawImage.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_RawImage.Tpo" "$(DEPDIR)/GPC_RawImage.Po"; \
	else rm -f "$(DEPDIR)/GPC_RawImage.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawImage.cpp' object='GPC_RawImage.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_RawImage.Po' tmpdepfile='$(DEPDIR)/GPC_RawImage.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawImage.obj `if test -f 'common/GPC_RawImage.cpp'; then $(CYGPATH_W) 'common/GPC_RawImage.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RawImage.cpp'; fi`

GPC_RawImage.lo: common/GPC_RawImage.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawImage.lo -MD -MP -MF "$(DEPDIR)/GPC_RawImage.Tpo" \
	  -c -o GPC_RawImage.lo `test -f 'common/GPC_RawImage.cpp' || echo '$(srcdir)/'`common/GPC_RawImage.cpp; \
	then mv -f "$(DEPDIR)/GPC_RawImage.Tpo" "$(DEPDIR)/GPC_RawImage.Plo"; \
	else rm -f "$(DEPDIR)/GPC_RawImage.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawImage.cpp' object='GPC_RawImage.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_RawImage.Plo' tmpdepfile='$(DEPDIR)/GPC_RawImage.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawImage.lo `test -f 'common/GPC_RawImage.cpp' || echo '$(srcdir)/'`common/GPC_RawImage.cpp

GPC_RawLoadDotBlendArray.o: common/GPC_RawLoadDotBlendArray.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawLoadDotBlendArray.o -MD -MP -MF "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo" \
	  -c -o GPC_RawLoadDotBlendArray.o `test -f 'common/GPC_RawLoadDotBlendArray.cpp' || echo '$(srcdir)/'`common/GPC_RawLoadDotBlendArray.cpp; \
	then mv -f "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo" "$(DEPDIR)/GPC_RawLoadDotBlendArray.Po"; \
	else rm -f "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawLoadDotBlendArray.cpp' object='GPC_RawLoadDotBlendArray.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_RawLoadDotBlendArray.Po' tmpdepfile='$(DEPDIR)/GPC_RawLoadDotBlendArray.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawLoadDotBlendArray.o `test -f 'common/GPC_RawLoadDotBlendArray.cpp' || echo '$(srcdir)/'`common/GPC_RawLoadDotBlendArray.cpp

GPC_RawLoadDotBlendArray.obj: common/GPC_RawLoadDotBlendArray.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawLoadDotBlendArray.obj -MD -MP -MF "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo" \
	  -c -o GPC_RawLoadDotBlendArray.obj `if test -f 'common/GPC_RawLoadDotBlendArray.cpp'; then $(CYGPATH_W) 'common/GPC_RawLoadDotBlendArray.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RawLoadDotBlendArray.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo" "$(DEPDIR)/GPC_RawLoadDotBlendArray.Po"; \
	else rm -f "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawLoadDotBlendArray.cpp' object='GPC_RawLoadDotBlendArray.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_RawLoadDotBlendArray.Po' tmpdepfile='$(DEPDIR)/GPC_RawLoadDotBlendArray.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawLoadDotBlendArray.obj `if test -f 'common/GPC_RawLoadDotBlendArray.cpp'; then $(CYGPATH_W) 'common/GPC_RawLoadDotBlendArray.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RawLoadDotBlendArray.cpp'; fi`

GPC_RawLoadDotBlendArray.lo: common/GPC_RawLoadDotBlendArray.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawLoadDotBlendArray.lo -MD -MP -MF "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo" \
	  -c -o GPC_RawLoadDotBlendArray.lo `test -f 'common/GPC_RawLoadDotBlendArray.cpp' || echo '$(srcdir)/'`common/GPC_RawLoadDotBlendArray.cpp; \
	then mv -f "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo" "$(DEPDIR)/GPC_RawLoadDotBlendArray.Plo"; \
	else rm -f "$(DEPDIR)/GPC_RawLoadDotBlendArray.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawLoadDotBlendArray.cpp' object='GPC_RawLoadDotBlendArray.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_RawLoadDotBlendArray.Plo' tmpdepfile='$(DEPDIR)/GPC_RawLoadDotBlendArray.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawLoadDotBlendArray.lo `test -f 'common/GPC_RawLoadDotBlendArray.cpp' || echo '$(srcdir)/'`common/GPC_RawLoadDotBlendArray.cpp

GPC_RawLogoArrays.o: common/GPC_RawLogoArrays.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawLogoArrays.o -MD -MP -MF "$(DEPDIR)/GPC_RawLogoArrays.Tpo" \
	  -c -o GPC_RawLogoArrays.o `test -f 'common/GPC_RawLogoArrays.cpp' || echo '$(srcdir)/'`common/GPC_RawLogoArrays.cpp; \
	then mv -f "$(DEPDIR)/GPC_RawLogoArrays.Tpo" "$(DEPDIR)/GPC_RawLogoArrays.Po"; \
	else rm -f "$(DEPDIR)/GPC_RawLogoArrays.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawLogoArrays.cpp' object='GPC_RawLogoArrays.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_RawLogoArrays.Po' tmpdepfile='$(DEPDIR)/GPC_RawLogoArrays.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawLogoArrays.o `test -f 'common/GPC_RawLogoArrays.cpp' || echo '$(srcdir)/'`common/GPC_RawLogoArrays.cpp

GPC_RawLogoArrays.obj: common/GPC_RawLogoArrays.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawLogoArrays.obj -MD -MP -MF "$(DEPDIR)/GPC_RawLogoArrays.Tpo" \
	  -c -o GPC_RawLogoArrays.obj `if test -f 'common/GPC_RawLogoArrays.cpp'; then $(CYGPATH_W) 'common/GPC_RawLogoArrays.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RawLogoArrays.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_RawLogoArrays.Tpo" "$(DEPDIR)/GPC_RawLogoArrays.Po"; \
	else rm -f "$(DEPDIR)/GPC_RawLogoArrays.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawLogoArrays.cpp' object='GPC_RawLogoArrays.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_RawLogoArrays.Po' tmpdepfile='$(DEPDIR)/GPC_RawLogoArrays.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawLogoArrays.obj `if test -f 'common/GPC_RawLogoArrays.cpp'; then $(CYGPATH_W) 'common/GPC_RawLogoArrays.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RawLogoArrays.cpp'; fi`

GPC_RawLogoArrays.lo: common/GPC_RawLogoArrays.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RawLogoArrays.lo -MD -MP -MF "$(DEPDIR)/GPC_RawLogoArrays.Tpo" \
	  -c -o GPC_RawLogoArrays.lo `test -f 'common/GPC_RawLogoArrays.cpp' || echo '$(srcdir)/'`common/GPC_RawLogoArrays.cpp; \
	then mv -f "$(DEPDIR)/GPC_RawLogoArrays.Tpo" "$(DEPDIR)/GPC_RawLogoArrays.Plo"; \
	else rm -f "$(DEPDIR)/GPC_RawLogoArrays.Tpo"; exit 1; \
	fi
#	source='common/GPC_RawLogoArrays.cpp' object='GPC_RawLogoArrays.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_RawLogoArrays.Plo' tmpdepfile='$(DEPDIR)/GPC_RawLogoArrays.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RawLogoArrays.lo `test -f 'common/GPC_RawLogoArrays.cpp' || echo '$(srcdir)/'`common/GPC_RawLogoArrays.cpp

GPC_RenderTools.o: common/GPC_RenderTools.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RenderTools.o -MD -MP -MF "$(DEPDIR)/GPC_RenderTools.Tpo" \
	  -c -o GPC_RenderTools.o `test -f 'common/GPC_RenderTools.cpp' || echo '$(srcdir)/'`common/GPC_RenderTools.cpp; \
	then mv -f "$(DEPDIR)/GPC_RenderTools.Tpo" "$(DEPDIR)/GPC_RenderTools.Po"; \
	else rm -f "$(DEPDIR)/GPC_RenderTools.Tpo"; exit 1; \
	fi
#	source='common/GPC_RenderTools.cpp' object='GPC_RenderTools.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_RenderTools.Po' tmpdepfile='$(DEPDIR)/GPC_RenderTools.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RenderTools.o `test -f 'common/GPC_RenderTools.cpp' || echo '$(srcdir)/'`common/GPC_RenderTools.cpp

GPC_RenderTools.obj: common/GPC_RenderTools.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RenderTools.obj -MD -MP -MF "$(DEPDIR)/GPC_RenderTools.Tpo" \
	  -c -o GPC_RenderTools.obj `if test -f 'common/GPC_RenderTools.cpp'; then $(CYGPATH_W) 'common/GPC_RenderTools.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RenderTools.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_RenderTools.Tpo" "$(DEPDIR)/GPC_RenderTools.Po"; \
	else rm -f "$(DEPDIR)/GPC_RenderTools.Tpo"; exit 1; \
	fi
#	source='common/GPC_RenderTools.cpp' object='GPC_RenderTools.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_RenderTools.Po' tmpdepfile='$(DEPDIR)/GPC_RenderTools.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RenderTools.obj `if test -f 'common/GPC_RenderTools.cpp'; then $(CYGPATH_W) 'common/GPC_RenderTools.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_RenderTools.cpp'; fi`

GPC_RenderTools.lo: common/GPC_RenderTools.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_RenderTools.lo -MD -MP -MF "$(DEPDIR)/GPC_RenderTools.Tpo" \
	  -c -o GPC_RenderTools.lo `test -f 'common/GPC_RenderTools.cpp' || echo '$(srcdir)/'`common/GPC_RenderTools.cpp; \
	then mv -f "$(DEPDIR)/GPC_RenderTools.Tpo" "$(DEPDIR)/GPC_RenderTools.Plo"; \
	else rm -f "$(DEPDIR)/GPC_RenderTools.Tpo"; exit 1; \
	fi
#	source='common/GPC_RenderTools.cpp' object='GPC_RenderTools.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_RenderTools.Plo' tmpdepfile='$(DEPDIR)/GPC_RenderTools.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_RenderTools.lo `test -f 'common/GPC_RenderTools.cpp' || echo '$(srcdir)/'`common/GPC_RenderTools.cpp

GPC_System.o: common/GPC_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_System.o -MD -MP -MF "$(DEPDIR)/GPC_System.Tpo" \
	  -c -o GPC_System.o `test -f 'common/GPC_System.cpp' || echo '$(srcdir)/'`common/GPC_System.cpp; \
	then mv -f "$(DEPDIR)/GPC_System.Tpo" "$(DEPDIR)/GPC_System.Po"; \
	else rm -f "$(DEPDIR)/GPC_System.Tpo"; exit 1; \
	fi
#	source='common/GPC_System.cpp' object='GPC_System.o' libtool=no \
#	depfile='$(DEPDIR)/GPC_System.Po' tmpdepfile='$(DEPDIR)/GPC_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_System.o `test -f 'common/GPC_System.cpp' || echo '$(srcdir)/'`common/GPC_System.cpp

GPC_System.obj: common/GPC_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_System.obj -MD -MP -MF "$(DEPDIR)/GPC_System.Tpo" \
	  -c -o GPC_System.obj `if test -f 'common/GPC_System.cpp'; then $(CYGPATH_W) 'common/GPC_System.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_System.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPC_System.Tpo" "$(DEPDIR)/GPC_System.Po"; \
	else rm -f "$(DEPDIR)/GPC_System.Tpo"; exit 1; \
	fi
#	source='common/GPC_System.cpp' object='GPC_System.obj' libtool=no \
#	depfile='$(DEPDIR)/GPC_System.Po' tmpdepfile='$(DEPDIR)/GPC_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_System.obj `if test -f 'common/GPC_System.cpp'; then $(CYGPATH_W) 'common/GPC_System.cpp'; else $(CYGPATH_W) '$(srcdir)/common/GPC_System.cpp'; fi`

GPC_System.lo: common/GPC_System.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPC_System.lo -MD -MP -MF "$(DEPDIR)/GPC_System.Tpo" \
	  -c -o GPC_System.lo `test -f 'common/GPC_System.cpp' || echo '$(srcdir)/'`common/GPC_System.cpp; \
	then mv -f "$(DEPDIR)/GPC_System.Tpo" "$(DEPDIR)/GPC_System.Plo"; \
	else rm -f "$(DEPDIR)/GPC_System.Tpo"; exit 1; \
	fi
#	source='common/GPC_System.cpp' object='GPC_System.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPC_System.Plo' tmpdepfile='$(DEPDIR)/GPC_System.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPC_System.lo `test -f 'common/GPC_System.cpp' || echo '$(srcdir)/'`common/GPC_System.cpp

bmfont.o: common/bmfont.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bmfont.o -MD -MP -MF "$(DEPDIR)/bmfont.Tpo" \
	  -c -o bmfont.o `test -f 'common/bmfont.cpp' || echo '$(srcdir)/'`common/bmfont.cpp; \
	then mv -f "$(DEPDIR)/bmfont.Tpo" "$(DEPDIR)/bmfont.Po"; \
	else rm -f "$(DEPDIR)/bmfont.Tpo"; exit 1; \
	fi
#	source='common/bmfont.cpp' object='bmfont.o' libtool=no \
#	depfile='$(DEPDIR)/bmfont.Po' tmpdepfile='$(DEPDIR)/bmfont.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bmfont.o `test -f 'common/bmfont.cpp' || echo '$(srcdir)/'`common/bmfont.cpp

bmfont.obj: common/bmfont.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bmfont.obj -MD -MP -MF "$(DEPDIR)/bmfont.Tpo" \
	  -c -o bmfont.obj `if test -f 'common/bmfont.cpp'; then $(CYGPATH_W) 'common/bmfont.cpp'; else $(CYGPATH_W) '$(srcdir)/common/bmfont.cpp'; fi`; \
	then mv -f "$(DEPDIR)/bmfont.Tpo" "$(DEPDIR)/bmfont.Po"; \
	else rm -f "$(DEPDIR)/bmfont.Tpo"; exit 1; \
	fi
#	source='common/bmfont.cpp' object='bmfont.obj' libtool=no \
#	depfile='$(DEPDIR)/bmfont.Po' tmpdepfile='$(DEPDIR)/bmfont.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bmfont.obj `if test -f 'common/bmfont.cpp'; then $(CYGPATH_W) 'common/bmfont.cpp'; else $(CYGPATH_W) '$(srcdir)/common/bmfont.cpp'; fi`

bmfont.lo: common/bmfont.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bmfont.lo -MD -MP -MF "$(DEPDIR)/bmfont.Tpo" \
	  -c -o bmfont.lo `test -f 'common/bmfont.cpp' || echo '$(srcdir)/'`common/bmfont.cpp; \
	then mv -f "$(DEPDIR)/bmfont.Tpo" "$(DEPDIR)/bmfont.Plo"; \
	else rm -f "$(DEPDIR)/bmfont.Tpo"; exit 1; \
	fi
#	source='common/bmfont.cpp' object='bmfont.lo' libtool=yes \
#	depfile='$(DEPDIR)/bmfont.Plo' tmpdepfile='$(DEPDIR)/bmfont.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bmfont.lo `test -f 'common/bmfont.cpp' || echo '$(srcdir)/'`common/bmfont.cpp

GPG_Application.o: ghost/GPG_Application.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_Application.o -MD -MP -MF "$(DEPDIR)/GPG_Application.Tpo" \
	  -c -o GPG_Application.o `test -f 'ghost/GPG_Application.cpp' || echo '$(srcdir)/'`ghost/GPG_Application.cpp; \
	then mv -f "$(DEPDIR)/GPG_Application.Tpo" "$(DEPDIR)/GPG_Application.Po"; \
	else rm -f "$(DEPDIR)/GPG_Application.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_Application.cpp' object='GPG_Application.o' libtool=no \
#	depfile='$(DEPDIR)/GPG_Application.Po' tmpdepfile='$(DEPDIR)/GPG_Application.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_Application.o `test -f 'ghost/GPG_Application.cpp' || echo '$(srcdir)/'`ghost/GPG_Application.cpp

GPG_Application.obj: ghost/GPG_Application.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_Application.obj -MD -MP -MF "$(DEPDIR)/GPG_Application.Tpo" \
	  -c -o GPG_Application.obj `if test -f 'ghost/GPG_Application.cpp'; then $(CYGPATH_W) 'ghost/GPG_Application.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_Application.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPG_Application.Tpo" "$(DEPDIR)/GPG_Application.Po"; \
	else rm -f "$(DEPDIR)/GPG_Application.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_Application.cpp' object='GPG_Application.obj' libtool=no \
#	depfile='$(DEPDIR)/GPG_Application.Po' tmpdepfile='$(DEPDIR)/GPG_Application.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_Application.obj `if test -f 'ghost/GPG_Application.cpp'; then $(CYGPATH_W) 'ghost/GPG_Application.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_Application.cpp'; fi`

GPG_Application.lo: ghost/GPG_Application.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_Application.lo -MD -MP -MF "$(DEPDIR)/GPG_Application.Tpo" \
	  -c -o GPG_Application.lo `test -f 'ghost/GPG_Application.cpp' || echo '$(srcdir)/'`ghost/GPG_Application.cpp; \
	then mv -f "$(DEPDIR)/GPG_Application.Tpo" "$(DEPDIR)/GPG_Application.Plo"; \
	else rm -f "$(DEPDIR)/GPG_Application.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_Application.cpp' object='GPG_Application.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPG_Application.Plo' tmpdepfile='$(DEPDIR)/GPG_Application.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_Application.lo `test -f 'ghost/GPG_Application.cpp' || echo '$(srcdir)/'`ghost/GPG_Application.cpp

GPG_Canvas.o: ghost/GPG_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_Canvas.o -MD -MP -MF "$(DEPDIR)/GPG_Canvas.Tpo" \
	  -c -o GPG_Canvas.o `test -f 'ghost/GPG_Canvas.cpp' || echo '$(srcdir)/'`ghost/GPG_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPG_Canvas.Tpo" "$(DEPDIR)/GPG_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPG_Canvas.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_Canvas.cpp' object='GPG_Canvas.o' libtool=no \
#	depfile='$(DEPDIR)/GPG_Canvas.Po' tmpdepfile='$(DEPDIR)/GPG_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_Canvas.o `test -f 'ghost/GPG_Canvas.cpp' || echo '$(srcdir)/'`ghost/GPG_Canvas.cpp

GPG_Canvas.obj: ghost/GPG_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_Canvas.obj -MD -MP -MF "$(DEPDIR)/GPG_Canvas.Tpo" \
	  -c -o GPG_Canvas.obj `if test -f 'ghost/GPG_Canvas.cpp'; then $(CYGPATH_W) 'ghost/GPG_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_Canvas.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPG_Canvas.Tpo" "$(DEPDIR)/GPG_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPG_Canvas.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_Canvas.cpp' object='GPG_Canvas.obj' libtool=no \
#	depfile='$(DEPDIR)/GPG_Canvas.Po' tmpdepfile='$(DEPDIR)/GPG_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_Canvas.obj `if test -f 'ghost/GPG_Canvas.cpp'; then $(CYGPATH_W) 'ghost/GPG_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_Canvas.cpp'; fi`

GPG_Canvas.lo: ghost/GPG_Canvas.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_Canvas.lo -MD -MP -MF "$(DEPDIR)/GPG_Canvas.Tpo" \
	  -c -o GPG_Canvas.lo `test -f 'ghost/GPG_Canvas.cpp' || echo '$(srcdir)/'`ghost/GPG_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPG_Canvas.Tpo" "$(DEPDIR)/GPG_Canvas.Plo"; \
	else rm -f "$(DEPDIR)/GPG_Canvas.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_Canvas.cpp' object='GPG_Canvas.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPG_Canvas.Plo' tmpdepfile='$(DEPDIR)/GPG_Canvas.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_Canvas.lo `test -f 'ghost/GPG_Canvas.cpp' || echo '$(srcdir)/'`ghost/GPG_Canvas.cpp

GPG_KeyboardDevice.o: ghost/GPG_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_KeyboardDevice.o -MD -MP -MF "$(DEPDIR)/GPG_KeyboardDevice.Tpo" \
	  -c -o GPG_KeyboardDevice.o `test -f 'ghost/GPG_KeyboardDevice.cpp' || echo '$(srcdir)/'`ghost/GPG_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPG_KeyboardDevice.Tpo" "$(DEPDIR)/GPG_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPG_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_KeyboardDevice.cpp' object='GPG_KeyboardDevice.o' libtool=no \
#	depfile='$(DEPDIR)/GPG_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPG_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_KeyboardDevice.o `test -f 'ghost/GPG_KeyboardDevice.cpp' || echo '$(srcdir)/'`ghost/GPG_KeyboardDevice.cpp

GPG_KeyboardDevice.obj: ghost/GPG_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_KeyboardDevice.obj -MD -MP -MF "$(DEPDIR)/GPG_KeyboardDevice.Tpo" \
	  -c -o GPG_KeyboardDevice.obj `if test -f 'ghost/GPG_KeyboardDevice.cpp'; then $(CYGPATH_W) 'ghost/GPG_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_KeyboardDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPG_KeyboardDevice.Tpo" "$(DEPDIR)/GPG_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPG_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_KeyboardDevice.cpp' object='GPG_KeyboardDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/GPG_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPG_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_KeyboardDevice.obj `if test -f 'ghost/GPG_KeyboardDevice.cpp'; then $(CYGPATH_W) 'ghost/GPG_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_KeyboardDevice.cpp'; fi`

GPG_KeyboardDevice.lo: ghost/GPG_KeyboardDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_KeyboardDevice.lo -MD -MP -MF "$(DEPDIR)/GPG_KeyboardDevice.Tpo" \
	  -c -o GPG_KeyboardDevice.lo `test -f 'ghost/GPG_KeyboardDevice.cpp' || echo '$(srcdir)/'`ghost/GPG_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPG_KeyboardDevice.Tpo" "$(DEPDIR)/GPG_KeyboardDevice.Plo"; \
	else rm -f "$(DEPDIR)/GPG_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_KeyboardDevice.cpp' object='GPG_KeyboardDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPG_KeyboardDevice.Plo' tmpdepfile='$(DEPDIR)/GPG_KeyboardDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_KeyboardDevice.lo `test -f 'ghost/GPG_KeyboardDevice.cpp' || echo '$(srcdir)/'`ghost/GPG_KeyboardDevice.cpp

GPG_System.o: ghost/GPG_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_System.o -MD -MP -MF "$(DEPDIR)/GPG_System.Tpo" \
	  -c -o GPG_System.o `test -f 'ghost/GPG_System.cpp' || echo '$(srcdir)/'`ghost/GPG_System.cpp; \
	then mv -f "$(DEPDIR)/GPG_System.Tpo" "$(DEPDIR)/GPG_System.Po"; \
	else rm -f "$(DEPDIR)/GPG_System.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_System.cpp' object='GPG_System.o' libtool=no \
#	depfile='$(DEPDIR)/GPG_System.Po' tmpdepfile='$(DEPDIR)/GPG_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_System.o `test -f 'ghost/GPG_System.cpp' || echo '$(srcdir)/'`ghost/GPG_System.cpp

GPG_System.obj: ghost/GPG_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_System.obj -MD -MP -MF "$(DEPDIR)/GPG_System.Tpo" \
	  -c -o GPG_System.obj `if test -f 'ghost/GPG_System.cpp'; then $(CYGPATH_W) 'ghost/GPG_System.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_System.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPG_System.Tpo" "$(DEPDIR)/GPG_System.Po"; \
	else rm -f "$(DEPDIR)/GPG_System.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_System.cpp' object='GPG_System.obj' libtool=no \
#	depfile='$(DEPDIR)/GPG_System.Po' tmpdepfile='$(DEPDIR)/GPG_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_System.obj `if test -f 'ghost/GPG_System.cpp'; then $(CYGPATH_W) 'ghost/GPG_System.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_System.cpp'; fi`

GPG_System.lo: ghost/GPG_System.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_System.lo -MD -MP -MF "$(DEPDIR)/GPG_System.Tpo" \
	  -c -o GPG_System.lo `test -f 'ghost/GPG_System.cpp' || echo '$(srcdir)/'`ghost/GPG_System.cpp; \
	then mv -f "$(DEPDIR)/GPG_System.Tpo" "$(DEPDIR)/GPG_System.Plo"; \
	else rm -f "$(DEPDIR)/GPG_System.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_System.cpp' object='GPG_System.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPG_System.Plo' tmpdepfile='$(DEPDIR)/GPG_System.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_System.lo `test -f 'ghost/GPG_System.cpp' || echo '$(srcdir)/'`ghost/GPG_System.cpp

GPG_ghost.o: ghost/GPG_ghost.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_ghost.o -MD -MP -MF "$(DEPDIR)/GPG_ghost.Tpo" \
	  -c -o GPG_ghost.o `test -f 'ghost/GPG_ghost.cpp' || echo '$(srcdir)/'`ghost/GPG_ghost.cpp; \
	then mv -f "$(DEPDIR)/GPG_ghost.Tpo" "$(DEPDIR)/GPG_ghost.Po"; \
	else rm -f "$(DEPDIR)/GPG_ghost.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_ghost.cpp' object='GPG_ghost.o' libtool=no \
#	depfile='$(DEPDIR)/GPG_ghost.Po' tmpdepfile='$(DEPDIR)/GPG_ghost.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_ghost.o `test -f 'ghost/GPG_ghost.cpp' || echo '$(srcdir)/'`ghost/GPG_ghost.cpp

GPG_ghost.obj: ghost/GPG_ghost.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_ghost.obj -MD -MP -MF "$(DEPDIR)/GPG_ghost.Tpo" \
	  -c -o GPG_ghost.obj `if test -f 'ghost/GPG_ghost.cpp'; then $(CYGPATH_W) 'ghost/GPG_ghost.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_ghost.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPG_ghost.Tpo" "$(DEPDIR)/GPG_ghost.Po"; \
	else rm -f "$(DEPDIR)/GPG_ghost.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_ghost.cpp' object='GPG_ghost.obj' libtool=no \
#	depfile='$(DEPDIR)/GPG_ghost.Po' tmpdepfile='$(DEPDIR)/GPG_ghost.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_ghost.obj `if test -f 'ghost/GPG_ghost.cpp'; then $(CYGPATH_W) 'ghost/GPG_ghost.cpp'; else $(CYGPATH_W) '$(srcdir)/ghost/GPG_ghost.cpp'; fi`

GPG_ghost.lo: ghost/GPG_ghost.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPG_ghost.lo -MD -MP -MF "$(DEPDIR)/GPG_ghost.Tpo" \
	  -c -o GPG_ghost.lo `test -f 'ghost/GPG_ghost.cpp' || echo '$(srcdir)/'`ghost/GPG_ghost.cpp; \
	then mv -f "$(DEPDIR)/GPG_ghost.Tpo" "$(DEPDIR)/GPG_ghost.Plo"; \
	else rm -f "$(DEPDIR)/GPG_ghost.Tpo"; exit 1; \
	fi
#	source='ghost/GPG_ghost.cpp' object='GPG_ghost.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPG_ghost.Plo' tmpdepfile='$(DEPDIR)/GPG_ghost.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPG_ghost.lo `test -f 'ghost/GPG_ghost.cpp' || echo '$(srcdir)/'`ghost/GPG_ghost.cpp

GPU_Canvas.o: common/unix/GPU_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_Canvas.o -MD -MP -MF "$(DEPDIR)/GPU_Canvas.Tpo" \
	  -c -o GPU_Canvas.o `test -f 'common/unix/GPU_Canvas.cpp' || echo '$(srcdir)/'`common/unix/GPU_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPU_Canvas.Tpo" "$(DEPDIR)/GPU_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPU_Canvas.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_Canvas.cpp' object='GPU_Canvas.o' libtool=no \
#	depfile='$(DEPDIR)/GPU_Canvas.Po' tmpdepfile='$(DEPDIR)/GPU_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_Canvas.o `test -f 'common/unix/GPU_Canvas.cpp' || echo '$(srcdir)/'`common/unix/GPU_Canvas.cpp

GPU_Canvas.obj: common/unix/GPU_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_Canvas.obj -MD -MP -MF "$(DEPDIR)/GPU_Canvas.Tpo" \
	  -c -o GPU_Canvas.obj `if test -f 'common/unix/GPU_Canvas.cpp'; then $(CYGPATH_W) 'common/unix/GPU_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_Canvas.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPU_Canvas.Tpo" "$(DEPDIR)/GPU_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPU_Canvas.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_Canvas.cpp' object='GPU_Canvas.obj' libtool=no \
#	depfile='$(DEPDIR)/GPU_Canvas.Po' tmpdepfile='$(DEPDIR)/GPU_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_Canvas.obj `if test -f 'common/unix/GPU_Canvas.cpp'; then $(CYGPATH_W) 'common/unix/GPU_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_Canvas.cpp'; fi`

GPU_Canvas.lo: common/unix/GPU_Canvas.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_Canvas.lo -MD -MP -MF "$(DEPDIR)/GPU_Canvas.Tpo" \
	  -c -o GPU_Canvas.lo `test -f 'common/unix/GPU_Canvas.cpp' || echo '$(srcdir)/'`common/unix/GPU_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPU_Canvas.Tpo" "$(DEPDIR)/GPU_Canvas.Plo"; \
	else rm -f "$(DEPDIR)/GPU_Canvas.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_Canvas.cpp' object='GPU_Canvas.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPU_Canvas.Plo' tmpdepfile='$(DEPDIR)/GPU_Canvas.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_Canvas.lo `test -f 'common/unix/GPU_Canvas.cpp' || echo '$(srcdir)/'`common/unix/GPU_Canvas.cpp

GPU_Engine.o: common/unix/GPU_Engine.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_Engine.o -MD -MP -MF "$(DEPDIR)/GPU_Engine.Tpo" \
	  -c -o GPU_Engine.o `test -f 'common/unix/GPU_Engine.cpp' || echo '$(srcdir)/'`common/unix/GPU_Engine.cpp; \
	then mv -f "$(DEPDIR)/GPU_Engine.Tpo" "$(DEPDIR)/GPU_Engine.Po"; \
	else rm -f "$(DEPDIR)/GPU_Engine.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_Engine.cpp' object='GPU_Engine.o' libtool=no \
#	depfile='$(DEPDIR)/GPU_Engine.Po' tmpdepfile='$(DEPDIR)/GPU_Engine.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_Engine.o `test -f 'common/unix/GPU_Engine.cpp' || echo '$(srcdir)/'`common/unix/GPU_Engine.cpp

GPU_Engine.obj: common/unix/GPU_Engine.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_Engine.obj -MD -MP -MF "$(DEPDIR)/GPU_Engine.Tpo" \
	  -c -o GPU_Engine.obj `if test -f 'common/unix/GPU_Engine.cpp'; then $(CYGPATH_W) 'common/unix/GPU_Engine.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_Engine.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPU_Engine.Tpo" "$(DEPDIR)/GPU_Engine.Po"; \
	else rm -f "$(DEPDIR)/GPU_Engine.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_Engine.cpp' object='GPU_Engine.obj' libtool=no \
#	depfile='$(DEPDIR)/GPU_Engine.Po' tmpdepfile='$(DEPDIR)/GPU_Engine.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_Engine.obj `if test -f 'common/unix/GPU_Engine.cpp'; then $(CYGPATH_W) 'common/unix/GPU_Engine.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_Engine.cpp'; fi`

GPU_Engine.lo: common/unix/GPU_Engine.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_Engine.lo -MD -MP -MF "$(DEPDIR)/GPU_Engine.Tpo" \
	  -c -o GPU_Engine.lo `test -f 'common/unix/GPU_Engine.cpp' || echo '$(srcdir)/'`common/unix/GPU_Engine.cpp; \
	then mv -f "$(DEPDIR)/GPU_Engine.Tpo" "$(DEPDIR)/GPU_Engine.Plo"; \
	else rm -f "$(DEPDIR)/GPU_Engine.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_Engine.cpp' object='GPU_Engine.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPU_Engine.Plo' tmpdepfile='$(DEPDIR)/GPU_Engine.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_Engine.lo `test -f 'common/unix/GPU_Engine.cpp' || echo '$(srcdir)/'`common/unix/GPU_Engine.cpp

GPU_KeyboardDevice.o: common/unix/GPU_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_KeyboardDevice.o -MD -MP -MF "$(DEPDIR)/GPU_KeyboardDevice.Tpo" \
	  -c -o GPU_KeyboardDevice.o `test -f 'common/unix/GPU_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/unix/GPU_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPU_KeyboardDevice.Tpo" "$(DEPDIR)/GPU_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPU_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_KeyboardDevice.cpp' object='GPU_KeyboardDevice.o' libtool=no \
#	depfile='$(DEPDIR)/GPU_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPU_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_KeyboardDevice.o `test -f 'common/unix/GPU_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/unix/GPU_KeyboardDevice.cpp

GPU_KeyboardDevice.obj: common/unix/GPU_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_KeyboardDevice.obj -MD -MP -MF "$(DEPDIR)/GPU_KeyboardDevice.Tpo" \
	  -c -o GPU_KeyboardDevice.obj `if test -f 'common/unix/GPU_KeyboardDevice.cpp'; then $(CYGPATH_W) 'common/unix/GPU_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_KeyboardDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPU_KeyboardDevice.Tpo" "$(DEPDIR)/GPU_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPU_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_KeyboardDevice.cpp' object='GPU_KeyboardDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/GPU_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPU_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_KeyboardDevice.obj `if test -f 'common/unix/GPU_KeyboardDevice.cpp'; then $(CYGPATH_W) 'common/unix/GPU_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_KeyboardDevice.cpp'; fi`

GPU_KeyboardDevice.lo: common/unix/GPU_KeyboardDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_KeyboardDevice.lo -MD -MP -MF "$(DEPDIR)/GPU_KeyboardDevice.Tpo" \
	  -c -o GPU_KeyboardDevice.lo `test -f 'common/unix/GPU_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/unix/GPU_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPU_KeyboardDevice.Tpo" "$(DEPDIR)/GPU_KeyboardDevice.Plo"; \
	else rm -f "$(DEPDIR)/GPU_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_KeyboardDevice.cpp' object='GPU_KeyboardDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPU_KeyboardDevice.Plo' tmpdepfile='$(DEPDIR)/GPU_KeyboardDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_KeyboardDevice.lo `test -f 'common/unix/GPU_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/unix/GPU_KeyboardDevice.cpp

GPU_System.o: common/unix/GPU_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_System.o -MD -MP -MF "$(DEPDIR)/GPU_System.Tpo" \
	  -c -o GPU_System.o `test -f 'common/unix/GPU_System.cpp' || echo '$(srcdir)/'`common/unix/GPU_System.cpp; \
	then mv -f "$(DEPDIR)/GPU_System.Tpo" "$(DEPDIR)/GPU_System.Po"; \
	else rm -f "$(DEPDIR)/GPU_System.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_System.cpp' object='GPU_System.o' libtool=no \
#	depfile='$(DEPDIR)/GPU_System.Po' tmpdepfile='$(DEPDIR)/GPU_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_System.o `test -f 'common/unix/GPU_System.cpp' || echo '$(srcdir)/'`common/unix/GPU_System.cpp

GPU_System.obj: common/unix/GPU_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_System.obj -MD -MP -MF "$(DEPDIR)/GPU_System.Tpo" \
	  -c -o GPU_System.obj `if test -f 'common/unix/GPU_System.cpp'; then $(CYGPATH_W) 'common/unix/GPU_System.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_System.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPU_System.Tpo" "$(DEPDIR)/GPU_System.Po"; \
	else rm -f "$(DEPDIR)/GPU_System.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_System.cpp' object='GPU_System.obj' libtool=no \
#	depfile='$(DEPDIR)/GPU_System.Po' tmpdepfile='$(DEPDIR)/GPU_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_System.obj `if test -f 'common/unix/GPU_System.cpp'; then $(CYGPATH_W) 'common/unix/GPU_System.cpp'; else $(CYGPATH_W) '$(srcdir)/common/unix/GPU_System.cpp'; fi`

GPU_System.lo: common/unix/GPU_System.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPU_System.lo -MD -MP -MF "$(DEPDIR)/GPU_System.Tpo" \
	  -c -o GPU_System.lo `test -f 'common/unix/GPU_System.cpp' || echo '$(srcdir)/'`common/unix/GPU_System.cpp; \
	then mv -f "$(DEPDIR)/GPU_System.Tpo" "$(DEPDIR)/GPU_System.Plo"; \
	else rm -f "$(DEPDIR)/GPU_System.Tpo"; exit 1; \
	fi
#	source='common/unix/GPU_System.cpp' object='GPU_System.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPU_System.Plo' tmpdepfile='$(DEPDIR)/GPU_System.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPU_System.lo `test -f 'common/unix/GPU_System.cpp' || echo '$(srcdir)/'`common/unix/GPU_System.cpp

GPW_Canvas.o: common/windows/GPW_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_Canvas.o -MD -MP -MF "$(DEPDIR)/GPW_Canvas.Tpo" \
	  -c -o GPW_Canvas.o `test -f 'common/windows/GPW_Canvas.cpp' || echo '$(srcdir)/'`common/windows/GPW_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPW_Canvas.Tpo" "$(DEPDIR)/GPW_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPW_Canvas.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_Canvas.cpp' object='GPW_Canvas.o' libtool=no \
#	depfile='$(DEPDIR)/GPW_Canvas.Po' tmpdepfile='$(DEPDIR)/GPW_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_Canvas.o `test -f 'common/windows/GPW_Canvas.cpp' || echo '$(srcdir)/'`common/windows/GPW_Canvas.cpp

GPW_Canvas.obj: common/windows/GPW_Canvas.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_Canvas.obj -MD -MP -MF "$(DEPDIR)/GPW_Canvas.Tpo" \
	  -c -o GPW_Canvas.obj `if test -f 'common/windows/GPW_Canvas.cpp'; then $(CYGPATH_W) 'common/windows/GPW_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_Canvas.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPW_Canvas.Tpo" "$(DEPDIR)/GPW_Canvas.Po"; \
	else rm -f "$(DEPDIR)/GPW_Canvas.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_Canvas.cpp' object='GPW_Canvas.obj' libtool=no \
#	depfile='$(DEPDIR)/GPW_Canvas.Po' tmpdepfile='$(DEPDIR)/GPW_Canvas.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_Canvas.obj `if test -f 'common/windows/GPW_Canvas.cpp'; then $(CYGPATH_W) 'common/windows/GPW_Canvas.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_Canvas.cpp'; fi`

GPW_Canvas.lo: common/windows/GPW_Canvas.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_Canvas.lo -MD -MP -MF "$(DEPDIR)/GPW_Canvas.Tpo" \
	  -c -o GPW_Canvas.lo `test -f 'common/windows/GPW_Canvas.cpp' || echo '$(srcdir)/'`common/windows/GPW_Canvas.cpp; \
	then mv -f "$(DEPDIR)/GPW_Canvas.Tpo" "$(DEPDIR)/GPW_Canvas.Plo"; \
	else rm -f "$(DEPDIR)/GPW_Canvas.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_Canvas.cpp' object='GPW_Canvas.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPW_Canvas.Plo' tmpdepfile='$(DEPDIR)/GPW_Canvas.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_Canvas.lo `test -f 'common/windows/GPW_Canvas.cpp' || echo '$(srcdir)/'`common/windows/GPW_Canvas.cpp

GPW_Engine.o: common/windows/GPW_Engine.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_Engine.o -MD -MP -MF "$(DEPDIR)/GPW_Engine.Tpo" \
	  -c -o GPW_Engine.o `test -f 'common/windows/GPW_Engine.cpp' || echo '$(srcdir)/'`common/windows/GPW_Engine.cpp; \
	then mv -f "$(DEPDIR)/GPW_Engine.Tpo" "$(DEPDIR)/GPW_Engine.Po"; \
	else rm -f "$(DEPDIR)/GPW_Engine.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_Engine.cpp' object='GPW_Engine.o' libtool=no \
#	depfile='$(DEPDIR)/GPW_Engine.Po' tmpdepfile='$(DEPDIR)/GPW_Engine.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_Engine.o `test -f 'common/windows/GPW_Engine.cpp' || echo '$(srcdir)/'`common/windows/GPW_Engine.cpp

GPW_Engine.obj: common/windows/GPW_Engine.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_Engine.obj -MD -MP -MF "$(DEPDIR)/GPW_Engine.Tpo" \
	  -c -o GPW_Engine.obj `if test -f 'common/windows/GPW_Engine.cpp'; then $(CYGPATH_W) 'common/windows/GPW_Engine.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_Engine.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPW_Engine.Tpo" "$(DEPDIR)/GPW_Engine.Po"; \
	else rm -f "$(DEPDIR)/GPW_Engine.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_Engine.cpp' object='GPW_Engine.obj' libtool=no \
#	depfile='$(DEPDIR)/GPW_Engine.Po' tmpdepfile='$(DEPDIR)/GPW_Engine.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_Engine.obj `if test -f 'common/windows/GPW_Engine.cpp'; then $(CYGPATH_W) 'common/windows/GPW_Engine.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_Engine.cpp'; fi`

GPW_Engine.lo: common/windows/GPW_Engine.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_Engine.lo -MD -MP -MF "$(DEPDIR)/GPW_Engine.Tpo" \
	  -c -o GPW_Engine.lo `test -f 'common/windows/GPW_Engine.cpp' || echo '$(srcdir)/'`common/windows/GPW_Engine.cpp; \
	then mv -f "$(DEPDIR)/GPW_Engine.Tpo" "$(DEPDIR)/GPW_Engine.Plo"; \
	else rm -f "$(DEPDIR)/GPW_Engine.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_Engine.cpp' object='GPW_Engine.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPW_Engine.Plo' tmpdepfile='$(DEPDIR)/GPW_Engine.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_Engine.lo `test -f 'common/windows/GPW_Engine.cpp' || echo '$(srcdir)/'`common/windows/GPW_Engine.cpp

GPW_KeyboardDevice.o: common/windows/GPW_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_KeyboardDevice.o -MD -MP -MF "$(DEPDIR)/GPW_KeyboardDevice.Tpo" \
	  -c -o GPW_KeyboardDevice.o `test -f 'common/windows/GPW_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/windows/GPW_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPW_KeyboardDevice.Tpo" "$(DEPDIR)/GPW_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPW_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_KeyboardDevice.cpp' object='GPW_KeyboardDevice.o' libtool=no \
#	depfile='$(DEPDIR)/GPW_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPW_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_KeyboardDevice.o `test -f 'common/windows/GPW_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/windows/GPW_KeyboardDevice.cpp

GPW_KeyboardDevice.obj: common/windows/GPW_KeyboardDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_KeyboardDevice.obj -MD -MP -MF "$(DEPDIR)/GPW_KeyboardDevice.Tpo" \
	  -c -o GPW_KeyboardDevice.obj `if test -f 'common/windows/GPW_KeyboardDevice.cpp'; then $(CYGPATH_W) 'common/windows/GPW_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_KeyboardDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPW_KeyboardDevice.Tpo" "$(DEPDIR)/GPW_KeyboardDevice.Po"; \
	else rm -f "$(DEPDIR)/GPW_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_KeyboardDevice.cpp' object='GPW_KeyboardDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/GPW_KeyboardDevice.Po' tmpdepfile='$(DEPDIR)/GPW_KeyboardDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_KeyboardDevice.obj `if test -f 'common/windows/GPW_KeyboardDevice.cpp'; then $(CYGPATH_W) 'common/windows/GPW_KeyboardDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_KeyboardDevice.cpp'; fi`

GPW_KeyboardDevice.lo: common/windows/GPW_KeyboardDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_KeyboardDevice.lo -MD -MP -MF "$(DEPDIR)/GPW_KeyboardDevice.Tpo" \
	  -c -o GPW_KeyboardDevice.lo `test -f 'common/windows/GPW_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/windows/GPW_KeyboardDevice.cpp; \
	then mv -f "$(DEPDIR)/GPW_KeyboardDevice.Tpo" "$(DEPDIR)/GPW_KeyboardDevice.Plo"; \
	else rm -f "$(DEPDIR)/GPW_KeyboardDevice.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_KeyboardDevice.cpp' object='GPW_KeyboardDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPW_KeyboardDevice.Plo' tmpdepfile='$(DEPDIR)/GPW_KeyboardDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_KeyboardDevice.lo `test -f 'common/windows/GPW_KeyboardDevice.cpp' || echo '$(srcdir)/'`common/windows/GPW_KeyboardDevice.cpp

GPW_System.o: common/windows/GPW_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_System.o -MD -MP -MF "$(DEPDIR)/GPW_System.Tpo" \
	  -c -o GPW_System.o `test -f 'common/windows/GPW_System.cpp' || echo '$(srcdir)/'`common/windows/GPW_System.cpp; \
	then mv -f "$(DEPDIR)/GPW_System.Tpo" "$(DEPDIR)/GPW_System.Po"; \
	else rm -f "$(DEPDIR)/GPW_System.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_System.cpp' object='GPW_System.o' libtool=no \
#	depfile='$(DEPDIR)/GPW_System.Po' tmpdepfile='$(DEPDIR)/GPW_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_System.o `test -f 'common/windows/GPW_System.cpp' || echo '$(srcdir)/'`common/windows/GPW_System.cpp

GPW_System.obj: common/windows/GPW_System.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_System.obj -MD -MP -MF "$(DEPDIR)/GPW_System.Tpo" \
	  -c -o GPW_System.obj `if test -f 'common/windows/GPW_System.cpp'; then $(CYGPATH_W) 'common/windows/GPW_System.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_System.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GPW_System.Tpo" "$(DEPDIR)/GPW_System.Po"; \
	else rm -f "$(DEPDIR)/GPW_System.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_System.cpp' object='GPW_System.obj' libtool=no \
#	depfile='$(DEPDIR)/GPW_System.Po' tmpdepfile='$(DEPDIR)/GPW_System.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_System.obj `if test -f 'common/windows/GPW_System.cpp'; then $(CYGPATH_W) 'common/windows/GPW_System.cpp'; else $(CYGPATH_W) '$(srcdir)/common/windows/GPW_System.cpp'; fi`

GPW_System.lo: common/windows/GPW_System.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GPW_System.lo -MD -MP -MF "$(DEPDIR)/GPW_System.Tpo" \
	  -c -o GPW_System.lo `test -f 'common/windows/GPW_System.cpp' || echo '$(srcdir)/'`common/windows/GPW_System.cpp; \
	then mv -f "$(DEPDIR)/GPW_System.Tpo" "$(DEPDIR)/GPW_System.Plo"; \
	else rm -f "$(DEPDIR)/GPW_System.Tpo"; exit 1; \
	fi
#	source='common/windows/GPW_System.cpp' object='GPW_System.lo' libtool=yes \
#	depfile='$(DEPDIR)/GPW_System.Plo' tmpdepfile='$(DEPDIR)/GPW_System.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GPW_System.lo `test -f 'common/windows/GPW_System.cpp' || echo '$(srcdir)/'`common/windows/GPW_System.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES)

installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-depend distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-data install-data-am \
	install-exec install-exec-am install-info install-info-am \
	install-man install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
