#!/usr/bin/python
import sys

Import ('env')

sources = env.Glob('*.cpp')
defs = [ 'GLEW_STATIC' ]

incs = '. #source/blender/python/generic' # Only for bpy_internal_import.h, be very careful
incs += ' #source/blender/python/mathutils' # Only for mathutils, be very careful

incs += ' #intern/string #intern/guardedalloc #intern/container'
incs += ' #source/gameengine/Rasterizer/RAS_OpenGLRasterizer'
incs += ' #intern/audaspace/intern #intern/audaspace/FX #source/gameengine/Converter'
incs += ' #source/gameengine/BlenderRoutines #source/blender/imbuf #intern/moto/include'
incs += ' #source/gameengine/Ketsji #source/gameengine/Ketsji/KXNetwork #source/blender/blenlib #source/blender/blenfont'
incs += ' #source/blender/blenkernel #source/blender #source/blender/editors/include'
incs += ' #source/blender/makesdna #source/blender/makesrna #source/blender/python #source/gameengine/Rasterizer'
incs += ' #source/gameengine/GameLogic #source/gameengine/Expressions #source/gameengine/Network'
incs += ' #source/gameengine/SceneGraph #source/gameengine/Physics/common'
incs += ' #source/gameengine/Physics/Dummy'
incs += ' #source/blender/misc #source/blender/blenloader #extern/glew/include #source/blender/gpu'
incs += ' #extern/recastnavigation/Recast/Include #extern/recastnavigation/Detour/Include'

incs += ' ' + env['BF_BULLET_INC']
incs += ' ' + env['BF_OPENGL_INC']

if  env['WITH_BF_SDL']:
    incs += ' ' + env['BF_SDL_INC']
    defs.append('WITH_SDL')

if env['WITH_BF_PYTHON']:
    incs += ' ' + env['BF_PYTHON_INC']
    defs.append('WITH_PYTHON')

if env['WITH_BF_FFMPEG']:
    defs.append('WITH_FFMPEG')

if env['OURPLATFORM'] in ('win32-vc', 'win64-vc', 'win32-mingw'):
    if env['BF_DEBUG']:
        defs.append('_DEBUG') # for Python

if env['WITH_BF_CXX_GUARDEDALLOC']:
    defs.append('WITH_CXX_GUARDEDALLOC')

if env['WITH_BF_BULLET']:
    defs.append('USE_BULLET')
    incs += ' #source/gameengine/Physics/Bullet'

env.BlenderLib ( 'ge_logic_ketsji', sources, Split(incs), defs, libtype=['core','player'], priority=[320,45], cxx_compileflags=env['BGE_CXXFLAGS'])
