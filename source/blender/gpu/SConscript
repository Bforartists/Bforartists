#!/usr/bin/env python
#
# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The Original Code is Copyright (C) 2006, Blender Foundation
# All rights reserved.
#
# The Original Code is: all of this file.
#
# Contributor(s): Nathan Letwory.
#
# ***** END GPL LICENSE BLOCK *****

Import ('env')

sources = env.Glob('intern/*.c')
sources += env.Glob('shaders/*.c')

defs = []
defs += env['BF_GL_DEFINITIONS']

incs = [
    '.',
    '#/intern/glew-mx',
    '#/intern/guardedalloc',
    env['BF_GLEW_INC'],
    '#/intern/smoke/extern',
    '../blenkernel',
    '../blenlib',
    '../bmesh',
    '../imbuf',
    '../include',
    '../makesdna',
    '../makesrna',
    '../nodes',
    '../nodes/intern',
    ]

if env['WITH_BF_GAMEENGINE']:
    defs.append('WITH_GAMEENGINE')
if env['OURPLATFORM'] in ('win32-vc', 'win32-mingw', 'linuxcross', 'win64-vc', 'win64-mingw'):
    incs.append(env['BF_PTHREADS_INC'])

if env['WITH_BF_SMOKE']:
    defs.append('WITH_SMOKE')

if env['WITH_BF_DDS']:
    defs.append('WITH_DDS')

if env['WITH_BF_OPENSUBDIV']:
    defs.append('WITH_OPENSUBDIV')

# generated data files
import os
sources.extend((
    os.path.join(env['DATA_SOURCES'], "gpu_shader_geometry.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_program_smoke_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_program_smoke_color_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_basic_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_basic_vert.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_ssao_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_dof_hq_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_dof_hq_vert.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_dof_hq_geo.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_dof_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_dof_vert.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_depth_resolve.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_lib.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_fx_vert.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_material.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_sep_gaussian_blur_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_sep_gaussian_blur_vert.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_vertex.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_vertex_world.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_vsm_store_frag.glsl.c"),
    os.path.join(env['DATA_SOURCES'], "gpu_shader_vsm_store_vert.glsl.c"),
    ))

env.BlenderLib('bf_gpu', sources, incs, defines=defs, libtype=['core', 'player'], priority=[160, 110])
