#!/usr/bin/env python
#
# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The Original Code is Copyright (C) 2006, Blender Foundation
# All rights reserved.
#
# The Original Code is: all of this file.
#
# Contributor(s): Nathan Letwory.
#
# ***** END GPL LICENSE BLOCK *****

import os
Import ('env')

sources = env.Glob('intern/*.c')

incs = [
    '.',
    '#/intern/opencolorio',
    '#/intern/ffmpeg',
    '#/intern/guardedalloc',
    '#/intern/memutil',
    '../avi',
    '../blenkernel',
    '../blenlib',
    '../blenloader',
    '../makesdna',
    '../makesrna',
    env['BF_JPEG_INC'],
    env['BF_PNG_INC'],
    env['BF_TIFF_INC'],
    env['BF_ZLIB_INC'],
    ]
incs = ' '.join(incs)

defs = []

if env['OURPLATFORM'] in ('win32-vc', 'win32-mingw', 'linuxcross', 'win64-vc', 'win64-mingw'):
    incs += ' ' + env['BF_PTHREADS_INC']
    incs += ' ../../../intern/utfconv'

if env['WITH_BF_OIIO']:
    defs.append('WITH_OPENIMAGEIO')

if env['WITH_BF_OPENEXR']:
    defs.append('WITH_OPENEXR')
else:
    sources.append(os.path.join('intern', 'openexr', 'openexr_stub.cpp'))

if env['WITH_BF_TIFF']:
    defs.append('WITH_TIFF')
else:
    sources.remove(os.path.join('intern', 'tiff.c'))

if env['WITH_BF_DDS']:
    defs.append('WITH_DDS')

if env['WITH_BF_CINEON']:
    defs.append('WITH_CINEON')

if env['WITH_BF_HDR']:
    defs.append('WITH_HDR')
else:
    sources.remove(os.path.join('intern', 'radiance_hdr.c'))

if env['WITH_BF_FFMPEG']:
    defs.append('WITH_FFMPEG')
    incs += ' ' + env['BF_FFMPEG_INC']

if env['WITH_BF_OPENJPEG']:
    defs.append('WITH_OPENJPEG')
    incs += ' ' + env['BF_OPENJPEG_INC']
else:
    sources.remove(os.path.join('intern', 'jp2.c'))

if env['WITH_BF_REDCODE']:
    defs.append('WITH_REDCODE')
    incs += ' ' + env['BF_REDCODE_INC']

if env['WITH_BF_QUICKTIME']:
    incs += ' ../quicktime ' + env['BF_QUICKTIME_INC']
    defs.append('WITH_QUICKTIME')

env.BlenderLib ( libname = 'bf_imbuf', sources = sources, includes = Split(incs), defines = defs, libtype=['core','player'], priority = [185,115] )
