# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Freestyle
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _Freestyle.PySwigIterator_value(*args)
    def incr(*args): return _Freestyle.PySwigIterator_incr(*args)
    def decr(*args): return _Freestyle.PySwigIterator_decr(*args)
    def distance(*args): return _Freestyle.PySwigIterator_distance(*args)
    def equal(*args): return _Freestyle.PySwigIterator_equal(*args)
    def copy(*args): return _Freestyle.PySwigIterator_copy(*args)
    def next(*args): return _Freestyle.PySwigIterator_next(*args)
    def previous(*args): return _Freestyle.PySwigIterator_previous(*args)
    def advance(*args): return _Freestyle.PySwigIterator_advance(*args)
    def __eq__(*args): return _Freestyle.PySwigIterator___eq__(*args)
    def __ne__(*args): return _Freestyle.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _Freestyle.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _Freestyle.PySwigIterator___isub__(*args)
    def __add__(*args): return _Freestyle.PySwigIterator___add__(*args)
    def __sub__(*args): return _Freestyle.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _Freestyle.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class vectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt, name)
    __repr__ = _swig_repr
    def iterator(*args): return _Freestyle.vectorInt_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Freestyle.vectorInt___nonzero__(*args)
    def __len__(*args): return _Freestyle.vectorInt___len__(*args)
    def pop(*args): return _Freestyle.vectorInt_pop(*args)
    def __getslice__(*args): return _Freestyle.vectorInt___getslice__(*args)
    def __setslice__(*args): return _Freestyle.vectorInt___setslice__(*args)
    def __delslice__(*args): return _Freestyle.vectorInt___delslice__(*args)
    def __delitem__(*args): return _Freestyle.vectorInt___delitem__(*args)
    def __getitem__(*args): return _Freestyle.vectorInt___getitem__(*args)
    def __setitem__(*args): return _Freestyle.vectorInt___setitem__(*args)
    def append(*args): return _Freestyle.vectorInt_append(*args)
    def empty(*args): return _Freestyle.vectorInt_empty(*args)
    def size(*args): return _Freestyle.vectorInt_size(*args)
    def clear(*args): return _Freestyle.vectorInt_clear(*args)
    def swap(*args): return _Freestyle.vectorInt_swap(*args)
    def get_allocator(*args): return _Freestyle.vectorInt_get_allocator(*args)
    def begin(*args): return _Freestyle.vectorInt_begin(*args)
    def end(*args): return _Freestyle.vectorInt_end(*args)
    def rbegin(*args): return _Freestyle.vectorInt_rbegin(*args)
    def rend(*args): return _Freestyle.vectorInt_rend(*args)
    def pop_back(*args): return _Freestyle.vectorInt_pop_back(*args)
    def erase(*args): return _Freestyle.vectorInt_erase(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_vectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Freestyle.vectorInt_push_back(*args)
    def front(*args): return _Freestyle.vectorInt_front(*args)
    def back(*args): return _Freestyle.vectorInt_back(*args)
    def assign(*args): return _Freestyle.vectorInt_assign(*args)
    def resize(*args): return _Freestyle.vectorInt_resize(*args)
    def insert(*args): return _Freestyle.vectorInt_insert(*args)
    def reserve(*args): return _Freestyle.vectorInt_reserve(*args)
    def capacity(*args): return _Freestyle.vectorInt_capacity(*args)
    __swig_destroy__ = _Freestyle.delete_vectorInt
    __del__ = lambda self : None;
vectorInt_swigregister = _Freestyle.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class Id(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Id, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Id, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Id(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFirst(*args): return _Freestyle.Id_getFirst(*args)
    def getSecond(*args): return _Freestyle.Id_getSecond(*args)
    def setFirst(*args): return _Freestyle.Id_setFirst(*args)
    def setSecond(*args): return _Freestyle.Id_setSecond(*args)
    def __eq__(*args): return _Freestyle.Id___eq__(*args)
    def __ne__(*args): return _Freestyle.Id___ne__(*args)
    def __lt__(*args): return _Freestyle.Id___lt__(*args)
    __swig_destroy__ = _Freestyle.delete_Id
    __del__ = lambda self : None;
Id_swigregister = _Freestyle.Id_swigregister
Id_swigregister(Id)

class Vec_2u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2u, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_2u(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2u
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2u_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2u_dim)
    def norm(*args): return _Freestyle.Vec_2u_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_2u_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_2u_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_2u_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_2u___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_2u___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_2u___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_2u___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_2u___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_2u___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_2u___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_2u___gt__(*args)
Vec_2u_swigregister = _Freestyle.Vec_2u_swigregister
Vec_2u_swigregister(Vec_2u)
Vec_2u_dim = _Freestyle.Vec_2u_dim

class Vec_2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_2i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2i
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2i_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2i_dim)
    def norm(*args): return _Freestyle.Vec_2i_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_2i_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_2i_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_2i_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_2i___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_2i___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_2i___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_2i___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_2i___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_2i___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_2i___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_2i___gt__(*args)
Vec_2i_swigregister = _Freestyle.Vec_2i_swigregister
Vec_2i_swigregister(Vec_2i)
Vec_2i_dim = _Freestyle.Vec_2i_dim

class Vec_2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_2d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2d
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2d_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2d_dim)
    def norm(*args): return _Freestyle.Vec_2d_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_2d_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_2d_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_2d_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_2d___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_2d___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_2d___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_2d___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_2d___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_2d___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_2d___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_2d___gt__(*args)
Vec_2d_swigregister = _Freestyle.Vec_2d_swigregister
Vec_2d_swigregister(Vec_2d)
Vec_2d_dim = _Freestyle.Vec_2d_dim

class Vec_2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2f
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2f_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2f_dim)
    def norm(*args): return _Freestyle.Vec_2f_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_2f_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_2f_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_2f_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_2f___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_2f___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_2f___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_2f___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_2f___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_2f___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_2f___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_2f___gt__(*args)
Vec_2f_swigregister = _Freestyle.Vec_2f_swigregister
Vec_2f_swigregister(Vec_2f)
Vec_2f_dim = _Freestyle.Vec_2f_dim

class Vec2u(Vec_2u):
    __swig_setmethods__ = {}
    for _s in [Vec_2u]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2u, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2u]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2u, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2u(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec2u_x(*args)
    def y(*args): return _Freestyle.Vec2u_y(*args)
    def setX(*args): return _Freestyle.Vec2u_setX(*args)
    def setY(*args): return _Freestyle.Vec2u_setY(*args)
    def __add__(*args): return _Freestyle.Vec2u___add__(*args)
    def __sub__(*args): return _Freestyle.Vec2u___sub__(*args)
    def __div__(*args): return _Freestyle.Vec2u___div__(*args)
    def __mul__(*args): return _Freestyle.Vec2u___mul__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec2u
    __del__ = lambda self : None;
Vec2u_swigregister = _Freestyle.Vec2u_swigregister
Vec2u_swigregister(Vec2u)

class Vec2i(Vec_2i):
    __swig_setmethods__ = {}
    for _s in [Vec_2i]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2i, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2i]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2i(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec2i_x(*args)
    def y(*args): return _Freestyle.Vec2i_y(*args)
    def setX(*args): return _Freestyle.Vec2i_setX(*args)
    def setY(*args): return _Freestyle.Vec2i_setY(*args)
    def __add__(*args): return _Freestyle.Vec2i___add__(*args)
    def __sub__(*args): return _Freestyle.Vec2i___sub__(*args)
    def __div__(*args): return _Freestyle.Vec2i___div__(*args)
    def __mul__(*args): return _Freestyle.Vec2i___mul__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec2i
    __del__ = lambda self : None;
Vec2i_swigregister = _Freestyle.Vec2i_swigregister
Vec2i_swigregister(Vec2i)

class Vec2f(Vec_2f):
    __swig_setmethods__ = {}
    for _s in [Vec_2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2f, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec2f_x(*args)
    def y(*args): return _Freestyle.Vec2f_y(*args)
    def setX(*args): return _Freestyle.Vec2f_setX(*args)
    def setY(*args): return _Freestyle.Vec2f_setY(*args)
    def __add__(*args): return _Freestyle.Vec2f___add__(*args)
    def __sub__(*args): return _Freestyle.Vec2f___sub__(*args)
    def __div__(*args): return _Freestyle.Vec2f___div__(*args)
    def __mul__(*args): return _Freestyle.Vec2f___mul__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec2f
    __del__ = lambda self : None;
Vec2f_swigregister = _Freestyle.Vec2f_swigregister
Vec2f_swigregister(Vec2f)

class Vec2d(Vec_2d):
    __swig_setmethods__ = {}
    for _s in [Vec_2d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2d, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec2d_x(*args)
    def y(*args): return _Freestyle.Vec2d_y(*args)
    def setX(*args): return _Freestyle.Vec2d_setX(*args)
    def setY(*args): return _Freestyle.Vec2d_setY(*args)
    def __add__(*args): return _Freestyle.Vec2d___add__(*args)
    def __sub__(*args): return _Freestyle.Vec2d___sub__(*args)
    def __div__(*args): return _Freestyle.Vec2d___div__(*args)
    def __mul__(*args): return _Freestyle.Vec2d___mul__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec2d
    __del__ = lambda self : None;
Vec2d_swigregister = _Freestyle.Vec2d_swigregister
Vec2d_swigregister(Vec2d)

class Vec_3u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3u, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_3u(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3u
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3u_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3u_dim)
    def norm(*args): return _Freestyle.Vec_3u_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_3u_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_3u_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_3u_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_3u___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_3u___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_3u___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_3u___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_3u___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_3u___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_3u___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_3u___gt__(*args)
Vec_3u_swigregister = _Freestyle.Vec_3u_swigregister
Vec_3u_swigregister(Vec_3u)
Vec_3u_dim = _Freestyle.Vec_3u_dim

class Vec_3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_3i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3i
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3i_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3i_dim)
    def norm(*args): return _Freestyle.Vec_3i_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_3i_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_3i_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_3i_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_3i___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_3i___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_3i___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_3i___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_3i___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_3i___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_3i___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_3i___gt__(*args)
Vec_3i_swigregister = _Freestyle.Vec_3i_swigregister
Vec_3i_swigregister(Vec_3i)
Vec_3i_dim = _Freestyle.Vec_3i_dim

class Vec_3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_3d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3d
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3d_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3d_dim)
    def norm(*args): return _Freestyle.Vec_3d_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_3d_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_3d_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_3d_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_3d___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_3d___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_3d___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_3d___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_3d___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_3d___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_3d___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_3d___gt__(*args)
Vec_3d_swigregister = _Freestyle.Vec_3d_swigregister
Vec_3d_swigregister(Vec_3d)
Vec_3d_dim = _Freestyle.Vec_3d_dim

class Vec_3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec_3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3f
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3f_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3f_dim)
    def norm(*args): return _Freestyle.Vec_3f_norm(*args)
    def squareNorm(*args): return _Freestyle.Vec_3f_squareNorm(*args)
    def normalize(*args): return _Freestyle.Vec_3f_normalize(*args)
    def normalizeSafe(*args): return _Freestyle.Vec_3f_normalizeSafe(*args)
    def __add__(*args): return _Freestyle.Vec_3f___add__(*args)
    def __sub__(*args): return _Freestyle.Vec_3f___sub__(*args)
    def __div__(*args): return _Freestyle.Vec_3f___div__(*args)
    def __mul__(*args): return _Freestyle.Vec_3f___mul__(*args)
    def __eq__(*args): return _Freestyle.Vec_3f___eq__(*args)
    def __ne__(*args): return _Freestyle.Vec_3f___ne__(*args)
    def __lt__(*args): return _Freestyle.Vec_3f___lt__(*args)
    def __gt__(*args): return _Freestyle.Vec_3f___gt__(*args)
Vec_3f_swigregister = _Freestyle.Vec_3f_swigregister
Vec_3f_swigregister(Vec_3f)
Vec_3f_dim = _Freestyle.Vec_3f_dim

class Vec3u(Vec_3u):
    __swig_setmethods__ = {}
    for _s in [Vec_3u]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3u, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3u]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3u, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3u(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec3u_x(*args)
    def y(*args): return _Freestyle.Vec3u_y(*args)
    def z(*args): return _Freestyle.Vec3u_z(*args)
    def setX(*args): return _Freestyle.Vec3u_setX(*args)
    def setY(*args): return _Freestyle.Vec3u_setY(*args)
    def setZ(*args): return _Freestyle.Vec3u_setZ(*args)
    def __add__(*args): return _Freestyle.Vec3u___add__(*args)
    def __sub__(*args): return _Freestyle.Vec3u___sub__(*args)
    def __div__(*args): return _Freestyle.Vec3u___div__(*args)
    def __mul__(*args): return _Freestyle.Vec3u___mul__(*args)
    def __xor__(*args): return _Freestyle.Vec3u___xor__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec3u
    __del__ = lambda self : None;
Vec3u_swigregister = _Freestyle.Vec3u_swigregister
Vec3u_swigregister(Vec3u)

class Vec3i(Vec_3i):
    __swig_setmethods__ = {}
    for _s in [Vec_3i]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3i, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3i]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3i(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec3i_x(*args)
    def y(*args): return _Freestyle.Vec3i_y(*args)
    def z(*args): return _Freestyle.Vec3i_z(*args)
    def setX(*args): return _Freestyle.Vec3i_setX(*args)
    def setY(*args): return _Freestyle.Vec3i_setY(*args)
    def setZ(*args): return _Freestyle.Vec3i_setZ(*args)
    def __add__(*args): return _Freestyle.Vec3i___add__(*args)
    def __sub__(*args): return _Freestyle.Vec3i___sub__(*args)
    def __div__(*args): return _Freestyle.Vec3i___div__(*args)
    def __mul__(*args): return _Freestyle.Vec3i___mul__(*args)
    def __xor__(*args): return _Freestyle.Vec3i___xor__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec3i
    __del__ = lambda self : None;
Vec3i_swigregister = _Freestyle.Vec3i_swigregister
Vec3i_swigregister(Vec3i)

class Vec3f(Vec_3f):
    __swig_setmethods__ = {}
    for _s in [Vec_3f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3f, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec3f_x(*args)
    def y(*args): return _Freestyle.Vec3f_y(*args)
    def z(*args): return _Freestyle.Vec3f_z(*args)
    def setX(*args): return _Freestyle.Vec3f_setX(*args)
    def setY(*args): return _Freestyle.Vec3f_setY(*args)
    def setZ(*args): return _Freestyle.Vec3f_setZ(*args)
    def __add__(*args): return _Freestyle.Vec3f___add__(*args)
    def __sub__(*args): return _Freestyle.Vec3f___sub__(*args)
    def __div__(*args): return _Freestyle.Vec3f___div__(*args)
    def __mul__(*args): return _Freestyle.Vec3f___mul__(*args)
    def __xor__(*args): return _Freestyle.Vec3f___xor__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec3f
    __del__ = lambda self : None;
Vec3f_swigregister = _Freestyle.Vec3f_swigregister
Vec3f_swigregister(Vec3f)

class Vec3d(Vec_3d):
    __swig_setmethods__ = {}
    for _s in [Vec_3d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3d, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return _Freestyle.Vec3d_x(*args)
    def y(*args): return _Freestyle.Vec3d_y(*args)
    def z(*args): return _Freestyle.Vec3d_z(*args)
    def setX(*args): return _Freestyle.Vec3d_setX(*args)
    def setY(*args): return _Freestyle.Vec3d_setY(*args)
    def setZ(*args): return _Freestyle.Vec3d_setZ(*args)
    def __add__(*args): return _Freestyle.Vec3d___add__(*args)
    def __sub__(*args): return _Freestyle.Vec3d___sub__(*args)
    def __div__(*args): return _Freestyle.Vec3d___div__(*args)
    def __mul__(*args): return _Freestyle.Vec3d___mul__(*args)
    def __xor__(*args): return _Freestyle.Vec3d___xor__(*args)
    __swig_destroy__ = _Freestyle.delete_Vec3d
    __del__ = lambda self : None;
Vec3d_swigregister = _Freestyle.Vec3d_swigregister
Vec3d_swigregister(Vec3d)

_Noise_B_ = _Freestyle._Noise_B_
class Noise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Noise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Noise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Noise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Noise
    __del__ = lambda self : None;
    def turbulence1(*args): return _Freestyle.Noise_turbulence1(*args)
    def turbulence2(*args): return _Freestyle.Noise_turbulence2(*args)
    def turbulence3(*args): return _Freestyle.Noise_turbulence3(*args)
    def smoothNoise1(*args): return _Freestyle.Noise_smoothNoise1(*args)
    def smoothNoise2(*args): return _Freestyle.Noise_smoothNoise2(*args)
    def smoothNoise3(*args): return _Freestyle.Noise_smoothNoise3(*args)
Noise_swigregister = _Freestyle.Noise_swigregister
Noise_swigregister(Noise)

class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Material(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Material
    __del__ = lambda self : None;
    def diffuse(*args): return _Freestyle.Material_diffuse(*args)
    def diffuseR(*args): return _Freestyle.Material_diffuseR(*args)
    def diffuseG(*args): return _Freestyle.Material_diffuseG(*args)
    def diffuseB(*args): return _Freestyle.Material_diffuseB(*args)
    def diffuseA(*args): return _Freestyle.Material_diffuseA(*args)
    def specular(*args): return _Freestyle.Material_specular(*args)
    def specularR(*args): return _Freestyle.Material_specularR(*args)
    def specularG(*args): return _Freestyle.Material_specularG(*args)
    def specularB(*args): return _Freestyle.Material_specularB(*args)
    def specularA(*args): return _Freestyle.Material_specularA(*args)
    def ambient(*args): return _Freestyle.Material_ambient(*args)
    def ambientR(*args): return _Freestyle.Material_ambientR(*args)
    def ambientG(*args): return _Freestyle.Material_ambientG(*args)
    def ambientB(*args): return _Freestyle.Material_ambientB(*args)
    def ambientA(*args): return _Freestyle.Material_ambientA(*args)
    def emission(*args): return _Freestyle.Material_emission(*args)
    def emissionR(*args): return _Freestyle.Material_emissionR(*args)
    def emissionG(*args): return _Freestyle.Material_emissionG(*args)
    def emissionB(*args): return _Freestyle.Material_emissionB(*args)
    def emissionA(*args): return _Freestyle.Material_emissionA(*args)
    def shininess(*args): return _Freestyle.Material_shininess(*args)
    def SetDiffuse(*args): return _Freestyle.Material_SetDiffuse(*args)
    def SetSpecular(*args): return _Freestyle.Material_SetSpecular(*args)
    def SetAmbient(*args): return _Freestyle.Material_SetAmbient(*args)
    def SetEmission(*args): return _Freestyle.Material_SetEmission(*args)
    def SetShininess(*args): return _Freestyle.Material_SetShininess(*args)
    def __ne__(*args): return _Freestyle.Material___ne__(*args)
    def __eq__(*args): return _Freestyle.Material___eq__(*args)
Material_swigregister = _Freestyle.Material_swigregister
Material_swigregister(Material)

class Interface0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface0D, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.Interface0D_getExactTypeName(*args)
    def getX(*args): return _Freestyle.Interface0D_getX(*args)
    def getY(*args): return _Freestyle.Interface0D_getY(*args)
    def getZ(*args): return _Freestyle.Interface0D_getZ(*args)
    def getPoint3D(*args): return _Freestyle.Interface0D_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.Interface0D_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.Interface0D_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.Interface0D_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.Interface0D_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.Interface0D_getFEdge(*args)
    def getId(*args): return _Freestyle.Interface0D_getId(*args)
    def getNature(*args): return _Freestyle.Interface0D_getNature(*args)
    def castToSVertex(*args): return _Freestyle.Interface0D_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.Interface0D_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.Interface0D_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.Interface0D_castToTVertex(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_Interface0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Interface0D
    __del__ = lambda self : None;
Interface0D_swigregister = _Freestyle.Interface0D_swigregister
Interface0D_swigregister(Interface0D)
cvar = _Freestyle.cvar
POINT = cvar.POINT
S_VERTEX = cvar.S_VERTEX
VIEW_VERTEX = cvar.VIEW_VERTEX
NON_T_VERTEX = cvar.NON_T_VERTEX
T_VERTEX = cvar.T_VERTEX
CUSP = cvar.CUSP
NO_FEATURE = cvar.NO_FEATURE
SILHOUETTE = cvar.SILHOUETTE
BORDER = cvar.BORDER
CREASE = cvar.CREASE
RIDGE = cvar.RIDGE
VALLEY = cvar.VALLEY
SUGGESTIVE_CONTOUR = cvar.SUGGESTIVE_CONTOUR

class Interface0DIteratorNested(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface0DIteratorNested, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface0DIteratorNested, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_Interface0DIteratorNested
    __del__ = lambda self : None;
    def getExactTypeName(*args): return _Freestyle.Interface0DIteratorNested_getExactTypeName(*args)
    def getObject(*args): return _Freestyle.Interface0DIteratorNested_getObject(*args)
    def __deref__(*args): return _Freestyle.Interface0DIteratorNested___deref__(*args)
    def increment(*args): return _Freestyle.Interface0DIteratorNested_increment(*args)
    def decrement(*args): return _Freestyle.Interface0DIteratorNested_decrement(*args)
    def isBegin(*args): return _Freestyle.Interface0DIteratorNested_isBegin(*args)
    def isEnd(*args): return _Freestyle.Interface0DIteratorNested_isEnd(*args)
    def __eq__(*args): return _Freestyle.Interface0DIteratorNested___eq__(*args)
    def __ne__(*args): return _Freestyle.Interface0DIteratorNested___ne__(*args)
    def t(*args): return _Freestyle.Interface0DIteratorNested_t(*args)
    def u(*args): return _Freestyle.Interface0DIteratorNested_u(*args)
    def copy(*args): return _Freestyle.Interface0DIteratorNested_copy(*args)
    def getX(*args): return _Freestyle.Interface0DIteratorNested_getX(*args)
    def getY(*args): return _Freestyle.Interface0DIteratorNested_getY(*args)
    def getZ(*args): return _Freestyle.Interface0DIteratorNested_getZ(*args)
    def getPoint3D(*args): return _Freestyle.Interface0DIteratorNested_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.Interface0DIteratorNested_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.Interface0DIteratorNested_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.Interface0DIteratorNested_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.Interface0DIteratorNested_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.Interface0DIteratorNested_getFEdge(*args)
    def getId(*args): return _Freestyle.Interface0DIteratorNested_getId(*args)
    def getNature(*args): return _Freestyle.Interface0DIteratorNested_getNature(*args)
    def castToSVertex(*args): return _Freestyle.Interface0DIteratorNested_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.Interface0DIteratorNested_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.Interface0DIteratorNested_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.Interface0DIteratorNested_castToTVertex(*args)
Interface0DIteratorNested_swigregister = _Freestyle.Interface0DIteratorNested_swigregister
Interface0DIteratorNested_swigregister(Interface0DIteratorNested)

class Interface0DIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface0DIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface0DIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Interface0DIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Interface0DIterator
    __del__ = lambda self : None;
    def getExactTypeName(*args): return _Freestyle.Interface0DIterator_getExactTypeName(*args)
    def getObject(*args): return _Freestyle.Interface0DIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.Interface0DIterator___deref__(*args)
    def increment(*args): return _Freestyle.Interface0DIterator_increment(*args)
    def decrement(*args): return _Freestyle.Interface0DIterator_decrement(*args)
    def isBegin(*args): return _Freestyle.Interface0DIterator_isBegin(*args)
    def isEnd(*args): return _Freestyle.Interface0DIterator_isEnd(*args)
    def __eq__(*args): return _Freestyle.Interface0DIterator___eq__(*args)
    def __ne__(*args): return _Freestyle.Interface0DIterator___ne__(*args)
    def t(*args): return _Freestyle.Interface0DIterator_t(*args)
    def u(*args): return _Freestyle.Interface0DIterator_u(*args)
    def getX(*args): return _Freestyle.Interface0DIterator_getX(*args)
    def getY(*args): return _Freestyle.Interface0DIterator_getY(*args)
    def getZ(*args): return _Freestyle.Interface0DIterator_getZ(*args)
    def getPoint3D(*args): return _Freestyle.Interface0DIterator_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.Interface0DIterator_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.Interface0DIterator_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.Interface0DIterator_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.Interface0DIterator_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.Interface0DIterator_getFEdge(*args)
    def getId(*args): return _Freestyle.Interface0DIterator_getId(*args)
    def getNature(*args): return _Freestyle.Interface0DIterator_getNature(*args)
    def castToSVertex(*args): return _Freestyle.Interface0DIterator_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.Interface0DIterator_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.Interface0DIterator_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.Interface0DIterator_castToTVertex(*args)
Interface0DIterator_swigregister = _Freestyle.Interface0DIterator_swigregister
Interface0DIterator_swigregister(Interface0DIterator)

MEAN = _Freestyle.MEAN
MIN = _Freestyle.MIN
MAX = _Freestyle.MAX
FIRST = _Freestyle.FIRST
LAST = _Freestyle.LAST
class Interface1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface1D, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.Interface1D_getExactTypeName(*args)
    def verticesBegin(*args): return _Freestyle.Interface1D_verticesBegin(*args)
    def verticesEnd(*args): return _Freestyle.Interface1D_verticesEnd(*args)
    def pointsBegin(*args): return _Freestyle.Interface1D_pointsBegin(*args)
    def pointsEnd(*args): return _Freestyle.Interface1D_pointsEnd(*args)
    def getLength2D(*args): return _Freestyle.Interface1D_getLength2D(*args)
    def getId(*args): return _Freestyle.Interface1D_getId(*args)
    def getNature(*args): return _Freestyle.Interface1D_getNature(*args)
    def getTimeStamp(*args): return _Freestyle.Interface1D_getTimeStamp(*args)
    def setTimeStamp(*args): return _Freestyle.Interface1D_setTimeStamp(*args)
    __swig_destroy__ = _Freestyle.delete_Interface1D
    __del__ = lambda self : None;
Interface1D_swigregister = _Freestyle.Interface1D_swigregister
Interface1D_swigregister(Interface1D)

class SVertex(Interface0D):
    __swig_setmethods__ = {}
    for _s in [Interface0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.SVertex_getExactTypeName(*args)
    def getX(*args): return _Freestyle.SVertex_getX(*args)
    def getY(*args): return _Freestyle.SVertex_getY(*args)
    def getZ(*args): return _Freestyle.SVertex_getZ(*args)
    def getPoint3D(*args): return _Freestyle.SVertex_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.SVertex_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.SVertex_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.SVertex_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.SVertex_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.SVertex_getFEdge(*args)
    def getId(*args): return _Freestyle.SVertex_getId(*args)
    def getNature(*args): return _Freestyle.SVertex_getNature(*args)
    def castToSVertex(*args): return _Freestyle.SVertex_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.SVertex_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.SVertex_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.SVertex_castToTVertex(*args)
    __swig_setmethods__["userdata"] = _Freestyle.SVertex_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.SVertex_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.SVertex_userdata_get, _Freestyle.SVertex_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_SVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SVertex
    __del__ = lambda self : None;
    def dupplicate(*args): return _Freestyle.SVertex_dupplicate(*args)
    def __eq__(*args): return _Freestyle.SVertex___eq__(*args)
    def point3D(*args): return _Freestyle.SVertex_point3D(*args)
    def point2D(*args): return _Freestyle.SVertex_point2D(*args)
    def normals(*args): return _Freestyle.SVertex_normals(*args)
    def normalsSize(*args): return _Freestyle.SVertex_normalsSize(*args)
    def fedges(*args): return _Freestyle.SVertex_fedges(*args)
    def fedges_begin(*args): return _Freestyle.SVertex_fedges_begin(*args)
    def fedges_end(*args): return _Freestyle.SVertex_fedges_end(*args)
    def z(*args): return _Freestyle.SVertex_z(*args)
    def viewvertex(*args): return _Freestyle.SVertex_viewvertex(*args)
    def SetPoint3D(*args): return _Freestyle.SVertex_SetPoint3D(*args)
    def SetPoint2D(*args): return _Freestyle.SVertex_SetPoint2D(*args)
    def AddNormal(*args): return _Freestyle.SVertex_AddNormal(*args)
    def setCurvatureInfo(*args): return _Freestyle.SVertex_setCurvatureInfo(*args)
    def getCurvatureInfo(*args): return _Freestyle.SVertex_getCurvatureInfo(*args)
    def setCurvatureFredo(*args): return _Freestyle.SVertex_setCurvatureFredo(*args)
    def setDirectionFredo(*args): return _Freestyle.SVertex_setDirectionFredo(*args)
    def curvatureFredo(*args): return _Freestyle.SVertex_curvatureFredo(*args)
    def directionFredo(*args): return _Freestyle.SVertex_directionFredo(*args)
    def SetId(*args): return _Freestyle.SVertex_SetId(*args)
    def SetFEdges(*args): return _Freestyle.SVertex_SetFEdges(*args)
    def SetShape(*args): return _Freestyle.SVertex_SetShape(*args)
    def SetViewVertex(*args): return _Freestyle.SVertex_SetViewVertex(*args)
    def AddFEdge(*args): return _Freestyle.SVertex_AddFEdge(*args)
    def Replace(*args): return _Freestyle.SVertex_Replace(*args)
    def fedge(*args): return _Freestyle.SVertex_fedge(*args)
    def point2d(*args): return _Freestyle.SVertex_point2d(*args)
    def point3d(*args): return _Freestyle.SVertex_point3d(*args)
    def normal(*args): return _Freestyle.SVertex_normal(*args)
    def shape_id(*args): return _Freestyle.SVertex_shape_id(*args)
    def shape(*args): return _Freestyle.SVertex_shape(*args)
    def shape_importance(*args): return _Freestyle.SVertex_shape_importance(*args)
    def qi(*args): return _Freestyle.SVertex_qi(*args)
    def occluders_begin(*args): return _Freestyle.SVertex_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.SVertex_occluders_end(*args)
    def occluders_empty(*args): return _Freestyle.SVertex_occluders_empty(*args)
    def occluders_size(*args): return _Freestyle.SVertex_occluders_size(*args)
    def occludee(*args): return _Freestyle.SVertex_occludee(*args)
    def occluded_shape(*args): return _Freestyle.SVertex_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.SVertex_occludee_empty(*args)
    def z_discontinuity(*args): return _Freestyle.SVertex_z_discontinuity(*args)
SVertex_swigregister = _Freestyle.SVertex_swigregister
SVertex_swigregister(SVertex)
integrateUnsigned = _Freestyle.integrateUnsigned
integrateFloat = _Freestyle.integrateFloat
integrateDouble = _Freestyle.integrateDouble

class FEdge(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdge, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.FEdge_getExactTypeName(*args)
    def getLength2D(*args): return _Freestyle.FEdge_getLength2D(*args)
    def getId(*args): return _Freestyle.FEdge_getId(*args)
    __swig_setmethods__["userdata"] = _Freestyle.FEdge_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.FEdge_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.FEdge_userdata_get, _Freestyle.FEdge_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_FEdge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FEdge
    __del__ = lambda self : None;
    def dupplicate(*args): return _Freestyle.FEdge_dupplicate(*args)
    def vertexA(*args): return _Freestyle.FEdge_vertexA(*args)
    def vertexB(*args): return _Freestyle.FEdge_vertexB(*args)
    def getNature(*args): return _Freestyle.FEdge_getNature(*args)
    def nextEdge(*args): return _Freestyle.FEdge_nextEdge(*args)
    def previousEdge(*args): return _Freestyle.FEdge_previousEdge(*args)
    def invisibility(*args): return _Freestyle.FEdge_invisibility(*args)
    def viewedge(*args): return _Freestyle.FEdge_viewedge(*args)
    def center3d(*args): return _Freestyle.FEdge_center3d(*args)
    def center2d(*args): return _Freestyle.FEdge_center2d(*args)
    def aFace(*args): return _Freestyle.FEdge_aFace(*args)
    def getOccludeeIntersection(*args): return _Freestyle.FEdge_getOccludeeIntersection(*args)
    def getOccludeeEmpty(*args): return _Freestyle.FEdge_getOccludeeEmpty(*args)
    def isSmooth(*args): return _Freestyle.FEdge_isSmooth(*args)
    def SetVertexA(*args): return _Freestyle.FEdge_SetVertexA(*args)
    def SetVertexB(*args): return _Freestyle.FEdge_SetVertexB(*args)
    def SetId(*args): return _Freestyle.FEdge_SetId(*args)
    def SetNextEdge(*args): return _Freestyle.FEdge_SetNextEdge(*args)
    def SetPreviousEdge(*args): return _Freestyle.FEdge_SetPreviousEdge(*args)
    def SetNature(*args): return _Freestyle.FEdge_SetNature(*args)
    def SetViewEdge(*args): return _Freestyle.FEdge_SetViewEdge(*args)
    def SetaFace(*args): return _Freestyle.FEdge_SetaFace(*args)
    def SetOccludeeIntersection(*args): return _Freestyle.FEdge_SetOccludeeIntersection(*args)
    def SetOccludeeEmpty(*args): return _Freestyle.FEdge_SetOccludeeEmpty(*args)
    def SetSmooth(*args): return _Freestyle.FEdge_SetSmooth(*args)
    __swig_getmethods__["CommonVertex"] = lambda x: _Freestyle.FEdge_CommonVertex
    if _newclass:CommonVertex = staticmethod(_Freestyle.FEdge_CommonVertex)
    def min2d(*args): return _Freestyle.FEdge_min2d(*args)
    def max2d(*args): return _Freestyle.FEdge_max2d(*args)
    def shape_id(*args): return _Freestyle.FEdge_shape_id(*args)
    def shape(*args): return _Freestyle.FEdge_shape(*args)
    def shape_importance(*args): return _Freestyle.FEdge_shape_importance(*args)
    def qi(*args): return _Freestyle.FEdge_qi(*args)
    def occluders_begin(*args): return _Freestyle.FEdge_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.FEdge_occluders_end(*args)
    def occluders_empty(*args): return _Freestyle.FEdge_occluders_empty(*args)
    def occluders_size(*args): return _Freestyle.FEdge_occluders_size(*args)
    def occludee(*args): return _Freestyle.FEdge_occludee(*args)
    def occluded_shape(*args): return _Freestyle.FEdge_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.FEdge_occludee_empty(*args)
    def z_discontinuity(*args): return _Freestyle.FEdge_z_discontinuity(*args)
    def viewedge_nature(*args): return _Freestyle.FEdge_viewedge_nature(*args)
    def orientation2d(*args): return _Freestyle.FEdge_orientation2d(*args)
    def orientation3d(*args): return _Freestyle.FEdge_orientation3d(*args)
    def verticesBegin(*args): return _Freestyle.FEdge_verticesBegin(*args)
    def verticesEnd(*args): return _Freestyle.FEdge_verticesEnd(*args)
    def pointsBegin(*args): return _Freestyle.FEdge_pointsBegin(*args)
    def pointsEnd(*args): return _Freestyle.FEdge_pointsEnd(*args)
FEdge_swigregister = _Freestyle.FEdge_swigregister
FEdge_swigregister(FEdge)
FEdge_CommonVertex = _Freestyle.FEdge_CommonVertex

class FEdgeSVertexIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgeSVertexIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgeSVertexIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgeSVertexIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getExactTypeName(*args): return _Freestyle.FEdgeSVertexIterator_getExactTypeName(*args)
    def getObject(*args): return _Freestyle.FEdgeSVertexIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.FEdgeSVertexIterator___deref__(*args)
    def increment(*args): return _Freestyle.FEdgeSVertexIterator_increment(*args)
    def decrement(*args): return _Freestyle.FEdgeSVertexIterator_decrement(*args)
    def isBegin(*args): return _Freestyle.FEdgeSVertexIterator_isBegin(*args)
    def isEnd(*args): return _Freestyle.FEdgeSVertexIterator_isEnd(*args)
    def __eq__(*args): return _Freestyle.FEdgeSVertexIterator___eq__(*args)
    def t(*args): return _Freestyle.FEdgeSVertexIterator_t(*args)
    def u(*args): return _Freestyle.FEdgeSVertexIterator_u(*args)
    def copy(*args): return _Freestyle.FEdgeSVertexIterator_copy(*args)
    __swig_destroy__ = _Freestyle.delete_FEdgeSVertexIterator
    __del__ = lambda self : None;
    def getX(*args): return _Freestyle.FEdgeSVertexIterator_getX(*args)
    def getY(*args): return _Freestyle.FEdgeSVertexIterator_getY(*args)
    def getZ(*args): return _Freestyle.FEdgeSVertexIterator_getZ(*args)
    def getPoint3D(*args): return _Freestyle.FEdgeSVertexIterator_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.FEdgeSVertexIterator_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.FEdgeSVertexIterator_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.FEdgeSVertexIterator_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.FEdgeSVertexIterator_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.FEdgeSVertexIterator_getFEdge(*args)
    def getId(*args): return _Freestyle.FEdgeSVertexIterator_getId(*args)
    def getNature(*args): return _Freestyle.FEdgeSVertexIterator_getNature(*args)
    def castToSVertex(*args): return _Freestyle.FEdgeSVertexIterator_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.FEdgeSVertexIterator_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.FEdgeSVertexIterator_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.FEdgeSVertexIterator_castToTVertex(*args)
    __swig_setmethods__["userdata"] = _Freestyle.FEdgeSVertexIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.FEdgeSVertexIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.FEdgeSVertexIterator_userdata_get, _Freestyle.FEdgeSVertexIterator_userdata_set)
    def dupplicate(*args): return _Freestyle.FEdgeSVertexIterator_dupplicate(*args)
    def point3D(*args): return _Freestyle.FEdgeSVertexIterator_point3D(*args)
    def point2D(*args): return _Freestyle.FEdgeSVertexIterator_point2D(*args)
    def normals(*args): return _Freestyle.FEdgeSVertexIterator_normals(*args)
    def normalsSize(*args): return _Freestyle.FEdgeSVertexIterator_normalsSize(*args)
    def fedges(*args): return _Freestyle.FEdgeSVertexIterator_fedges(*args)
    def fedges_begin(*args): return _Freestyle.FEdgeSVertexIterator_fedges_begin(*args)
    def fedges_end(*args): return _Freestyle.FEdgeSVertexIterator_fedges_end(*args)
    def shape(*args): return _Freestyle.FEdgeSVertexIterator_shape(*args)
    def z(*args): return _Freestyle.FEdgeSVertexIterator_z(*args)
    def viewvertex(*args): return _Freestyle.FEdgeSVertexIterator_viewvertex(*args)
    def SetPoint3D(*args): return _Freestyle.FEdgeSVertexIterator_SetPoint3D(*args)
    def SetPoint2D(*args): return _Freestyle.FEdgeSVertexIterator_SetPoint2D(*args)
    def AddNormal(*args): return _Freestyle.FEdgeSVertexIterator_AddNormal(*args)
    def setCurvatureInfo(*args): return _Freestyle.FEdgeSVertexIterator_setCurvatureInfo(*args)
    def getCurvatureInfo(*args): return _Freestyle.FEdgeSVertexIterator_getCurvatureInfo(*args)
    def setCurvatureFredo(*args): return _Freestyle.FEdgeSVertexIterator_setCurvatureFredo(*args)
    def setDirectionFredo(*args): return _Freestyle.FEdgeSVertexIterator_setDirectionFredo(*args)
    def curvatureFredo(*args): return _Freestyle.FEdgeSVertexIterator_curvatureFredo(*args)
    def directionFredo(*args): return _Freestyle.FEdgeSVertexIterator_directionFredo(*args)
    def SetId(*args): return _Freestyle.FEdgeSVertexIterator_SetId(*args)
    def SetFEdges(*args): return _Freestyle.FEdgeSVertexIterator_SetFEdges(*args)
    def SetShape(*args): return _Freestyle.FEdgeSVertexIterator_SetShape(*args)
    def SetViewVertex(*args): return _Freestyle.FEdgeSVertexIterator_SetViewVertex(*args)
    def AddFEdge(*args): return _Freestyle.FEdgeSVertexIterator_AddFEdge(*args)
    def Replace(*args): return _Freestyle.FEdgeSVertexIterator_Replace(*args)
    def fedge(*args): return _Freestyle.FEdgeSVertexIterator_fedge(*args)
    def point2d(*args): return _Freestyle.FEdgeSVertexIterator_point2d(*args)
    def point3d(*args): return _Freestyle.FEdgeSVertexIterator_point3d(*args)
    def normal(*args): return _Freestyle.FEdgeSVertexIterator_normal(*args)
    def shape_id(*args): return _Freestyle.FEdgeSVertexIterator_shape_id(*args)
    def shape_importance(*args): return _Freestyle.FEdgeSVertexIterator_shape_importance(*args)
    def qi(*args): return _Freestyle.FEdgeSVertexIterator_qi(*args)
    def occluders_begin(*args): return _Freestyle.FEdgeSVertexIterator_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.FEdgeSVertexIterator_occluders_end(*args)
    def occluders_empty(*args): return _Freestyle.FEdgeSVertexIterator_occluders_empty(*args)
    def occluders_size(*args): return _Freestyle.FEdgeSVertexIterator_occluders_size(*args)
    def occludee(*args): return _Freestyle.FEdgeSVertexIterator_occludee(*args)
    def occluded_shape(*args): return _Freestyle.FEdgeSVertexIterator_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.FEdgeSVertexIterator_occludee_empty(*args)
    def z_discontinuity(*args): return _Freestyle.FEdgeSVertexIterator_z_discontinuity(*args)
FEdgeSVertexIterator_swigregister = _Freestyle.FEdgeSVertexIterator_swigregister
FEdgeSVertexIterator_swigregister(FEdgeSVertexIterator)

class FEdgeSharp(FEdge):
    __swig_setmethods__ = {}
    for _s in [FEdge]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgeSharp, name, value)
    __swig_getmethods__ = {}
    for _s in [FEdge]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgeSharp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgeSharp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FEdgeSharp
    __del__ = lambda self : None;
    def dupplicate(*args): return _Freestyle.FEdgeSharp_dupplicate(*args)
    def normalA(*args): return _Freestyle.FEdgeSharp_normalA(*args)
    def normalB(*args): return _Freestyle.FEdgeSharp_normalB(*args)
    def aMaterialIndex(*args): return _Freestyle.FEdgeSharp_aMaterialIndex(*args)
    def aMaterial(*args): return _Freestyle.FEdgeSharp_aMaterial(*args)
    def bMaterialIndex(*args): return _Freestyle.FEdgeSharp_bMaterialIndex(*args)
    def bMaterial(*args): return _Freestyle.FEdgeSharp_bMaterial(*args)
    def SetNormalA(*args): return _Freestyle.FEdgeSharp_SetNormalA(*args)
    def SetNormalB(*args): return _Freestyle.FEdgeSharp_SetNormalB(*args)
    def SetaMaterialIndex(*args): return _Freestyle.FEdgeSharp_SetaMaterialIndex(*args)
    def SetbMaterialIndex(*args): return _Freestyle.FEdgeSharp_SetbMaterialIndex(*args)
FEdgeSharp_swigregister = _Freestyle.FEdgeSharp_swigregister
FEdgeSharp_swigregister(FEdgeSharp)

class FEdgeSmooth(FEdge):
    __swig_setmethods__ = {}
    for _s in [FEdge]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgeSmooth, name, value)
    __swig_getmethods__ = {}
    for _s in [FEdge]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgeSmooth, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgeSmooth(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FEdgeSmooth
    __del__ = lambda self : None;
    def dupplicate(*args): return _Freestyle.FEdgeSmooth_dupplicate(*args)
    def face(*args): return _Freestyle.FEdgeSmooth_face(*args)
    def normal(*args): return _Freestyle.FEdgeSmooth_normal(*args)
    def materialIndex(*args): return _Freestyle.FEdgeSmooth_materialIndex(*args)
    def material(*args): return _Freestyle.FEdgeSmooth_material(*args)
    def SetFace(*args): return _Freestyle.FEdgeSmooth_SetFace(*args)
    def SetNormal(*args): return _Freestyle.FEdgeSmooth_SetNormal(*args)
    def SetMaterialIndex(*args): return _Freestyle.FEdgeSmooth_SetMaterialIndex(*args)
FEdgeSmooth_swigregister = _Freestyle.FEdgeSmooth_swigregister
FEdgeSmooth_swigregister(FEdgeSmooth)

class SShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userdata"] = _Freestyle.SShape_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.SShape_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.SShape_userdata_get, _Freestyle.SShape_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_SShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def dupplicate(*args): return _Freestyle.SShape_dupplicate(*args)
    __swig_destroy__ = _Freestyle.delete_SShape
    __del__ = lambda self : None;
    def AddEdge(*args): return _Freestyle.SShape_AddEdge(*args)
    def AddNewVertex(*args): return _Freestyle.SShape_AddNewVertex(*args)
    def AddChain(*args): return _Freestyle.SShape_AddChain(*args)
    def CreateSVertex(*args): return _Freestyle.SShape_CreateSVertex(*args)
    def SplitEdge(*args): return _Freestyle.SShape_SplitEdge(*args)
    def SplitEdgeIn2(*args): return _Freestyle.SShape_SplitEdgeIn2(*args)
    def SetBBox(*args): return _Freestyle.SShape_SetBBox(*args)
    def ComputeBBox(*args): return _Freestyle.SShape_ComputeBBox(*args)
    def RemoveEdgeFromChain(*args): return _Freestyle.SShape_RemoveEdgeFromChain(*args)
    def RemoveEdge(*args): return _Freestyle.SShape_RemoveEdge(*args)
    def GetVertexList(*args): return _Freestyle.SShape_GetVertexList(*args)
    def GetEdgeList(*args): return _Freestyle.SShape_GetEdgeList(*args)
    def GetChains(*args): return _Freestyle.SShape_GetChains(*args)
    def bbox(*args): return _Freestyle.SShape_bbox(*args)
    def material(*args): return _Freestyle.SShape_material(*args)
    def materials(*args): return _Freestyle.SShape_materials(*args)
    def viewShape(*args): return _Freestyle.SShape_viewShape(*args)
    def importance(*args): return _Freestyle.SShape_importance(*args)
    def getId(*args): return _Freestyle.SShape_getId(*args)
    def SetId(*args): return _Freestyle.SShape_SetId(*args)
    def SetMaterials(*args): return _Freestyle.SShape_SetMaterials(*args)
    def SetViewShape(*args): return _Freestyle.SShape_SetViewShape(*args)
    def SetImportance(*args): return _Freestyle.SShape_SetImportance(*args)
SShape_swigregister = _Freestyle.SShape_swigregister
SShape_swigregister(SShape)

class ViewShapesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewShapesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewShapesContainer, name)
    __repr__ = _swig_repr
    def iterator(*args): return _Freestyle.ViewShapesContainer_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Freestyle.ViewShapesContainer___nonzero__(*args)
    def __len__(*args): return _Freestyle.ViewShapesContainer___len__(*args)
    def pop(*args): return _Freestyle.ViewShapesContainer_pop(*args)
    def __getslice__(*args): return _Freestyle.ViewShapesContainer___getslice__(*args)
    def __setslice__(*args): return _Freestyle.ViewShapesContainer___setslice__(*args)
    def __delslice__(*args): return _Freestyle.ViewShapesContainer___delslice__(*args)
    def __delitem__(*args): return _Freestyle.ViewShapesContainer___delitem__(*args)
    def __getitem__(*args): return _Freestyle.ViewShapesContainer___getitem__(*args)
    def __setitem__(*args): return _Freestyle.ViewShapesContainer___setitem__(*args)
    def append(*args): return _Freestyle.ViewShapesContainer_append(*args)
    def empty(*args): return _Freestyle.ViewShapesContainer_empty(*args)
    def size(*args): return _Freestyle.ViewShapesContainer_size(*args)
    def clear(*args): return _Freestyle.ViewShapesContainer_clear(*args)
    def swap(*args): return _Freestyle.ViewShapesContainer_swap(*args)
    def get_allocator(*args): return _Freestyle.ViewShapesContainer_get_allocator(*args)
    def begin(*args): return _Freestyle.ViewShapesContainer_begin(*args)
    def end(*args): return _Freestyle.ViewShapesContainer_end(*args)
    def rbegin(*args): return _Freestyle.ViewShapesContainer_rbegin(*args)
    def rend(*args): return _Freestyle.ViewShapesContainer_rend(*args)
    def pop_back(*args): return _Freestyle.ViewShapesContainer_pop_back(*args)
    def erase(*args): return _Freestyle.ViewShapesContainer_erase(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewShapesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Freestyle.ViewShapesContainer_push_back(*args)
    def front(*args): return _Freestyle.ViewShapesContainer_front(*args)
    def back(*args): return _Freestyle.ViewShapesContainer_back(*args)
    def assign(*args): return _Freestyle.ViewShapesContainer_assign(*args)
    def resize(*args): return _Freestyle.ViewShapesContainer_resize(*args)
    def insert(*args): return _Freestyle.ViewShapesContainer_insert(*args)
    def reserve(*args): return _Freestyle.ViewShapesContainer_reserve(*args)
    def capacity(*args): return _Freestyle.ViewShapesContainer_capacity(*args)
    __swig_destroy__ = _Freestyle.delete_ViewShapesContainer
    __del__ = lambda self : None;
ViewShapesContainer_swigregister = _Freestyle.ViewShapesContainer_swigregister
ViewShapesContainer_swigregister(ViewShapesContainer)

class ViewEdgesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdgesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdgesContainer, name)
    __repr__ = _swig_repr
    def iterator(*args): return _Freestyle.ViewEdgesContainer_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Freestyle.ViewEdgesContainer___nonzero__(*args)
    def __len__(*args): return _Freestyle.ViewEdgesContainer___len__(*args)
    def pop(*args): return _Freestyle.ViewEdgesContainer_pop(*args)
    def __getslice__(*args): return _Freestyle.ViewEdgesContainer___getslice__(*args)
    def __setslice__(*args): return _Freestyle.ViewEdgesContainer___setslice__(*args)
    def __delslice__(*args): return _Freestyle.ViewEdgesContainer___delslice__(*args)
    def __delitem__(*args): return _Freestyle.ViewEdgesContainer___delitem__(*args)
    def __getitem__(*args): return _Freestyle.ViewEdgesContainer___getitem__(*args)
    def __setitem__(*args): return _Freestyle.ViewEdgesContainer___setitem__(*args)
    def append(*args): return _Freestyle.ViewEdgesContainer_append(*args)
    def empty(*args): return _Freestyle.ViewEdgesContainer_empty(*args)
    def size(*args): return _Freestyle.ViewEdgesContainer_size(*args)
    def clear(*args): return _Freestyle.ViewEdgesContainer_clear(*args)
    def swap(*args): return _Freestyle.ViewEdgesContainer_swap(*args)
    def get_allocator(*args): return _Freestyle.ViewEdgesContainer_get_allocator(*args)
    def begin(*args): return _Freestyle.ViewEdgesContainer_begin(*args)
    def end(*args): return _Freestyle.ViewEdgesContainer_end(*args)
    def rbegin(*args): return _Freestyle.ViewEdgesContainer_rbegin(*args)
    def rend(*args): return _Freestyle.ViewEdgesContainer_rend(*args)
    def pop_back(*args): return _Freestyle.ViewEdgesContainer_pop_back(*args)
    def erase(*args): return _Freestyle.ViewEdgesContainer_erase(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewEdgesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Freestyle.ViewEdgesContainer_push_back(*args)
    def front(*args): return _Freestyle.ViewEdgesContainer_front(*args)
    def back(*args): return _Freestyle.ViewEdgesContainer_back(*args)
    def assign(*args): return _Freestyle.ViewEdgesContainer_assign(*args)
    def resize(*args): return _Freestyle.ViewEdgesContainer_resize(*args)
    def insert(*args): return _Freestyle.ViewEdgesContainer_insert(*args)
    def reserve(*args): return _Freestyle.ViewEdgesContainer_reserve(*args)
    def capacity(*args): return _Freestyle.ViewEdgesContainer_capacity(*args)
    __swig_destroy__ = _Freestyle.delete_ViewEdgesContainer
    __del__ = lambda self : None;
ViewEdgesContainer_swigregister = _Freestyle.ViewEdgesContainer_swigregister
ViewEdgesContainer_swigregister(ViewEdgesContainer)

class FEdgesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgesContainer, name)
    __repr__ = _swig_repr
    def iterator(*args): return _Freestyle.FEdgesContainer_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Freestyle.FEdgesContainer___nonzero__(*args)
    def __len__(*args): return _Freestyle.FEdgesContainer___len__(*args)
    def pop(*args): return _Freestyle.FEdgesContainer_pop(*args)
    def __getslice__(*args): return _Freestyle.FEdgesContainer___getslice__(*args)
    def __setslice__(*args): return _Freestyle.FEdgesContainer___setslice__(*args)
    def __delslice__(*args): return _Freestyle.FEdgesContainer___delslice__(*args)
    def __delitem__(*args): return _Freestyle.FEdgesContainer___delitem__(*args)
    def __getitem__(*args): return _Freestyle.FEdgesContainer___getitem__(*args)
    def __setitem__(*args): return _Freestyle.FEdgesContainer___setitem__(*args)
    def append(*args): return _Freestyle.FEdgesContainer_append(*args)
    def empty(*args): return _Freestyle.FEdgesContainer_empty(*args)
    def size(*args): return _Freestyle.FEdgesContainer_size(*args)
    def clear(*args): return _Freestyle.FEdgesContainer_clear(*args)
    def swap(*args): return _Freestyle.FEdgesContainer_swap(*args)
    def get_allocator(*args): return _Freestyle.FEdgesContainer_get_allocator(*args)
    def begin(*args): return _Freestyle.FEdgesContainer_begin(*args)
    def end(*args): return _Freestyle.FEdgesContainer_end(*args)
    def rbegin(*args): return _Freestyle.FEdgesContainer_rbegin(*args)
    def rend(*args): return _Freestyle.FEdgesContainer_rend(*args)
    def pop_back(*args): return _Freestyle.FEdgesContainer_pop_back(*args)
    def erase(*args): return _Freestyle.FEdgesContainer_erase(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Freestyle.FEdgesContainer_push_back(*args)
    def front(*args): return _Freestyle.FEdgesContainer_front(*args)
    def back(*args): return _Freestyle.FEdgesContainer_back(*args)
    def assign(*args): return _Freestyle.FEdgesContainer_assign(*args)
    def resize(*args): return _Freestyle.FEdgesContainer_resize(*args)
    def insert(*args): return _Freestyle.FEdgesContainer_insert(*args)
    def reserve(*args): return _Freestyle.FEdgesContainer_reserve(*args)
    def capacity(*args): return _Freestyle.FEdgesContainer_capacity(*args)
    __swig_destroy__ = _Freestyle.delete_FEdgesContainer
    __del__ = lambda self : None;
FEdgesContainer_swigregister = _Freestyle.FEdgesContainer_swigregister
FEdgesContainer_swigregister(FEdgesContainer)

class ViewVerticesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewVerticesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewVerticesContainer, name)
    __repr__ = _swig_repr
    def iterator(*args): return _Freestyle.ViewVerticesContainer_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Freestyle.ViewVerticesContainer___nonzero__(*args)
    def __len__(*args): return _Freestyle.ViewVerticesContainer___len__(*args)
    def pop(*args): return _Freestyle.ViewVerticesContainer_pop(*args)
    def __getslice__(*args): return _Freestyle.ViewVerticesContainer___getslice__(*args)
    def __setslice__(*args): return _Freestyle.ViewVerticesContainer___setslice__(*args)
    def __delslice__(*args): return _Freestyle.ViewVerticesContainer___delslice__(*args)
    def __delitem__(*args): return _Freestyle.ViewVerticesContainer___delitem__(*args)
    def __getitem__(*args): return _Freestyle.ViewVerticesContainer___getitem__(*args)
    def __setitem__(*args): return _Freestyle.ViewVerticesContainer___setitem__(*args)
    def append(*args): return _Freestyle.ViewVerticesContainer_append(*args)
    def empty(*args): return _Freestyle.ViewVerticesContainer_empty(*args)
    def size(*args): return _Freestyle.ViewVerticesContainer_size(*args)
    def clear(*args): return _Freestyle.ViewVerticesContainer_clear(*args)
    def swap(*args): return _Freestyle.ViewVerticesContainer_swap(*args)
    def get_allocator(*args): return _Freestyle.ViewVerticesContainer_get_allocator(*args)
    def begin(*args): return _Freestyle.ViewVerticesContainer_begin(*args)
    def end(*args): return _Freestyle.ViewVerticesContainer_end(*args)
    def rbegin(*args): return _Freestyle.ViewVerticesContainer_rbegin(*args)
    def rend(*args): return _Freestyle.ViewVerticesContainer_rend(*args)
    def pop_back(*args): return _Freestyle.ViewVerticesContainer_pop_back(*args)
    def erase(*args): return _Freestyle.ViewVerticesContainer_erase(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewVerticesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Freestyle.ViewVerticesContainer_push_back(*args)
    def front(*args): return _Freestyle.ViewVerticesContainer_front(*args)
    def back(*args): return _Freestyle.ViewVerticesContainer_back(*args)
    def assign(*args): return _Freestyle.ViewVerticesContainer_assign(*args)
    def resize(*args): return _Freestyle.ViewVerticesContainer_resize(*args)
    def insert(*args): return _Freestyle.ViewVerticesContainer_insert(*args)
    def reserve(*args): return _Freestyle.ViewVerticesContainer_reserve(*args)
    def capacity(*args): return _Freestyle.ViewVerticesContainer_capacity(*args)
    __swig_destroy__ = _Freestyle.delete_ViewVerticesContainer
    __del__ = lambda self : None;
ViewVerticesContainer_swigregister = _Freestyle.ViewVerticesContainer_swigregister
ViewVerticesContainer_swigregister(ViewVerticesContainer)

class SVerticesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVerticesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVerticesContainer, name)
    __repr__ = _swig_repr
    def iterator(*args): return _Freestyle.SVerticesContainer_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Freestyle.SVerticesContainer___nonzero__(*args)
    def __len__(*args): return _Freestyle.SVerticesContainer___len__(*args)
    def pop(*args): return _Freestyle.SVerticesContainer_pop(*args)
    def __getslice__(*args): return _Freestyle.SVerticesContainer___getslice__(*args)
    def __setslice__(*args): return _Freestyle.SVerticesContainer___setslice__(*args)
    def __delslice__(*args): return _Freestyle.SVerticesContainer___delslice__(*args)
    def __delitem__(*args): return _Freestyle.SVerticesContainer___delitem__(*args)
    def __getitem__(*args): return _Freestyle.SVerticesContainer___getitem__(*args)
    def __setitem__(*args): return _Freestyle.SVerticesContainer___setitem__(*args)
    def append(*args): return _Freestyle.SVerticesContainer_append(*args)
    def empty(*args): return _Freestyle.SVerticesContainer_empty(*args)
    def size(*args): return _Freestyle.SVerticesContainer_size(*args)
    def clear(*args): return _Freestyle.SVerticesContainer_clear(*args)
    def swap(*args): return _Freestyle.SVerticesContainer_swap(*args)
    def get_allocator(*args): return _Freestyle.SVerticesContainer_get_allocator(*args)
    def begin(*args): return _Freestyle.SVerticesContainer_begin(*args)
    def end(*args): return _Freestyle.SVerticesContainer_end(*args)
    def rbegin(*args): return _Freestyle.SVerticesContainer_rbegin(*args)
    def rend(*args): return _Freestyle.SVerticesContainer_rend(*args)
    def pop_back(*args): return _Freestyle.SVerticesContainer_pop_back(*args)
    def erase(*args): return _Freestyle.SVerticesContainer_erase(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_SVerticesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Freestyle.SVerticesContainer_push_back(*args)
    def front(*args): return _Freestyle.SVerticesContainer_front(*args)
    def back(*args): return _Freestyle.SVerticesContainer_back(*args)
    def assign(*args): return _Freestyle.SVerticesContainer_assign(*args)
    def resize(*args): return _Freestyle.SVerticesContainer_resize(*args)
    def insert(*args): return _Freestyle.SVerticesContainer_insert(*args)
    def reserve(*args): return _Freestyle.SVerticesContainer_reserve(*args)
    def capacity(*args): return _Freestyle.SVerticesContainer_capacity(*args)
    __swig_destroy__ = _Freestyle.delete_SVerticesContainer
    __del__ = lambda self : None;
SVerticesContainer_swigregister = _Freestyle.SVerticesContainer_swigregister
SVerticesContainer_swigregister(SVerticesContainer)

class ViewMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userdata"] = _Freestyle.ViewMap_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewMap_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewMap_userdata_get, _Freestyle.ViewMap_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewMap
    __del__ = lambda self : None;
    def GetClosestViewEdge(*args): return _Freestyle.ViewMap_GetClosestViewEdge(*args)
    def GetClosestFEdge(*args): return _Freestyle.ViewMap_GetClosestFEdge(*args)
    __swig_getmethods__["getInstance"] = lambda x: _Freestyle.ViewMap_getInstance
    if _newclass:getInstance = staticmethod(_Freestyle.ViewMap_getInstance)
    def ViewShapes(*args): return _Freestyle.ViewMap_ViewShapes(*args)
    def ViewEdges(*args): return _Freestyle.ViewMap_ViewEdges(*args)
    def ViewVertices(*args): return _Freestyle.ViewMap_ViewVertices(*args)
    def FEdges(*args): return _Freestyle.ViewMap_FEdges(*args)
    def SVertices(*args): return _Freestyle.ViewMap_SVertices(*args)
    def viewedges_begin(*args): return _Freestyle.ViewMap_viewedges_begin(*args)
    def viewedges_end(*args): return _Freestyle.ViewMap_viewedges_end(*args)
    def viewedges_size(*args): return _Freestyle.ViewMap_viewedges_size(*args)
    def viewShape(*args): return _Freestyle.ViewMap_viewShape(*args)
    def shapeIdToIndexMap(*args): return _Freestyle.ViewMap_shapeIdToIndexMap(*args)
    def getScene3dBBox(*args): return _Freestyle.ViewMap_getScene3dBBox(*args)
    def AddViewShape(*args): return _Freestyle.ViewMap_AddViewShape(*args)
    def AddViewEdge(*args): return _Freestyle.ViewMap_AddViewEdge(*args)
    def AddViewVertex(*args): return _Freestyle.ViewMap_AddViewVertex(*args)
    def AddFEdge(*args): return _Freestyle.ViewMap_AddFEdge(*args)
    def AddSVertex(*args): return _Freestyle.ViewMap_AddSVertex(*args)
    def setScene3dBBox(*args): return _Freestyle.ViewMap_setScene3dBBox(*args)
    def CreateTVertex(*args): return _Freestyle.ViewMap_CreateTVertex(*args)
    def InsertViewVertex(*args): return _Freestyle.ViewMap_InsertViewVertex(*args)
ViewMap_swigregister = _Freestyle.ViewMap_swigregister
ViewMap_swigregister(ViewMap)
ViewMap_getInstance = _Freestyle.ViewMap_getInstance

class ViewVertex(Interface0D):
    __swig_setmethods__ = {}
    for _s in [Interface0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewVertex, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.ViewVertex_getExactTypeName(*args)
    __swig_setmethods__["userdata"] = _Freestyle.ViewVertex_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewVertex_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewVertex_userdata_get, _Freestyle.ViewVertex_userdata_set)
    __swig_destroy__ = _Freestyle.delete_ViewVertex
    __del__ = lambda self : None;
    def getNature(*args): return _Freestyle.ViewVertex_getNature(*args)
    def setNature(*args): return _Freestyle.ViewVertex_setNature(*args)
    def Replace(*args): return _Freestyle.ViewVertex_Replace(*args)
    def edges_begin(*args): return _Freestyle.ViewVertex_edges_begin(*args)
    def edges_end(*args): return _Freestyle.ViewVertex_edges_end(*args)
    def edges_iterator(*args): return _Freestyle.ViewVertex_edges_iterator(*args)
    def edgesBegin(*args): return _Freestyle.ViewVertex_edgesBegin(*args)
    def edgesEnd(*args): return _Freestyle.ViewVertex_edgesEnd(*args)
    def edgesIterator(*args): return _Freestyle.ViewVertex_edgesIterator(*args)
ViewVertex_swigregister = _Freestyle.ViewVertex_swigregister
ViewVertex_swigregister(ViewVertex)

class TVertex(ViewVertex):
    __swig_setmethods__ = {}
    for _s in [ViewVertex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewVertex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.TVertex_getExactTypeName(*args)
    def getX(*args): return _Freestyle.TVertex_getX(*args)
    def getY(*args): return _Freestyle.TVertex_getY(*args)
    def getZ(*args): return _Freestyle.TVertex_getZ(*args)
    def getPoint3D(*args): return _Freestyle.TVertex_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.TVertex_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.TVertex_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.TVertex_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.TVertex_getPoint2D(*args)
    def getId(*args): return _Freestyle.TVertex_getId(*args)
    def castToViewVertex(*args): return _Freestyle.TVertex_castToViewVertex(*args)
    def castToTVertex(*args): return _Freestyle.TVertex_castToTVertex(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_TVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    def frontSVertex(*args): return _Freestyle.TVertex_frontSVertex(*args)
    def backSVertex(*args): return _Freestyle.TVertex_backSVertex(*args)
    def frontEdgeA(*args): return _Freestyle.TVertex_frontEdgeA(*args)
    def frontEdgeB(*args): return _Freestyle.TVertex_frontEdgeB(*args)
    def backEdgeA(*args): return _Freestyle.TVertex_backEdgeA(*args)
    def backEdgeB(*args): return _Freestyle.TVertex_backEdgeB(*args)
    def SetFrontVertex(*args): return _Freestyle.TVertex_SetFrontVertex(*args)
    def SetBackSVertex(*args): return _Freestyle.TVertex_SetBackSVertex(*args)
    def SetFrontEdgeA(*args): return _Freestyle.TVertex_SetFrontEdgeA(*args)
    def SetFrontEdgeB(*args): return _Freestyle.TVertex_SetFrontEdgeB(*args)
    def SetBackEdgeA(*args): return _Freestyle.TVertex_SetBackEdgeA(*args)
    def SetBackEdgeB(*args): return _Freestyle.TVertex_SetBackEdgeB(*args)
    def SetId(*args): return _Freestyle.TVertex_SetId(*args)
    def GetSVertex(*args): return _Freestyle.TVertex_GetSVertex(*args)
    def Replace(*args): return _Freestyle.TVertex_Replace(*args)
    def mate(*args): return _Freestyle.TVertex_mate(*args)
    def edges_end(*args): return _Freestyle.TVertex_edges_end(*args)
    def edgesBegin(*args): return _Freestyle.TVertex_edgesBegin(*args)
    def edgesEnd(*args): return _Freestyle.TVertex_edgesEnd(*args)
    def edgesIterator(*args): return _Freestyle.TVertex_edgesIterator(*args)
    __swig_destroy__ = _Freestyle.delete_TVertex
    __del__ = lambda self : None;
TVertex_swigregister = _Freestyle.TVertex_swigregister
TVertex_swigregister(TVertex)

class NonTVertex(ViewVertex):
    __swig_setmethods__ = {}
    for _s in [ViewVertex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonTVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewVertex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonTVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.NonTVertex_getExactTypeName(*args)
    def getX(*args): return _Freestyle.NonTVertex_getX(*args)
    def getY(*args): return _Freestyle.NonTVertex_getY(*args)
    def getZ(*args): return _Freestyle.NonTVertex_getZ(*args)
    def getPoint3D(*args): return _Freestyle.NonTVertex_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.NonTVertex_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.NonTVertex_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.NonTVertex_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.NonTVertex_getPoint2D(*args)
    def getId(*args): return _Freestyle.NonTVertex_getId(*args)
    def castToSVertex(*args): return _Freestyle.NonTVertex_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.NonTVertex_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.NonTVertex_castToNonTVertex(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_NonTVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_NonTVertex
    __del__ = lambda self : None;
    def svertex(*args): return _Freestyle.NonTVertex_svertex(*args)
    def viewedges(*args): return _Freestyle.NonTVertex_viewedges(*args)
    def SetSVertex(*args): return _Freestyle.NonTVertex_SetSVertex(*args)
    def SetViewEdges(*args): return _Freestyle.NonTVertex_SetViewEdges(*args)
    def AddIncomingViewEdge(*args): return _Freestyle.NonTVertex_AddIncomingViewEdge(*args)
    def AddOutgoingViewEdge(*args): return _Freestyle.NonTVertex_AddOutgoingViewEdge(*args)
    def AddViewEdge(*args): return _Freestyle.NonTVertex_AddViewEdge(*args)
    def Replace(*args): return _Freestyle.NonTVertex_Replace(*args)
    def edges_end(*args): return _Freestyle.NonTVertex_edges_end(*args)
    def edgesBegin(*args): return _Freestyle.NonTVertex_edgesBegin(*args)
    def edgesEnd(*args): return _Freestyle.NonTVertex_edgesEnd(*args)
    def edgesIterator(*args): return _Freestyle.NonTVertex_edgesIterator(*args)
NonTVertex_swigregister = _Freestyle.NonTVertex_swigregister
NonTVertex_swigregister(NonTVertex)

class ViewEdge(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdge, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.ViewEdge_getExactTypeName(*args)
    def getId(*args): return _Freestyle.ViewEdge_getId(*args)
    def getNature(*args): return _Freestyle.ViewEdge_getNature(*args)
    __swig_setmethods__["userdata"] = _Freestyle.ViewEdge_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewEdge_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewEdge_userdata_get, _Freestyle.ViewEdge_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewEdge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewEdge
    __del__ = lambda self : None;
    def A(*args): return _Freestyle.ViewEdge_A(*args)
    def B(*args): return _Freestyle.ViewEdge_B(*args)
    def fedgeA(*args): return _Freestyle.ViewEdge_fedgeA(*args)
    def fedgeB(*args): return _Freestyle.ViewEdge_fedgeB(*args)
    def viewShape(*args): return _Freestyle.ViewEdge_viewShape(*args)
    def isClosed(*args): return _Freestyle.ViewEdge_isClosed(*args)
    def getChainingTimeStamp(*args): return _Freestyle.ViewEdge_getChainingTimeStamp(*args)
    def aShape(*args): return _Freestyle.ViewEdge_aShape(*args)
    def bShape(*args): return _Freestyle.ViewEdge_bShape(*args)
    def occluders(*args): return _Freestyle.ViewEdge_occluders(*args)
    def splittingId(*args): return _Freestyle.ViewEdge_splittingId(*args)
    def SetA(*args): return _Freestyle.ViewEdge_SetA(*args)
    def SetB(*args): return _Freestyle.ViewEdge_SetB(*args)
    def SetNature(*args): return _Freestyle.ViewEdge_SetNature(*args)
    def SetFEdgeA(*args): return _Freestyle.ViewEdge_SetFEdgeA(*args)
    def SetFEdgeB(*args): return _Freestyle.ViewEdge_SetFEdgeB(*args)
    def SetShape(*args): return _Freestyle.ViewEdge_SetShape(*args)
    def SetId(*args): return _Freestyle.ViewEdge_SetId(*args)
    def UpdateFEdges(*args): return _Freestyle.ViewEdge_UpdateFEdges(*args)
    def SetaShape(*args): return _Freestyle.ViewEdge_SetaShape(*args)
    def SetQI(*args): return _Freestyle.ViewEdge_SetQI(*args)
    def setChainingTimeStamp(*args): return _Freestyle.ViewEdge_setChainingTimeStamp(*args)
    def AddOccluder(*args): return _Freestyle.ViewEdge_AddOccluder(*args)
    def setSplittingId(*args): return _Freestyle.ViewEdge_setSplittingId(*args)
    def intersect_2d_area(*args): return _Freestyle.ViewEdge_intersect_2d_area(*args)
    def include_in_2d_area(*args): return _Freestyle.ViewEdge_include_in_2d_area(*args)
    def getLength2D(*args): return _Freestyle.ViewEdge_getLength2D(*args)
    def qi(*args): return _Freestyle.ViewEdge_qi(*args)
    def occluders_begin(*args): return _Freestyle.ViewEdge_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.ViewEdge_occluders_end(*args)
    def occluders_size(*args): return _Freestyle.ViewEdge_occluders_size(*args)
    def occluders_empty(*args): return _Freestyle.ViewEdge_occluders_empty(*args)
    def occludee(*args): return _Freestyle.ViewEdge_occludee(*args)
    def occluded_shape(*args): return _Freestyle.ViewEdge_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.ViewEdge_occludee_empty(*args)
    def shape_id(*args): return _Freestyle.ViewEdge_shape_id(*args)
    def shape(*args): return _Freestyle.ViewEdge_shape(*args)
    def shape_importance(*args): return _Freestyle.ViewEdge_shape_importance(*args)
    def verticesBegin(*args): return _Freestyle.ViewEdge_verticesBegin(*args)
    def verticesEnd(*args): return _Freestyle.ViewEdge_verticesEnd(*args)
    def pointsBegin(*args): return _Freestyle.ViewEdge_pointsBegin(*args)
    def pointsEnd(*args): return _Freestyle.ViewEdge_pointsEnd(*args)
ViewEdge_swigregister = _Freestyle.ViewEdge_swigregister
ViewEdge_swigregister(ViewEdge)

class ViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userdata"] = _Freestyle.ViewShape_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewShape_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewShape_userdata_get, _Freestyle.ViewShape_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def dupplicate(*args): return _Freestyle.ViewShape_dupplicate(*args)
    __swig_destroy__ = _Freestyle.delete_ViewShape
    __del__ = lambda self : None;
    def SplitEdge(*args): return _Freestyle.ViewShape_SplitEdge(*args)
    def sshape(*args): return _Freestyle.ViewShape_sshape(*args)
    def vertices(*args): return _Freestyle.ViewShape_vertices(*args)
    def edges(*args): return _Freestyle.ViewShape_edges(*args)
    def getId(*args): return _Freestyle.ViewShape_getId(*args)
    def SetSShape(*args): return _Freestyle.ViewShape_SetSShape(*args)
    def SetVertices(*args): return _Freestyle.ViewShape_SetVertices(*args)
    def SetEdges(*args): return _Freestyle.ViewShape_SetEdges(*args)
    def AddVertex(*args): return _Freestyle.ViewShape_AddVertex(*args)
    def AddEdge(*args): return _Freestyle.ViewShape_AddEdge(*args)
    def RemoveEdge(*args): return _Freestyle.ViewShape_RemoveEdge(*args)
    def RemoveVertex(*args): return _Freestyle.ViewShape_RemoveVertex(*args)
ViewShape_swigregister = _Freestyle.ViewShape_swigregister
ViewShape_swigregister(ViewShape)

class ViewVertexOrientedViewEdgeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewVertexOrientedViewEdgeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewVertexOrientedViewEdgeIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_ViewVertexOrientedViewEdgeIterator
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _Freestyle.new_ViewVertexOrientedViewEdgeIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def isBegin(*args): return _Freestyle.ViewVertexOrientedViewEdgeIterator_isBegin(*args)
    def isEnd(*args): return _Freestyle.ViewVertexOrientedViewEdgeIterator_isEnd(*args)
    def __ne__(*args): return _Freestyle.ViewVertexOrientedViewEdgeIterator___ne__(*args)
    def __eq__(*args): return _Freestyle.ViewVertexOrientedViewEdgeIterator___eq__(*args)
    def getObject(*args): return _Freestyle.ViewVertexOrientedViewEdgeIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.ViewVertexOrientedViewEdgeIterator___deref__(*args)
    def increment(*args): return _Freestyle.ViewVertexOrientedViewEdgeIterator_increment(*args)
ViewVertexOrientedViewEdgeIterator_swigregister = _Freestyle.ViewVertexOrientedViewEdgeIterator_swigregister
ViewVertexOrientedViewEdgeIterator_swigregister(ViewVertexOrientedViewEdgeIterator)

class ViewEdgeSVertexIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdgeSVertexIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdgeSVertexIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ViewEdgeSVertexIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewEdgeSVertexIterator
    __del__ = lambda self : None;
    def getExactTypeName(*args): return _Freestyle.ViewEdgeSVertexIterator_getExactTypeName(*args)
    def getObject(*args): return _Freestyle.ViewEdgeSVertexIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.ViewEdgeSVertexIterator___deref__(*args)
    def increment(*args): return _Freestyle.ViewEdgeSVertexIterator_increment(*args)
    def decrement(*args): return _Freestyle.ViewEdgeSVertexIterator_decrement(*args)
    def isBegin(*args): return _Freestyle.ViewEdgeSVertexIterator_isBegin(*args)
    def isEnd(*args): return _Freestyle.ViewEdgeSVertexIterator_isEnd(*args)
    def t(*args): return _Freestyle.ViewEdgeSVertexIterator_t(*args)
    def u(*args): return _Freestyle.ViewEdgeSVertexIterator_u(*args)
    def __eq__(*args): return _Freestyle.ViewEdgeSVertexIterator___eq__(*args)
    def copy(*args): return _Freestyle.ViewEdgeSVertexIterator_copy(*args)
    def getX(*args): return _Freestyle.ViewEdgeSVertexIterator_getX(*args)
    def getY(*args): return _Freestyle.ViewEdgeSVertexIterator_getY(*args)
    def getZ(*args): return _Freestyle.ViewEdgeSVertexIterator_getZ(*args)
    def getPoint3D(*args): return _Freestyle.ViewEdgeSVertexIterator_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.ViewEdgeSVertexIterator_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.ViewEdgeSVertexIterator_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.ViewEdgeSVertexIterator_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.ViewEdgeSVertexIterator_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.ViewEdgeSVertexIterator_getFEdge(*args)
    def getId(*args): return _Freestyle.ViewEdgeSVertexIterator_getId(*args)
    def getNature(*args): return _Freestyle.ViewEdgeSVertexIterator_getNature(*args)
    def castToSVertex(*args): return _Freestyle.ViewEdgeSVertexIterator_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.ViewEdgeSVertexIterator_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.ViewEdgeSVertexIterator_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.ViewEdgeSVertexIterator_castToTVertex(*args)
    __swig_setmethods__["userdata"] = _Freestyle.ViewEdgeSVertexIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewEdgeSVertexIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewEdgeSVertexIterator_userdata_get, _Freestyle.ViewEdgeSVertexIterator_userdata_set)
    def dupplicate(*args): return _Freestyle.ViewEdgeSVertexIterator_dupplicate(*args)
    def point3D(*args): return _Freestyle.ViewEdgeSVertexIterator_point3D(*args)
    def point2D(*args): return _Freestyle.ViewEdgeSVertexIterator_point2D(*args)
    def normals(*args): return _Freestyle.ViewEdgeSVertexIterator_normals(*args)
    def normalsSize(*args): return _Freestyle.ViewEdgeSVertexIterator_normalsSize(*args)
    def fedges(*args): return _Freestyle.ViewEdgeSVertexIterator_fedges(*args)
    def fedges_begin(*args): return _Freestyle.ViewEdgeSVertexIterator_fedges_begin(*args)
    def fedges_end(*args): return _Freestyle.ViewEdgeSVertexIterator_fedges_end(*args)
    def shape(*args): return _Freestyle.ViewEdgeSVertexIterator_shape(*args)
    def z(*args): return _Freestyle.ViewEdgeSVertexIterator_z(*args)
    def viewvertex(*args): return _Freestyle.ViewEdgeSVertexIterator_viewvertex(*args)
    def SetPoint3D(*args): return _Freestyle.ViewEdgeSVertexIterator_SetPoint3D(*args)
    def SetPoint2D(*args): return _Freestyle.ViewEdgeSVertexIterator_SetPoint2D(*args)
    def AddNormal(*args): return _Freestyle.ViewEdgeSVertexIterator_AddNormal(*args)
    def setCurvatureInfo(*args): return _Freestyle.ViewEdgeSVertexIterator_setCurvatureInfo(*args)
    def getCurvatureInfo(*args): return _Freestyle.ViewEdgeSVertexIterator_getCurvatureInfo(*args)
    def setCurvatureFredo(*args): return _Freestyle.ViewEdgeSVertexIterator_setCurvatureFredo(*args)
    def setDirectionFredo(*args): return _Freestyle.ViewEdgeSVertexIterator_setDirectionFredo(*args)
    def curvatureFredo(*args): return _Freestyle.ViewEdgeSVertexIterator_curvatureFredo(*args)
    def directionFredo(*args): return _Freestyle.ViewEdgeSVertexIterator_directionFredo(*args)
    def SetId(*args): return _Freestyle.ViewEdgeSVertexIterator_SetId(*args)
    def SetFEdges(*args): return _Freestyle.ViewEdgeSVertexIterator_SetFEdges(*args)
    def SetShape(*args): return _Freestyle.ViewEdgeSVertexIterator_SetShape(*args)
    def SetViewVertex(*args): return _Freestyle.ViewEdgeSVertexIterator_SetViewVertex(*args)
    def AddFEdge(*args): return _Freestyle.ViewEdgeSVertexIterator_AddFEdge(*args)
    def Replace(*args): return _Freestyle.ViewEdgeSVertexIterator_Replace(*args)
    def fedge(*args): return _Freestyle.ViewEdgeSVertexIterator_fedge(*args)
    def point2d(*args): return _Freestyle.ViewEdgeSVertexIterator_point2d(*args)
    def point3d(*args): return _Freestyle.ViewEdgeSVertexIterator_point3d(*args)
    def normal(*args): return _Freestyle.ViewEdgeSVertexIterator_normal(*args)
    def shape_id(*args): return _Freestyle.ViewEdgeSVertexIterator_shape_id(*args)
    def shape_importance(*args): return _Freestyle.ViewEdgeSVertexIterator_shape_importance(*args)
    def qi(*args): return _Freestyle.ViewEdgeSVertexIterator_qi(*args)
    def occluders_begin(*args): return _Freestyle.ViewEdgeSVertexIterator_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.ViewEdgeSVertexIterator_occluders_end(*args)
    def occluders_empty(*args): return _Freestyle.ViewEdgeSVertexIterator_occluders_empty(*args)
    def occluders_size(*args): return _Freestyle.ViewEdgeSVertexIterator_occluders_size(*args)
    def occludee(*args): return _Freestyle.ViewEdgeSVertexIterator_occludee(*args)
    def occluded_shape(*args): return _Freestyle.ViewEdgeSVertexIterator_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.ViewEdgeSVertexIterator_occludee_empty(*args)
    def z_discontinuity(*args): return _Freestyle.ViewEdgeSVertexIterator_z_discontinuity(*args)
ViewEdgeSVertexIterator_swigregister = _Freestyle.ViewEdgeSVertexIterator_swigregister
ViewEdgeSVertexIterator_swigregister(ViewEdgeSVertexIterator)

class ViewEdgeViewEdgeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdgeViewEdgeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdgeViewEdgeIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ViewEdgeViewEdgeIterator:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_ViewEdgeViewEdgeIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewEdgeViewEdgeIterator
    __del__ = lambda self : None;
    def getExactTypeName(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getExactTypeName(*args)
    def getCurrentEdge(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getCurrentEdge(*args)
    def setCurrentEdge(*args): return _Freestyle.ViewEdgeViewEdgeIterator_setCurrentEdge(*args)
    def getBegin(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getBegin(*args)
    def setBegin(*args): return _Freestyle.ViewEdgeViewEdgeIterator_setBegin(*args)
    def getOrientation(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getOrientation(*args)
    def setOrientation(*args): return _Freestyle.ViewEdgeViewEdgeIterator_setOrientation(*args)
    def changeOrientation(*args): return _Freestyle.ViewEdgeViewEdgeIterator_changeOrientation(*args)
    def getObject(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.ViewEdgeViewEdgeIterator___deref__(*args)
    def increment(*args): return _Freestyle.ViewEdgeViewEdgeIterator_increment(*args)
    def decrement(*args): return _Freestyle.ViewEdgeViewEdgeIterator_decrement(*args)
    def isBegin(*args): return _Freestyle.ViewEdgeViewEdgeIterator_isBegin(*args)
    def isEnd(*args): return _Freestyle.ViewEdgeViewEdgeIterator_isEnd(*args)
    def __eq__(*args): return _Freestyle.ViewEdgeViewEdgeIterator___eq__(*args)
    def __ne__(*args): return _Freestyle.ViewEdgeViewEdgeIterator___ne__(*args)
    def getId(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getId(*args)
    def getNature(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getNature(*args)
    __swig_setmethods__["userdata"] = _Freestyle.ViewEdgeViewEdgeIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewEdgeViewEdgeIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewEdgeViewEdgeIterator_userdata_get, _Freestyle.ViewEdgeViewEdgeIterator_userdata_set)
    def A(*args): return _Freestyle.ViewEdgeViewEdgeIterator_A(*args)
    def B(*args): return _Freestyle.ViewEdgeViewEdgeIterator_B(*args)
    def fedgeA(*args): return _Freestyle.ViewEdgeViewEdgeIterator_fedgeA(*args)
    def fedgeB(*args): return _Freestyle.ViewEdgeViewEdgeIterator_fedgeB(*args)
    def viewShape(*args): return _Freestyle.ViewEdgeViewEdgeIterator_viewShape(*args)
    def aShape(*args): return _Freestyle.ViewEdgeViewEdgeIterator_aShape(*args)
    def isClosed(*args): return _Freestyle.ViewEdgeViewEdgeIterator_isClosed(*args)
    def getChainingTimeStamp(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getChainingTimeStamp(*args)
    def bShape(*args): return _Freestyle.ViewEdgeViewEdgeIterator_bShape(*args)
    def occluders(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occluders(*args)
    def splittingId(*args): return _Freestyle.ViewEdgeViewEdgeIterator_splittingId(*args)
    def SetA(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetA(*args)
    def SetB(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetB(*args)
    def SetNature(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetNature(*args)
    def SetFEdgeA(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetFEdgeA(*args)
    def SetFEdgeB(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetFEdgeB(*args)
    def SetShape(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetShape(*args)
    def SetId(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetId(*args)
    def UpdateFEdges(*args): return _Freestyle.ViewEdgeViewEdgeIterator_UpdateFEdges(*args)
    def SetaShape(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetaShape(*args)
    def SetQI(*args): return _Freestyle.ViewEdgeViewEdgeIterator_SetQI(*args)
    def setChainingTimeStamp(*args): return _Freestyle.ViewEdgeViewEdgeIterator_setChainingTimeStamp(*args)
    def AddOccluder(*args): return _Freestyle.ViewEdgeViewEdgeIterator_AddOccluder(*args)
    def setSplittingId(*args): return _Freestyle.ViewEdgeViewEdgeIterator_setSplittingId(*args)
    def intersect_2d_area(*args): return _Freestyle.ViewEdgeViewEdgeIterator_intersect_2d_area(*args)
    def include_in_2d_area(*args): return _Freestyle.ViewEdgeViewEdgeIterator_include_in_2d_area(*args)
    def getLength2D(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getLength2D(*args)
    def qi(*args): return _Freestyle.ViewEdgeViewEdgeIterator_qi(*args)
    def occluders_begin(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_end(*args)
    def occluders_size(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_size(*args)
    def occluders_empty(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_empty(*args)
    def occludee(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occludee(*args)
    def occluded_shape(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.ViewEdgeViewEdgeIterator_occludee_empty(*args)
    def shape_id(*args): return _Freestyle.ViewEdgeViewEdgeIterator_shape_id(*args)
    def shape(*args): return _Freestyle.ViewEdgeViewEdgeIterator_shape(*args)
    def shape_importance(*args): return _Freestyle.ViewEdgeViewEdgeIterator_shape_importance(*args)
    def verticesBegin(*args): return _Freestyle.ViewEdgeViewEdgeIterator_verticesBegin(*args)
    def verticesEnd(*args): return _Freestyle.ViewEdgeViewEdgeIterator_verticesEnd(*args)
    def pointsBegin(*args): return _Freestyle.ViewEdgeViewEdgeIterator_pointsBegin(*args)
    def pointsEnd(*args): return _Freestyle.ViewEdgeViewEdgeIterator_pointsEnd(*args)
    def getTimeStamp(*args): return _Freestyle.ViewEdgeViewEdgeIterator_getTimeStamp(*args)
    def setTimeStamp(*args): return _Freestyle.ViewEdgeViewEdgeIterator_setTimeStamp(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ViewEdgeViewEdgeIterator(self)
        return weakref_proxy(self)
ViewEdgeViewEdgeIterator_swigregister = _Freestyle.ViewEdgeViewEdgeIterator_swigregister
ViewEdgeViewEdgeIterator_swigregister(ViewEdgeViewEdgeIterator)

class UnaryFunction0DVoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVoid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction0DVoid:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction0DVoid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVoid
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DVoid_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DVoid___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DVoid(self)
        return weakref_proxy(self)
UnaryFunction0DVoid_swigregister = _Freestyle.UnaryFunction0DVoid_swigregister
UnaryFunction0DVoid_swigregister(UnaryFunction0DVoid)

class UnaryFunction0DUnsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DUnsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DUnsigned, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction0DUnsigned:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction0DUnsigned(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DUnsigned
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DUnsigned_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DUnsigned___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DUnsigned(self)
        return weakref_proxy(self)
UnaryFunction0DUnsigned_swigregister = _Freestyle.UnaryFunction0DUnsigned_swigregister
UnaryFunction0DUnsigned_swigregister(UnaryFunction0DUnsigned)

class UnaryFunction0DFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction0DFloat:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction0DFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DFloat
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DFloat_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DFloat___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DFloat(self)
        return weakref_proxy(self)
UnaryFunction0DFloat_swigregister = _Freestyle.UnaryFunction0DFloat_swigregister
UnaryFunction0DFloat_swigregister(UnaryFunction0DFloat)

class UnaryFunction0DDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction0DDouble:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction0DDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DDouble
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DDouble_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DDouble___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DDouble(self)
        return weakref_proxy(self)
UnaryFunction0DDouble_swigregister = _Freestyle.UnaryFunction0DDouble_swigregister
UnaryFunction0DDouble_swigregister(UnaryFunction0DDouble)

class UnaryFunction0DVec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVec2f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction0DVec2f:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction0DVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVec2f
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DVec2f_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DVec2f___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DVec2f(self)
        return weakref_proxy(self)
UnaryFunction0DVec2f_swigregister = _Freestyle.UnaryFunction0DVec2f_swigregister
UnaryFunction0DVec2f_swigregister(UnaryFunction0DVec2f)

class UnaryFunction0DVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVec3f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction0DVec3f:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction0DVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVec3f
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DVec3f_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DVec3f___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DVec3f(self)
        return weakref_proxy(self)
UnaryFunction0DVec3f_swigregister = _Freestyle.UnaryFunction0DVec3f_swigregister
UnaryFunction0DVec3f_swigregister(UnaryFunction0DVec3f)

class UnaryFunction0DId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DId, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction0DId:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction0DId(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DId
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DId_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DId___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DId(self)
        return weakref_proxy(self)
UnaryFunction0DId_swigregister = _Freestyle.UnaryFunction0DId_swigregister
UnaryFunction0DId_swigregister(UnaryFunction0DId)

class UnaryFunction0DViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DViewShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_UnaryFunction0DViewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DViewShape
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DViewShape_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DViewShape___call__(*args)
UnaryFunction0DViewShape_swigregister = _Freestyle.UnaryFunction0DViewShape_swigregister
UnaryFunction0DViewShape_swigregister(UnaryFunction0DViewShape)

class UnaryFunction0DVectorViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVectorViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVectorViewShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_UnaryFunction0DVectorViewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVectorViewShape
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction0DVectorViewShape_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction0DVectorViewShape___call__(*args)
UnaryFunction0DVectorViewShape_swigregister = _Freestyle.UnaryFunction0DVectorViewShape_swigregister
UnaryFunction0DVectorViewShape_swigregister(UnaryFunction0DVectorViewShape)

class GetXF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetXF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetXF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetXF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetXF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetXF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetXF0D
    __del__ = lambda self : None;
GetXF0D_swigregister = _Freestyle.GetXF0D_swigregister
GetXF0D_swigregister(GetXF0D)

class GetYF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetYF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetYF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetYF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetYF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetYF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetYF0D
    __del__ = lambda self : None;
GetYF0D_swigregister = _Freestyle.GetYF0D_swigregister
GetYF0D_swigregister(GetYF0D)

class GetZF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetZF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetZF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetZF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetZF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetZF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetZF0D
    __del__ = lambda self : None;
GetZF0D_swigregister = _Freestyle.GetZF0D_swigregister
GetZF0D_swigregister(GetZF0D)

class GetProjectedXF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedXF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedXF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetProjectedXF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetProjectedXF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedXF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetProjectedXF0D
    __del__ = lambda self : None;
GetProjectedXF0D_swigregister = _Freestyle.GetProjectedXF0D_swigregister
GetProjectedXF0D_swigregister(GetProjectedXF0D)

class GetProjectedYF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedYF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedYF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetProjectedYF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetProjectedYF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedYF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetProjectedYF0D
    __del__ = lambda self : None;
GetProjectedYF0D_swigregister = _Freestyle.GetProjectedYF0D_swigregister
GetProjectedYF0D_swigregister(GetProjectedYF0D)

class GetProjectedZF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedZF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedZF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetProjectedZF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetProjectedZF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedZF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetProjectedZF0D
    __del__ = lambda self : None;
GetProjectedZF0D_swigregister = _Freestyle.GetProjectedZF0D_swigregister
GetProjectedZF0D_swigregister(GetProjectedZF0D)

class GetCurvilinearAbscissaF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetCurvilinearAbscissaF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetCurvilinearAbscissaF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetCurvilinearAbscissaF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetCurvilinearAbscissaF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetCurvilinearAbscissaF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetCurvilinearAbscissaF0D
    __del__ = lambda self : None;
GetCurvilinearAbscissaF0D_swigregister = _Freestyle.GetCurvilinearAbscissaF0D_swigregister
GetCurvilinearAbscissaF0D_swigregister(GetCurvilinearAbscissaF0D)

class GetParameterF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetParameterF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetParameterF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetParameterF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetParameterF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetParameterF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetParameterF0D
    __del__ = lambda self : None;
GetParameterF0D_swigregister = _Freestyle.GetParameterF0D_swigregister
GetParameterF0D_swigregister(GetParameterF0D)

class VertexOrientation2DF0D(UnaryFunction0DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexOrientation2DF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexOrientation2DF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.VertexOrientation2DF0D_getName(*args)
    def __call__(*args): return _Freestyle.VertexOrientation2DF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_VertexOrientation2DF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_VertexOrientation2DF0D
    __del__ = lambda self : None;
VertexOrientation2DF0D_swigregister = _Freestyle.VertexOrientation2DF0D_swigregister
VertexOrientation2DF0D_swigregister(VertexOrientation2DF0D)

class VertexOrientation3DF0D(UnaryFunction0DVec3f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVec3f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexOrientation3DF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVec3f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexOrientation3DF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.VertexOrientation3DF0D_getName(*args)
    def __call__(*args): return _Freestyle.VertexOrientation3DF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_VertexOrientation3DF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_VertexOrientation3DF0D
    __del__ = lambda self : None;
VertexOrientation3DF0D_swigregister = _Freestyle.VertexOrientation3DF0D_swigregister
VertexOrientation3DF0D_swigregister(VertexOrientation3DF0D)

class Curvature2DAngleF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curvature2DAngleF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curvature2DAngleF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.Curvature2DAngleF0D_getName(*args)
    def __call__(*args): return _Freestyle.Curvature2DAngleF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_Curvature2DAngleF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Curvature2DAngleF0D
    __del__ = lambda self : None;
Curvature2DAngleF0D_swigregister = _Freestyle.Curvature2DAngleF0D_swigregister
Curvature2DAngleF0D_swigregister(Curvature2DAngleF0D)

class ZDiscontinuityF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZDiscontinuityF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZDiscontinuityF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.ZDiscontinuityF0D_getName(*args)
    def __call__(*args): return _Freestyle.ZDiscontinuityF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ZDiscontinuityF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ZDiscontinuityF0D
    __del__ = lambda self : None;
ZDiscontinuityF0D_swigregister = _Freestyle.ZDiscontinuityF0D_swigregister
ZDiscontinuityF0D_swigregister(ZDiscontinuityF0D)

class Normal2DF0D(UnaryFunction0DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Normal2DF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Normal2DF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.Normal2DF0D_getName(*args)
    def __call__(*args): return _Freestyle.Normal2DF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_Normal2DF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Normal2DF0D
    __del__ = lambda self : None;
Normal2DF0D_swigregister = _Freestyle.Normal2DF0D_swigregister
Normal2DF0D_swigregister(Normal2DF0D)

class MaterialF0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialF0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.MaterialF0D_getName(*args)
    def __call__(*args): return _Freestyle.MaterialF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_MaterialF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_MaterialF0D
    __del__ = lambda self : None;
MaterialF0D_swigregister = _Freestyle.MaterialF0D_swigregister
MaterialF0D_swigregister(MaterialF0D)

class ShapeIdF0D(UnaryFunction0DId):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DId]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeIdF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DId]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeIdF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.ShapeIdF0D_getName(*args)
    def __call__(*args): return _Freestyle.ShapeIdF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ShapeIdF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ShapeIdF0D
    __del__ = lambda self : None;
ShapeIdF0D_swigregister = _Freestyle.ShapeIdF0D_swigregister
ShapeIdF0D_swigregister(ShapeIdF0D)

class QuantitativeInvisibilityF0D(UnaryFunction0DUnsigned):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DUnsigned]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantitativeInvisibilityF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DUnsigned]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantitativeInvisibilityF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.QuantitativeInvisibilityF0D_getName(*args)
    def __call__(*args): return _Freestyle.QuantitativeInvisibilityF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_QuantitativeInvisibilityF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_QuantitativeInvisibilityF0D
    __del__ = lambda self : None;
QuantitativeInvisibilityF0D_swigregister = _Freestyle.QuantitativeInvisibilityF0D_swigregister
QuantitativeInvisibilityF0D_swigregister(QuantitativeInvisibilityF0D)

class CurveNatureF0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveNatureF0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveNatureF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.CurveNatureF0D_getName(*args)
    def __call__(*args): return _Freestyle.CurveNatureF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_CurveNatureF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CurveNatureF0D
    __del__ = lambda self : None;
CurveNatureF0D_swigregister = _Freestyle.CurveNatureF0D_swigregister
CurveNatureF0D_swigregister(CurveNatureF0D)

class GetShapeF0D(UnaryFunction0DViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetShapeF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetShapeF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetShapeF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetShapeF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetShapeF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetShapeF0D
    __del__ = lambda self : None;
GetShapeF0D_swigregister = _Freestyle.GetShapeF0D_swigregister
GetShapeF0D_swigregister(GetShapeF0D)

class GetOccludersF0D(UnaryFunction0DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludersF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludersF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetOccludersF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetOccludersF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetOccludersF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetOccludersF0D
    __del__ = lambda self : None;
GetOccludersF0D_swigregister = _Freestyle.GetOccludersF0D_swigregister
GetOccludersF0D_swigregister(GetOccludersF0D)

class GetOccludeeF0D(UnaryFunction0DViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludeeF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludeeF0D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.GetOccludeeF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetOccludeeF0D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_GetOccludeeF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetOccludeeF0D
    __del__ = lambda self : None;
GetOccludeeF0D_swigregister = _Freestyle.GetOccludeeF0D_swigregister
GetOccludeeF0D_swigregister(GetOccludeeF0D)

getFEdge = _Freestyle.getFEdge
class UnaryFunction1DVoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVoid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DVoid:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction1DVoid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVoid
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction1DVoid_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction1DVoid___call__(*args)
    def setIntegrationType(*args): return _Freestyle.UnaryFunction1DVoid_setIntegrationType(*args)
    def getIntegrationType(*args): return _Freestyle.UnaryFunction1DVoid_getIntegrationType(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DVoid(self)
        return weakref_proxy(self)
UnaryFunction1DVoid_swigregister = _Freestyle.UnaryFunction1DVoid_swigregister
UnaryFunction1DVoid_swigregister(UnaryFunction1DVoid)

class UnaryFunction1DUnsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DUnsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DUnsigned, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DUnsigned:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction1DUnsigned(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DUnsigned
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction1DUnsigned_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction1DUnsigned___call__(*args)
    def setIntegrationType(*args): return _Freestyle.UnaryFunction1DUnsigned_setIntegrationType(*args)
    def getIntegrationType(*args): return _Freestyle.UnaryFunction1DUnsigned_getIntegrationType(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DUnsigned(self)
        return weakref_proxy(self)
UnaryFunction1DUnsigned_swigregister = _Freestyle.UnaryFunction1DUnsigned_swigregister
UnaryFunction1DUnsigned_swigregister(UnaryFunction1DUnsigned)

class UnaryFunction1DFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DFloat:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction1DFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DFloat
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction1DFloat_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction1DFloat___call__(*args)
    def setIntegrationType(*args): return _Freestyle.UnaryFunction1DFloat_setIntegrationType(*args)
    def getIntegrationType(*args): return _Freestyle.UnaryFunction1DFloat_getIntegrationType(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DFloat(self)
        return weakref_proxy(self)
UnaryFunction1DFloat_swigregister = _Freestyle.UnaryFunction1DFloat_swigregister
UnaryFunction1DFloat_swigregister(UnaryFunction1DFloat)

class UnaryFunction1DDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DDouble:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction1DDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DDouble
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction1DDouble_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction1DDouble___call__(*args)
    def setIntegrationType(*args): return _Freestyle.UnaryFunction1DDouble_setIntegrationType(*args)
    def getIntegrationType(*args): return _Freestyle.UnaryFunction1DDouble_getIntegrationType(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DDouble(self)
        return weakref_proxy(self)
UnaryFunction1DDouble_swigregister = _Freestyle.UnaryFunction1DDouble_swigregister
UnaryFunction1DDouble_swigregister(UnaryFunction1DDouble)

class UnaryFunction1DVec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVec2f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DVec2f:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction1DVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVec2f
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction1DVec2f_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction1DVec2f___call__(*args)
    def setIntegrationType(*args): return _Freestyle.UnaryFunction1DVec2f_setIntegrationType(*args)
    def getIntegrationType(*args): return _Freestyle.UnaryFunction1DVec2f_getIntegrationType(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DVec2f(self)
        return weakref_proxy(self)
UnaryFunction1DVec2f_swigregister = _Freestyle.UnaryFunction1DVec2f_swigregister
UnaryFunction1DVec2f_swigregister(UnaryFunction1DVec2f)

class UnaryFunction1DVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVec3f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DVec3f:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryFunction1DVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVec3f
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction1DVec3f_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction1DVec3f___call__(*args)
    def setIntegrationType(*args): return _Freestyle.UnaryFunction1DVec3f_setIntegrationType(*args)
    def getIntegrationType(*args): return _Freestyle.UnaryFunction1DVec3f_getIntegrationType(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DVec3f(self)
        return weakref_proxy(self)
UnaryFunction1DVec3f_swigregister = _Freestyle.UnaryFunction1DVec3f_swigregister
UnaryFunction1DVec3f_swigregister(UnaryFunction1DVec3f)

class UnaryFunction1DVectorViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVectorViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVectorViewShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_UnaryFunction1DVectorViewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVectorViewShape
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryFunction1DVectorViewShape_getName(*args)
    def __call__(*args): return _Freestyle.UnaryFunction1DVectorViewShape___call__(*args)
    def setIntegrationType(*args): return _Freestyle.UnaryFunction1DVectorViewShape_setIntegrationType(*args)
    def getIntegrationType(*args): return _Freestyle.UnaryFunction1DVectorViewShape_getIntegrationType(*args)
UnaryFunction1DVectorViewShape_swigregister = _Freestyle.UnaryFunction1DVectorViewShape_swigregister
UnaryFunction1DVectorViewShape_swigregister(UnaryFunction1DVectorViewShape)

class GetXF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetXF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetXF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetXF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetXF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetXF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetXF1D
    __del__ = lambda self : None;
GetXF1D_swigregister = _Freestyle.GetXF1D_swigregister
GetXF1D_swigregister(GetXF1D)

class GetYF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetYF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetYF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetYF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetYF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetYF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetYF1D
    __del__ = lambda self : None;
GetYF1D_swigregister = _Freestyle.GetYF1D_swigregister
GetYF1D_swigregister(GetYF1D)

class GetZF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetZF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetZF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetZF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetZF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetZF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetZF1D
    __del__ = lambda self : None;
GetZF1D_swigregister = _Freestyle.GetZF1D_swigregister
GetZF1D_swigregister(GetZF1D)

class GetProjectedXF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedXF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedXF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedXF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetProjectedXF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetProjectedXF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetProjectedXF1D
    __del__ = lambda self : None;
GetProjectedXF1D_swigregister = _Freestyle.GetProjectedXF1D_swigregister
GetProjectedXF1D_swigregister(GetProjectedXF1D)

class GetProjectedYF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedYF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedYF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedYF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetProjectedYF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetProjectedYF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetProjectedYF1D
    __del__ = lambda self : None;
GetProjectedYF1D_swigregister = _Freestyle.GetProjectedYF1D_swigregister
GetProjectedYF1D_swigregister(GetProjectedYF1D)

class GetProjectedZF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedZF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedZF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedZF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetProjectedZF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetProjectedZF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetProjectedZF1D
    __del__ = lambda self : None;
GetProjectedZF1D_swigregister = _Freestyle.GetProjectedZF1D_swigregister
GetProjectedZF1D_swigregister(GetProjectedZF1D)

class Orientation2DF1D(UnaryFunction1DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Orientation2DF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Orientation2DF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Orientation2DF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.Orientation2DF1D_getName(*args)
    def __call__(*args): return _Freestyle.Orientation2DF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_Orientation2DF1D
    __del__ = lambda self : None;
Orientation2DF1D_swigregister = _Freestyle.Orientation2DF1D_swigregister
Orientation2DF1D_swigregister(Orientation2DF1D)

class Orientation3DF1D(UnaryFunction1DVec3f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVec3f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Orientation3DF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVec3f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Orientation3DF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Orientation3DF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.Orientation3DF1D_getName(*args)
    def __call__(*args): return _Freestyle.Orientation3DF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_Orientation3DF1D
    __del__ = lambda self : None;
Orientation3DF1D_swigregister = _Freestyle.Orientation3DF1D_swigregister
Orientation3DF1D_swigregister(Orientation3DF1D)

class ZDiscontinuityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZDiscontinuityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZDiscontinuityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ZDiscontinuityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.ZDiscontinuityF1D_getName(*args)
    def __call__(*args): return _Freestyle.ZDiscontinuityF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_ZDiscontinuityF1D
    __del__ = lambda self : None;
ZDiscontinuityF1D_swigregister = _Freestyle.ZDiscontinuityF1D_swigregister
ZDiscontinuityF1D_swigregister(ZDiscontinuityF1D)

class QuantitativeInvisibilityF1D(UnaryFunction1DUnsigned):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DUnsigned]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantitativeInvisibilityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DUnsigned]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantitativeInvisibilityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_QuantitativeInvisibilityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.QuantitativeInvisibilityF1D_getName(*args)
    def __call__(*args): return _Freestyle.QuantitativeInvisibilityF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_QuantitativeInvisibilityF1D
    __del__ = lambda self : None;
QuantitativeInvisibilityF1D_swigregister = _Freestyle.QuantitativeInvisibilityF1D_swigregister
QuantitativeInvisibilityF1D_swigregister(QuantitativeInvisibilityF1D)

class CurveNatureF1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveNatureF1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveNatureF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_CurveNatureF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.CurveNatureF1D_getName(*args)
    def __call__(*args): return _Freestyle.CurveNatureF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_CurveNatureF1D
    __del__ = lambda self : None;
CurveNatureF1D_swigregister = _Freestyle.CurveNatureF1D_swigregister
CurveNatureF1D_swigregister(CurveNatureF1D)

class TimeStampF1D(UnaryFunction1DVoid):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStampF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStampF1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.TimeStampF1D_getName(*args)
    def __call__(*args): return _Freestyle.TimeStampF1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_TimeStampF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_TimeStampF1D
    __del__ = lambda self : None;
TimeStampF1D_swigregister = _Freestyle.TimeStampF1D_swigregister
TimeStampF1D_swigregister(TimeStampF1D)

class IncrementChainingTimeStampF1D(UnaryFunction1DVoid):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncrementChainingTimeStampF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncrementChainingTimeStampF1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.IncrementChainingTimeStampF1D_getName(*args)
    def __call__(*args): return _Freestyle.IncrementChainingTimeStampF1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_IncrementChainingTimeStampF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_IncrementChainingTimeStampF1D
    __del__ = lambda self : None;
IncrementChainingTimeStampF1D_swigregister = _Freestyle.IncrementChainingTimeStampF1D_swigregister
IncrementChainingTimeStampF1D_swigregister(IncrementChainingTimeStampF1D)

class ChainingTimeStampF1D(UnaryFunction1DVoid):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainingTimeStampF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainingTimeStampF1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.ChainingTimeStampF1D_getName(*args)
    def __call__(*args): return _Freestyle.ChainingTimeStampF1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ChainingTimeStampF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ChainingTimeStampF1D
    __del__ = lambda self : None;
ChainingTimeStampF1D_swigregister = _Freestyle.ChainingTimeStampF1D_swigregister
ChainingTimeStampF1D_swigregister(ChainingTimeStampF1D)

class Curvature2DAngleF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curvature2DAngleF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curvature2DAngleF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Curvature2DAngleF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.Curvature2DAngleF1D_getName(*args)
    def __call__(*args): return _Freestyle.Curvature2DAngleF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_Curvature2DAngleF1D
    __del__ = lambda self : None;
Curvature2DAngleF1D_swigregister = _Freestyle.Curvature2DAngleF1D_swigregister
Curvature2DAngleF1D_swigregister(Curvature2DAngleF1D)

class Normal2DF1D(UnaryFunction1DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Normal2DF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Normal2DF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Normal2DF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.Normal2DF1D_getName(*args)
    def __call__(*args): return _Freestyle.Normal2DF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_Normal2DF1D
    __del__ = lambda self : None;
Normal2DF1D_swigregister = _Freestyle.Normal2DF1D_swigregister
Normal2DF1D_swigregister(Normal2DF1D)

class GetShapeF1D(UnaryFunction1DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetShapeF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetShapeF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetShapeF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetShapeF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetShapeF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetShapeF1D
    __del__ = lambda self : None;
GetShapeF1D_swigregister = _Freestyle.GetShapeF1D_swigregister
GetShapeF1D_swigregister(GetShapeF1D)

class GetOccludersF1D(UnaryFunction1DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludersF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludersF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetOccludersF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetOccludersF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetOccludersF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetOccludersF1D
    __del__ = lambda self : None;
GetOccludersF1D_swigregister = _Freestyle.GetOccludersF1D_swigregister
GetOccludersF1D_swigregister(GetOccludersF1D)

class GetOccludeeF1D(UnaryFunction1DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludeeF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludeeF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetOccludeeF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetOccludeeF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetOccludeeF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetOccludeeF1D
    __del__ = lambda self : None;
GetOccludeeF1D_swigregister = _Freestyle.GetOccludeeF1D_swigregister
GetOccludeeF1D_swigregister(GetOccludeeF1D)

class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    __swig_getmethods__["setAlwaysRefresh"] = lambda x: _Freestyle.Module_setAlwaysRefresh
    if _newclass:setAlwaysRefresh = staticmethod(_Freestyle.Module_setAlwaysRefresh)
    __swig_getmethods__["setCausal"] = lambda x: _Freestyle.Module_setCausal
    if _newclass:setCausal = staticmethod(_Freestyle.Module_setCausal)
    __swig_getmethods__["setDrawable"] = lambda x: _Freestyle.Module_setDrawable
    if _newclass:setDrawable = staticmethod(_Freestyle.Module_setDrawable)
    __swig_getmethods__["getAlwaysRefresh"] = lambda x: _Freestyle.Module_getAlwaysRefresh
    if _newclass:getAlwaysRefresh = staticmethod(_Freestyle.Module_getAlwaysRefresh)
    __swig_getmethods__["getCausal"] = lambda x: _Freestyle.Module_getCausal
    if _newclass:getCausal = staticmethod(_Freestyle.Module_getCausal)
    __swig_getmethods__["getDrawable"] = lambda x: _Freestyle.Module_getDrawable
    if _newclass:getDrawable = staticmethod(_Freestyle.Module_getDrawable)
    def __init__(self, *args): 
        this = _Freestyle.new_Module(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Module
    __del__ = lambda self : None;
Module_swigregister = _Freestyle.Module_swigregister
Module_swigregister(Module)
Module_setAlwaysRefresh = _Freestyle.Module_setAlwaysRefresh
Module_setCausal = _Freestyle.Module_setCausal
Module_setDrawable = _Freestyle.Module_setDrawable
Module_getAlwaysRefresh = _Freestyle.Module_getAlwaysRefresh
Module_getCausal = _Freestyle.Module_getCausal
Module_getDrawable = _Freestyle.Module_getDrawable

class DensityF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_DensityF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.DensityF0D_getName(*args)
    def __call__(*args): return _Freestyle.DensityF0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_DensityF0D
    __del__ = lambda self : None;
DensityF0D_swigregister = _Freestyle.DensityF0D_swigregister
DensityF0D_swigregister(DensityF0D)

class LocalAverageDepthF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalAverageDepthF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalAverageDepthF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_LocalAverageDepthF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.LocalAverageDepthF0D_getName(*args)
    def __call__(*args): return _Freestyle.LocalAverageDepthF0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_LocalAverageDepthF0D
    __del__ = lambda self : None;
LocalAverageDepthF0D_swigregister = _Freestyle.LocalAverageDepthF0D_swigregister
LocalAverageDepthF0D_swigregister(LocalAverageDepthF0D)

class ReadMapPixelF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadMapPixelF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadMapPixelF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ReadMapPixelF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.ReadMapPixelF0D_getName(*args)
    def __call__(*args): return _Freestyle.ReadMapPixelF0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_ReadMapPixelF0D
    __del__ = lambda self : None;
ReadMapPixelF0D_swigregister = _Freestyle.ReadMapPixelF0D_swigregister
ReadMapPixelF0D_swigregister(ReadMapPixelF0D)

class ReadSteerableViewMapPixelF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadSteerableViewMapPixelF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadSteerableViewMapPixelF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ReadSteerableViewMapPixelF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.ReadSteerableViewMapPixelF0D_getName(*args)
    def __call__(*args): return _Freestyle.ReadSteerableViewMapPixelF0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_ReadSteerableViewMapPixelF0D
    __del__ = lambda self : None;
ReadSteerableViewMapPixelF0D_swigregister = _Freestyle.ReadSteerableViewMapPixelF0D_swigregister
ReadSteerableViewMapPixelF0D_swigregister(ReadSteerableViewMapPixelF0D)

class ReadCompleteViewMapPixelF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadCompleteViewMapPixelF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadCompleteViewMapPixelF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ReadCompleteViewMapPixelF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.ReadCompleteViewMapPixelF0D_getName(*args)
    def __call__(*args): return _Freestyle.ReadCompleteViewMapPixelF0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_ReadCompleteViewMapPixelF0D
    __del__ = lambda self : None;
ReadCompleteViewMapPixelF0D_swigregister = _Freestyle.ReadCompleteViewMapPixelF0D_swigregister
ReadCompleteViewMapPixelF0D_swigregister(ReadCompleteViewMapPixelF0D)

class GetViewMapGradientNormF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetViewMapGradientNormF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetViewMapGradientNormF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetViewMapGradientNormF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetViewMapGradientNormF0D_getName(*args)
    def __call__(*args): return _Freestyle.GetViewMapGradientNormF0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetViewMapGradientNormF0D
    __del__ = lambda self : None;
GetViewMapGradientNormF0D_swigregister = _Freestyle.GetViewMapGradientNormF0D_swigregister
GetViewMapGradientNormF0D_swigregister(GetViewMapGradientNormF0D)

class DensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_DensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_DensityF1D
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.DensityF1D_getName(*args)
    def __call__(*args): return _Freestyle.DensityF1D___call__(*args)
DensityF1D_swigregister = _Freestyle.DensityF1D_swigregister
DensityF1D_swigregister(DensityF1D)

class LocalAverageDepthF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalAverageDepthF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalAverageDepthF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_LocalAverageDepthF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.LocalAverageDepthF1D_getName(*args)
    def __call__(*args): return _Freestyle.LocalAverageDepthF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_LocalAverageDepthF1D
    __del__ = lambda self : None;
LocalAverageDepthF1D_swigregister = _Freestyle.LocalAverageDepthF1D_swigregister
LocalAverageDepthF1D_swigregister(LocalAverageDepthF1D)

class GetCompleteViewMapDensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetCompleteViewMapDensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetCompleteViewMapDensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetCompleteViewMapDensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetCompleteViewMapDensityF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetCompleteViewMapDensityF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetCompleteViewMapDensityF1D
    __del__ = lambda self : None;
GetCompleteViewMapDensityF1D_swigregister = _Freestyle.GetCompleteViewMapDensityF1D_swigregister
GetCompleteViewMapDensityF1D_swigregister(GetCompleteViewMapDensityF1D)

class GetDirectionalViewMapDensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetDirectionalViewMapDensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetDirectionalViewMapDensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetDirectionalViewMapDensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetDirectionalViewMapDensityF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetDirectionalViewMapDensityF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetDirectionalViewMapDensityF1D
    __del__ = lambda self : None;
GetDirectionalViewMapDensityF1D_swigregister = _Freestyle.GetDirectionalViewMapDensityF1D_swigregister
GetDirectionalViewMapDensityF1D_swigregister(GetDirectionalViewMapDensityF1D)

class GetSteerableViewMapDensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetSteerableViewMapDensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetSteerableViewMapDensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetSteerableViewMapDensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetSteerableViewMapDensityF1D
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.GetSteerableViewMapDensityF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetSteerableViewMapDensityF1D___call__(*args)
GetSteerableViewMapDensityF1D_swigregister = _Freestyle.GetSteerableViewMapDensityF1D_swigregister
GetSteerableViewMapDensityF1D_swigregister(GetSteerableViewMapDensityF1D)

class GetViewMapGradientNormF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetViewMapGradientNormF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetViewMapGradientNormF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetViewMapGradientNormF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.GetViewMapGradientNormF1D_getName(*args)
    def __call__(*args): return _Freestyle.GetViewMapGradientNormF1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_GetViewMapGradientNormF1D
    __del__ = lambda self : None;
GetViewMapGradientNormF1D_swigregister = _Freestyle.GetViewMapGradientNormF1D_swigregister
GetViewMapGradientNormF1D_swigregister(GetViewMapGradientNormF1D)

GetTimeStampCF = _Freestyle.GetTimeStampCF
GetCanvasWidthCF = _Freestyle.GetCanvasWidthCF
GetCanvasHeightCF = _Freestyle.GetCanvasHeightCF
ReadMapPixelCF = _Freestyle.ReadMapPixelCF
ReadCompleteViewMapPixelCF = _Freestyle.ReadCompleteViewMapPixelCF
ReadDirectionalViewMapPixelCF = _Freestyle.ReadDirectionalViewMapPixelCF
GetSelectedFEdgeCF = _Freestyle.GetSelectedFEdgeCF
class AdjacencyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjacencyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdjacencyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_AdjacencyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_AdjacencyIterator
    __del__ = lambda self : None;
    def isEnd(*args): return _Freestyle.AdjacencyIterator_isEnd(*args)
    def isBegin(*args): return _Freestyle.AdjacencyIterator_isBegin(*args)
    def isIncoming(*args): return _Freestyle.AdjacencyIterator_isIncoming(*args)
    def getObject(*args): return _Freestyle.AdjacencyIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.AdjacencyIterator___deref__(*args)
    def increment(*args): return _Freestyle.AdjacencyIterator_increment(*args)
    def getExactTypeName(*args): return _Freestyle.AdjacencyIterator_getExactTypeName(*args)
    def getId(*args): return _Freestyle.AdjacencyIterator_getId(*args)
    def getNature(*args): return _Freestyle.AdjacencyIterator_getNature(*args)
    __swig_setmethods__["userdata"] = _Freestyle.AdjacencyIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.AdjacencyIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.AdjacencyIterator_userdata_get, _Freestyle.AdjacencyIterator_userdata_set)
    def A(*args): return _Freestyle.AdjacencyIterator_A(*args)
    def B(*args): return _Freestyle.AdjacencyIterator_B(*args)
    def fedgeA(*args): return _Freestyle.AdjacencyIterator_fedgeA(*args)
    def fedgeB(*args): return _Freestyle.AdjacencyIterator_fedgeB(*args)
    def viewShape(*args): return _Freestyle.AdjacencyIterator_viewShape(*args)
    def aShape(*args): return _Freestyle.AdjacencyIterator_aShape(*args)
    def isClosed(*args): return _Freestyle.AdjacencyIterator_isClosed(*args)
    def getChainingTimeStamp(*args): return _Freestyle.AdjacencyIterator_getChainingTimeStamp(*args)
    def bShape(*args): return _Freestyle.AdjacencyIterator_bShape(*args)
    def occluders(*args): return _Freestyle.AdjacencyIterator_occluders(*args)
    def splittingId(*args): return _Freestyle.AdjacencyIterator_splittingId(*args)
    def SetA(*args): return _Freestyle.AdjacencyIterator_SetA(*args)
    def SetB(*args): return _Freestyle.AdjacencyIterator_SetB(*args)
    def SetNature(*args): return _Freestyle.AdjacencyIterator_SetNature(*args)
    def SetFEdgeA(*args): return _Freestyle.AdjacencyIterator_SetFEdgeA(*args)
    def SetFEdgeB(*args): return _Freestyle.AdjacencyIterator_SetFEdgeB(*args)
    def SetShape(*args): return _Freestyle.AdjacencyIterator_SetShape(*args)
    def SetId(*args): return _Freestyle.AdjacencyIterator_SetId(*args)
    def UpdateFEdges(*args): return _Freestyle.AdjacencyIterator_UpdateFEdges(*args)
    def SetaShape(*args): return _Freestyle.AdjacencyIterator_SetaShape(*args)
    def SetQI(*args): return _Freestyle.AdjacencyIterator_SetQI(*args)
    def setChainingTimeStamp(*args): return _Freestyle.AdjacencyIterator_setChainingTimeStamp(*args)
    def AddOccluder(*args): return _Freestyle.AdjacencyIterator_AddOccluder(*args)
    def setSplittingId(*args): return _Freestyle.AdjacencyIterator_setSplittingId(*args)
    def intersect_2d_area(*args): return _Freestyle.AdjacencyIterator_intersect_2d_area(*args)
    def include_in_2d_area(*args): return _Freestyle.AdjacencyIterator_include_in_2d_area(*args)
    def getLength2D(*args): return _Freestyle.AdjacencyIterator_getLength2D(*args)
    def qi(*args): return _Freestyle.AdjacencyIterator_qi(*args)
    def occluders_begin(*args): return _Freestyle.AdjacencyIterator_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.AdjacencyIterator_occluders_end(*args)
    def occluders_size(*args): return _Freestyle.AdjacencyIterator_occluders_size(*args)
    def occluders_empty(*args): return _Freestyle.AdjacencyIterator_occluders_empty(*args)
    def occludee(*args): return _Freestyle.AdjacencyIterator_occludee(*args)
    def occluded_shape(*args): return _Freestyle.AdjacencyIterator_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.AdjacencyIterator_occludee_empty(*args)
    def shape_id(*args): return _Freestyle.AdjacencyIterator_shape_id(*args)
    def shape(*args): return _Freestyle.AdjacencyIterator_shape(*args)
    def shape_importance(*args): return _Freestyle.AdjacencyIterator_shape_importance(*args)
    def verticesBegin(*args): return _Freestyle.AdjacencyIterator_verticesBegin(*args)
    def verticesEnd(*args): return _Freestyle.AdjacencyIterator_verticesEnd(*args)
    def pointsBegin(*args): return _Freestyle.AdjacencyIterator_pointsBegin(*args)
    def pointsEnd(*args): return _Freestyle.AdjacencyIterator_pointsEnd(*args)
    def getTimeStamp(*args): return _Freestyle.AdjacencyIterator_getTimeStamp(*args)
    def setTimeStamp(*args): return _Freestyle.AdjacencyIterator_setTimeStamp(*args)
AdjacencyIterator_swigregister = _Freestyle.AdjacencyIterator_swigregister
AdjacencyIterator_swigregister(AdjacencyIterator)
LoadMapCF = _Freestyle.LoadMapCF

class ChainingIterator(ViewEdgeViewEdgeIterator):
    __swig_setmethods__ = {}
    for _s in [ViewEdgeViewEdgeIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainingIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewEdgeViewEdgeIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainingIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ChainingIterator:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_ChainingIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getExactTypeName(*args): return _Freestyle.ChainingIterator_getExactTypeName(*args)
    def init(*args): return _Freestyle.ChainingIterator_init(*args)
    def traverse(*args): return _Freestyle.ChainingIterator_traverse(*args)
    def getVertex(*args): return _Freestyle.ChainingIterator_getVertex(*args)
    def isIncrementing(*args): return _Freestyle.ChainingIterator_isIncrementing(*args)
    def increment(*args): return _Freestyle.ChainingIterator_increment(*args)
    def decrement(*args): return _Freestyle.ChainingIterator_decrement(*args)
    __swig_destroy__ = _Freestyle.delete_ChainingIterator
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ChainingIterator(self)
        return weakref_proxy(self)
ChainingIterator_swigregister = _Freestyle.ChainingIterator_swigregister
ChainingIterator_swigregister(ChainingIterator)

class ChainSilhouetteIterator(ChainingIterator):
    __swig_setmethods__ = {}
    for _s in [ChainingIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainSilhouetteIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainingIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainSilhouetteIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ChainSilhouetteIterator:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_ChainSilhouetteIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getExactTypeName(*args): return _Freestyle.ChainSilhouetteIterator_getExactTypeName(*args)
    def traverse(*args): return _Freestyle.ChainSilhouetteIterator_traverse(*args)
    __swig_destroy__ = _Freestyle.delete_ChainSilhouetteIterator
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ChainSilhouetteIterator(self)
        return weakref_proxy(self)
ChainSilhouetteIterator_swigregister = _Freestyle.ChainSilhouetteIterator_swigregister
ChainSilhouetteIterator_swigregister(ChainSilhouetteIterator)

class ChainPredicateIterator(ChainingIterator):
    __swig_setmethods__ = {}
    for _s in [ChainingIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainPredicateIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainingIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainPredicateIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ChainPredicateIterator:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_ChainPredicateIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ChainPredicateIterator
    __del__ = lambda self : None;
    def getExactTypeName(*args): return _Freestyle.ChainPredicateIterator_getExactTypeName(*args)
    def traverse(*args): return _Freestyle.ChainPredicateIterator_traverse(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ChainPredicateIterator(self)
        return weakref_proxy(self)
ChainPredicateIterator_swigregister = _Freestyle.ChainPredicateIterator_swigregister
ChainPredicateIterator_swigregister(ChainPredicateIterator)

class UnaryPredicate0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryPredicate0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryPredicate0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryPredicate0D:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryPredicate0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryPredicate0D
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryPredicate0D_getName(*args)
    def __call__(*args): return _Freestyle.UnaryPredicate0D___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryPredicate0D(self)
        return weakref_proxy(self)
UnaryPredicate0D_swigregister = _Freestyle.UnaryPredicate0D_swigregister
UnaryPredicate0D_swigregister(UnaryPredicate0D)

class BinaryPredicate0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryPredicate0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryPredicate0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_BinaryPredicate0D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_BinaryPredicate0D
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.BinaryPredicate0D_getName(*args)
    def __call__(*args): return _Freestyle.BinaryPredicate0D___call__(*args)
BinaryPredicate0D_swigregister = _Freestyle.BinaryPredicate0D_swigregister
BinaryPredicate0D_swigregister(BinaryPredicate0D)

class TrueUP0D(UnaryPredicate0D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrueUP0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrueUP0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_TrueUP0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.TrueUP0D_getName(*args)
    def __call__(*args): return _Freestyle.TrueUP0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_TrueUP0D
    __del__ = lambda self : None;
TrueUP0D_swigregister = _Freestyle.TrueUP0D_swigregister
TrueUP0D_swigregister(TrueUP0D)

class FalseUP0D(UnaryPredicate0D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalseUP0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FalseUP0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FalseUP0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.FalseUP0D_getName(*args)
    def __call__(*args): return _Freestyle.FalseUP0D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_FalseUP0D
    __del__ = lambda self : None;
FalseUP0D_swigregister = _Freestyle.FalseUP0D_swigregister
FalseUP0D_swigregister(FalseUP0D)

class UnaryPredicate1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryPredicate1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryPredicate1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryPredicate1D:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_UnaryPredicate1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryPredicate1D
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.UnaryPredicate1D_getName(*args)
    def __call__(*args): return _Freestyle.UnaryPredicate1D___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryPredicate1D(self)
        return weakref_proxy(self)
UnaryPredicate1D_swigregister = _Freestyle.UnaryPredicate1D_swigregister
UnaryPredicate1D_swigregister(UnaryPredicate1D)

class BinaryPredicate1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryPredicate1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryPredicate1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == BinaryPredicate1D:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_BinaryPredicate1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_BinaryPredicate1D
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.BinaryPredicate1D_getName(*args)
    def __call__(*args): return _Freestyle.BinaryPredicate1D___call__(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_BinaryPredicate1D(self)
        return weakref_proxy(self)
BinaryPredicate1D_swigregister = _Freestyle.BinaryPredicate1D_swigregister
BinaryPredicate1D_swigregister(BinaryPredicate1D)

class TrueUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrueUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrueUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_TrueUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.TrueUP1D_getName(*args)
    def __call__(*args): return _Freestyle.TrueUP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_TrueUP1D
    __del__ = lambda self : None;
TrueUP1D_swigregister = _Freestyle.TrueUP1D_swigregister
TrueUP1D_swigregister(TrueUP1D)

class FalseUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalseUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FalseUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FalseUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.FalseUP1D_getName(*args)
    def __call__(*args): return _Freestyle.FalseUP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_FalseUP1D
    __del__ = lambda self : None;
FalseUP1D_swigregister = _Freestyle.FalseUP1D_swigregister
FalseUP1D_swigregister(FalseUP1D)

class QuantitativeInvisibilityUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantitativeInvisibilityUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantitativeInvisibilityUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_QuantitativeInvisibilityUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.QuantitativeInvisibilityUP1D_getName(*args)
    def __call__(*args): return _Freestyle.QuantitativeInvisibilityUP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_QuantitativeInvisibilityUP1D
    __del__ = lambda self : None;
QuantitativeInvisibilityUP1D_swigregister = _Freestyle.QuantitativeInvisibilityUP1D_swigregister
QuantitativeInvisibilityUP1D_swigregister(QuantitativeInvisibilityUP1D)

class ContourUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContourUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContourUP1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.ContourUP1D_getName(*args)
    def __call__(*args): return _Freestyle.ContourUP1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ContourUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ContourUP1D
    __del__ = lambda self : None;
ContourUP1D_swigregister = _Freestyle.ContourUP1D_swigregister
ContourUP1D_swigregister(ContourUP1D)

class ExternalContourUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalContourUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalContourUP1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.ExternalContourUP1D_getName(*args)
    def __call__(*args): return _Freestyle.ExternalContourUP1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ExternalContourUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ExternalContourUP1D
    __del__ = lambda self : None;
ExternalContourUP1D_swigregister = _Freestyle.ExternalContourUP1D_swigregister
ExternalContourUP1D_swigregister(ExternalContourUP1D)

class EqualToTimeStampUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqualToTimeStampUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqualToTimeStampUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_EqualToTimeStampUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.EqualToTimeStampUP1D_getName(*args)
    def __call__(*args): return _Freestyle.EqualToTimeStampUP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_EqualToTimeStampUP1D
    __del__ = lambda self : None;
EqualToTimeStampUP1D_swigregister = _Freestyle.EqualToTimeStampUP1D_swigregister
EqualToTimeStampUP1D_swigregister(EqualToTimeStampUP1D)

class EqualToChainingTimeStampUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqualToChainingTimeStampUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqualToChainingTimeStampUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_EqualToChainingTimeStampUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.EqualToChainingTimeStampUP1D_getName(*args)
    def __call__(*args): return _Freestyle.EqualToChainingTimeStampUP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_EqualToChainingTimeStampUP1D
    __del__ = lambda self : None;
EqualToChainingTimeStampUP1D_swigregister = _Freestyle.EqualToChainingTimeStampUP1D_swigregister
EqualToChainingTimeStampUP1D_swigregister(EqualToChainingTimeStampUP1D)

class ShapeUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ShapeUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.ShapeUP1D_getName(*args)
    def __call__(*args): return _Freestyle.ShapeUP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_ShapeUP1D
    __del__ = lambda self : None;
ShapeUP1D_swigregister = _Freestyle.ShapeUP1D_swigregister
ShapeUP1D_swigregister(ShapeUP1D)

class TrueBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrueBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrueBP1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.TrueBP1D_getName(*args)
    def __call__(*args): return _Freestyle.TrueBP1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_TrueBP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_TrueBP1D
    __del__ = lambda self : None;
TrueBP1D_swigregister = _Freestyle.TrueBP1D_swigregister
TrueBP1D_swigregister(TrueBP1D)

class FalseBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalseBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FalseBP1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.FalseBP1D_getName(*args)
    def __call__(*args): return _Freestyle.FalseBP1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_FalseBP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FalseBP1D
    __del__ = lambda self : None;
FalseBP1D_swigregister = _Freestyle.FalseBP1D_swigregister
FalseBP1D_swigregister(FalseBP1D)

class Length2DBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Length2DBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Length2DBP1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.Length2DBP1D_getName(*args)
    def __call__(*args): return _Freestyle.Length2DBP1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_Length2DBP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Length2DBP1D
    __del__ = lambda self : None;
Length2DBP1D_swigregister = _Freestyle.Length2DBP1D_swigregister
Length2DBP1D_swigregister(Length2DBP1D)

class SameShapeIdBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SameShapeIdBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SameShapeIdBP1D, name)
    __repr__ = _swig_repr
    def getName(*args): return _Freestyle.SameShapeIdBP1D_getName(*args)
    def __call__(*args): return _Freestyle.SameShapeIdBP1D___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_SameShapeIdBP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SameShapeIdBP1D
    __del__ = lambda self : None;
SameShapeIdBP1D_swigregister = _Freestyle.SameShapeIdBP1D_swigregister
SameShapeIdBP1D_swigregister(SameShapeIdBP1D)

class ViewMapGradientNormBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewMapGradientNormBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewMapGradientNormBP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ViewMapGradientNormBP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.ViewMapGradientNormBP1D_getName(*args)
    def __call__(*args): return _Freestyle.ViewMapGradientNormBP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_ViewMapGradientNormBP1D
    __del__ = lambda self : None;
ViewMapGradientNormBP1D_swigregister = _Freestyle.ViewMapGradientNormBP1D_swigregister
ViewMapGradientNormBP1D_swigregister(ViewMapGradientNormBP1D)

class DensityLowerThanUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityLowerThanUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityLowerThanUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_DensityLowerThanUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.DensityLowerThanUP1D_getName(*args)
    def __call__(*args): return _Freestyle.DensityLowerThanUP1D___call__(*args)
    __swig_destroy__ = _Freestyle.delete_DensityLowerThanUP1D
    __del__ = lambda self : None;
DensityLowerThanUP1D_swigregister = _Freestyle.DensityLowerThanUP1D_swigregister
DensityLowerThanUP1D_swigregister(DensityLowerThanUP1D)

class CurvePointIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurvePointIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurvePointIterator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_CurvilinearLength"] = _Freestyle.CurvePointIterator__CurvilinearLength_set
    __swig_getmethods__["_CurvilinearLength"] = _Freestyle.CurvePointIterator__CurvilinearLength_get
    if _newclass:_CurvilinearLength = _swig_property(_Freestyle.CurvePointIterator__CurvilinearLength_get, _Freestyle.CurvePointIterator__CurvilinearLength_set)
    __swig_setmethods__["_step"] = _Freestyle.CurvePointIterator__step_set
    __swig_getmethods__["_step"] = _Freestyle.CurvePointIterator__step_get
    if _newclass:_step = _swig_property(_Freestyle.CurvePointIterator__step_get, _Freestyle.CurvePointIterator__step_set)
    __swig_setmethods__["__A"] = _Freestyle.CurvePointIterator___A_set
    __swig_getmethods__["__A"] = _Freestyle.CurvePointIterator___A_get
    if _newclass:__A = _swig_property(_Freestyle.CurvePointIterator___A_get, _Freestyle.CurvePointIterator___A_set)
    __swig_setmethods__["__B"] = _Freestyle.CurvePointIterator___B_set
    __swig_getmethods__["__B"] = _Freestyle.CurvePointIterator___B_get
    if _newclass:__B = _swig_property(_Freestyle.CurvePointIterator___B_get, _Freestyle.CurvePointIterator___B_set)
    __swig_setmethods__["_begin"] = _Freestyle.CurvePointIterator__begin_set
    __swig_getmethods__["_begin"] = _Freestyle.CurvePointIterator__begin_get
    if _newclass:_begin = _swig_property(_Freestyle.CurvePointIterator__begin_get, _Freestyle.CurvePointIterator__begin_set)
    __swig_setmethods__["_end"] = _Freestyle.CurvePointIterator__end_set
    __swig_getmethods__["_end"] = _Freestyle.CurvePointIterator__end_get
    if _newclass:_end = _swig_property(_Freestyle.CurvePointIterator__end_get, _Freestyle.CurvePointIterator__end_set)
    __swig_setmethods__["_n"] = _Freestyle.CurvePointIterator__n_set
    __swig_getmethods__["_n"] = _Freestyle.CurvePointIterator__n_get
    if _newclass:_n = _swig_property(_Freestyle.CurvePointIterator__n_get, _Freestyle.CurvePointIterator__n_set)
    __swig_setmethods__["_currentn"] = _Freestyle.CurvePointIterator__currentn_set
    __swig_getmethods__["_currentn"] = _Freestyle.CurvePointIterator__currentn_get
    if _newclass:_currentn = _swig_property(_Freestyle.CurvePointIterator__currentn_get, _Freestyle.CurvePointIterator__currentn_set)
    __swig_setmethods__["_t"] = _Freestyle.CurvePointIterator__t_set
    __swig_getmethods__["_t"] = _Freestyle.CurvePointIterator__t_get
    if _newclass:_t = _swig_property(_Freestyle.CurvePointIterator__t_get, _Freestyle.CurvePointIterator__t_set)
    __swig_setmethods__["_Point"] = _Freestyle.CurvePointIterator__Point_set
    __swig_getmethods__["_Point"] = _Freestyle.CurvePointIterator__Point_get
    if _newclass:_Point = _swig_property(_Freestyle.CurvePointIterator__Point_get, _Freestyle.CurvePointIterator__Point_set)
    __swig_setmethods__["_CurveLength"] = _Freestyle.CurvePointIterator__CurveLength_set
    __swig_getmethods__["_CurveLength"] = _Freestyle.CurvePointIterator__CurveLength_get
    if _newclass:_CurveLength = _swig_property(_Freestyle.CurvePointIterator__CurveLength_get, _Freestyle.CurvePointIterator__CurveLength_set)
    def __init__(self, *args): 
        this = _Freestyle.new_CurvePointIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CurvePointIterator
    __del__ = lambda self : None;
    def copy(*args): return _Freestyle.CurvePointIterator_copy(*args)
    def CastToInterface0DIterator(*args): return _Freestyle.CurvePointIterator_CastToInterface0DIterator(*args)
    def getExactTypeName(*args): return _Freestyle.CurvePointIterator_getExactTypeName(*args)
    def __eq__(*args): return _Freestyle.CurvePointIterator___eq__(*args)
    def getObject(*args): return _Freestyle.CurvePointIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.CurvePointIterator___deref__(*args)
    def isBegin(*args): return _Freestyle.CurvePointIterator_isBegin(*args)
    def isEnd(*args): return _Freestyle.CurvePointIterator_isEnd(*args)
    def getX(*args): return _Freestyle.CurvePointIterator_getX(*args)
    def getY(*args): return _Freestyle.CurvePointIterator_getY(*args)
    def getZ(*args): return _Freestyle.CurvePointIterator_getZ(*args)
    def getPoint3D(*args): return _Freestyle.CurvePointIterator_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.CurvePointIterator_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.CurvePointIterator_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.CurvePointIterator_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.CurvePointIterator_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.CurvePointIterator_getFEdge(*args)
    def getId(*args): return _Freestyle.CurvePointIterator_getId(*args)
    def getNature(*args): return _Freestyle.CurvePointIterator_getNature(*args)
    def castToSVertex(*args): return _Freestyle.CurvePointIterator_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.CurvePointIterator_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.CurvePointIterator_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.CurvePointIterator_castToTVertex(*args)
    def A(*args): return _Freestyle.CurvePointIterator_A(*args)
    def B(*args): return _Freestyle.CurvePointIterator_B(*args)
    def t2d(*args): return _Freestyle.CurvePointIterator_t2d(*args)
    def SetA(*args): return _Freestyle.CurvePointIterator_SetA(*args)
    def SetB(*args): return _Freestyle.CurvePointIterator_SetB(*args)
    def SetT2d(*args): return _Freestyle.CurvePointIterator_SetT2d(*args)
    def fedge(*args): return _Freestyle.CurvePointIterator_fedge(*args)
    def point2d(*args): return _Freestyle.CurvePointIterator_point2d(*args)
    def point3d(*args): return _Freestyle.CurvePointIterator_point3d(*args)
    def normal(*args): return _Freestyle.CurvePointIterator_normal(*args)
    def shape(*args): return _Freestyle.CurvePointIterator_shape(*args)
    def occluders_begin(*args): return _Freestyle.CurvePointIterator_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.CurvePointIterator_occluders_end(*args)
    def occluders_empty(*args): return _Freestyle.CurvePointIterator_occluders_empty(*args)
    def occluders_size(*args): return _Freestyle.CurvePointIterator_occluders_size(*args)
    def occludee(*args): return _Freestyle.CurvePointIterator_occludee(*args)
    def occluded_shape(*args): return _Freestyle.CurvePointIterator_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.CurvePointIterator_occludee_empty(*args)
    def z_discontinuity(*args): return _Freestyle.CurvePointIterator_z_discontinuity(*args)
    def curvatureFredo(*args): return _Freestyle.CurvePointIterator_curvatureFredo(*args)
    def directionFredo(*args): return _Freestyle.CurvePointIterator_directionFredo(*args)
CurvePointIterator_swigregister = _Freestyle.CurvePointIterator_swigregister
CurvePointIterator_swigregister(CurvePointIterator)

class CurvePoint(Interface0D):
    __swig_setmethods__ = {}
    for _s in [Interface0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurvePoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurvePoint, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.CurvePoint_getExactTypeName(*args)
    def getX(*args): return _Freestyle.CurvePoint_getX(*args)
    def getY(*args): return _Freestyle.CurvePoint_getY(*args)
    def getZ(*args): return _Freestyle.CurvePoint_getZ(*args)
    def getPoint3D(*args): return _Freestyle.CurvePoint_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.CurvePoint_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.CurvePoint_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.CurvePoint_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.CurvePoint_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.CurvePoint_getFEdge(*args)
    def getId(*args): return _Freestyle.CurvePoint_getId(*args)
    def getNature(*args): return _Freestyle.CurvePoint_getNature(*args)
    def castToSVertex(*args): return _Freestyle.CurvePoint_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.CurvePoint_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.CurvePoint_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.CurvePoint_castToTVertex(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_CurvePoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CurvePoint
    __del__ = lambda self : None;
    def __eq__(*args): return _Freestyle.CurvePoint___eq__(*args)
    def A(*args): return _Freestyle.CurvePoint_A(*args)
    def B(*args): return _Freestyle.CurvePoint_B(*args)
    def t2d(*args): return _Freestyle.CurvePoint_t2d(*args)
    def SetA(*args): return _Freestyle.CurvePoint_SetA(*args)
    def SetB(*args): return _Freestyle.CurvePoint_SetB(*args)
    def SetT2d(*args): return _Freestyle.CurvePoint_SetT2d(*args)
    def fedge(*args): return _Freestyle.CurvePoint_fedge(*args)
    def point2d(*args): return _Freestyle.CurvePoint_point2d(*args)
    def point3d(*args): return _Freestyle.CurvePoint_point3d(*args)
    def normal(*args): return _Freestyle.CurvePoint_normal(*args)
    def shape(*args): return _Freestyle.CurvePoint_shape(*args)
    def occluders_begin(*args): return _Freestyle.CurvePoint_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.CurvePoint_occluders_end(*args)
    def occluders_empty(*args): return _Freestyle.CurvePoint_occluders_empty(*args)
    def occluders_size(*args): return _Freestyle.CurvePoint_occluders_size(*args)
    def occludee(*args): return _Freestyle.CurvePoint_occludee(*args)
    def occluded_shape(*args): return _Freestyle.CurvePoint_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.CurvePoint_occludee_empty(*args)
    def z_discontinuity(*args): return _Freestyle.CurvePoint_z_discontinuity(*args)
    def curvatureFredo(*args): return _Freestyle.CurvePoint_curvatureFredo(*args)
    def directionFredo(*args): return _Freestyle.CurvePoint_directionFredo(*args)
CurvePoint_swigregister = _Freestyle.CurvePoint_swigregister
CurvePoint_swigregister(CurvePoint)

class Curve(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Curve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Curve
    __del__ = lambda self : None;
    def computeCurvatureAndOrientation(*args): return _Freestyle.Curve_computeCurvatureAndOrientation(*args)
    def push_vertex_back(*args): return _Freestyle.Curve_push_vertex_back(*args)
    def push_vertex_front(*args): return _Freestyle.Curve_push_vertex_front(*args)
    def empty(*args): return _Freestyle.Curve_empty(*args)
    def getLength2D(*args): return _Freestyle.Curve_getLength2D(*args)
    def getId(*args): return _Freestyle.Curve_getId(*args)
    def nSegments(*args): return _Freestyle.Curve_nSegments(*args)
    def setId(*args): return _Freestyle.Curve_setId(*args)
    def curvePointsBegin(*args): return _Freestyle.Curve_curvePointsBegin(*args)
    def curvePointsEnd(*args): return _Freestyle.Curve_curvePointsEnd(*args)
    def curveVerticesBegin(*args): return _Freestyle.Curve_curveVerticesBegin(*args)
    def curveVerticesEnd(*args): return _Freestyle.Curve_curveVerticesEnd(*args)
    def verticesBegin(*args): return _Freestyle.Curve_verticesBegin(*args)
    def verticesEnd(*args): return _Freestyle.Curve_verticesEnd(*args)
    def pointsBegin(*args): return _Freestyle.Curve_pointsBegin(*args)
    def pointsEnd(*args): return _Freestyle.Curve_pointsEnd(*args)
Curve_swigregister = _Freestyle.Curve_swigregister
Curve_swigregister(Curve)

class StrokeVertexIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeVertexIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeVertexIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeVertexIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeVertexIterator
    __del__ = lambda self : None;
    def castToInterface0DIterator(*args): return _Freestyle.StrokeVertexIterator_castToInterface0DIterator(*args)
    def getExactTypeName(*args): return _Freestyle.StrokeVertexIterator_getExactTypeName(*args)
    def getObject(*args): return _Freestyle.StrokeVertexIterator_getObject(*args)
    def __deref__(*args): return _Freestyle.StrokeVertexIterator___deref__(*args)
    def increment(*args): return _Freestyle.StrokeVertexIterator_increment(*args)
    def decrement(*args): return _Freestyle.StrokeVertexIterator_decrement(*args)
    def isBegin(*args): return _Freestyle.StrokeVertexIterator_isBegin(*args)
    def isEnd(*args): return _Freestyle.StrokeVertexIterator_isEnd(*args)
    def __eq__(*args): return _Freestyle.StrokeVertexIterator___eq__(*args)
    def t(*args): return _Freestyle.StrokeVertexIterator_t(*args)
    def u(*args): return _Freestyle.StrokeVertexIterator_u(*args)
    def copy(*args): return _Freestyle.StrokeVertexIterator_copy(*args)
    def getIt(*args): return _Freestyle.StrokeVertexIterator_getIt(*args)
    def x(*args): return _Freestyle.StrokeVertexIterator_x(*args)
    def y(*args): return _Freestyle.StrokeVertexIterator_y(*args)
    def getPoint(*args): return _Freestyle.StrokeVertexIterator_getPoint(*args)
    def attribute(*args): return _Freestyle.StrokeVertexIterator_attribute(*args)
    def curvilinearAbscissa(*args): return _Freestyle.StrokeVertexIterator_curvilinearAbscissa(*args)
    def strokeLength(*args): return _Freestyle.StrokeVertexIterator_strokeLength(*args)
    def SetX(*args): return _Freestyle.StrokeVertexIterator_SetX(*args)
    def SetY(*args): return _Freestyle.StrokeVertexIterator_SetY(*args)
    def SetPoint(*args): return _Freestyle.StrokeVertexIterator_SetPoint(*args)
    def SetAttribute(*args): return _Freestyle.StrokeVertexIterator_SetAttribute(*args)
    def SetCurvilinearAbscissa(*args): return _Freestyle.StrokeVertexIterator_SetCurvilinearAbscissa(*args)
    def SetStrokeLength(*args): return _Freestyle.StrokeVertexIterator_SetStrokeLength(*args)
    def getX(*args): return _Freestyle.StrokeVertexIterator_getX(*args)
    def getY(*args): return _Freestyle.StrokeVertexIterator_getY(*args)
    def getZ(*args): return _Freestyle.StrokeVertexIterator_getZ(*args)
    def getPoint3D(*args): return _Freestyle.StrokeVertexIterator_getPoint3D(*args)
    def getProjectedX(*args): return _Freestyle.StrokeVertexIterator_getProjectedX(*args)
    def getProjectedY(*args): return _Freestyle.StrokeVertexIterator_getProjectedY(*args)
    def getProjectedZ(*args): return _Freestyle.StrokeVertexIterator_getProjectedZ(*args)
    def getPoint2D(*args): return _Freestyle.StrokeVertexIterator_getPoint2D(*args)
    def getFEdge(*args): return _Freestyle.StrokeVertexIterator_getFEdge(*args)
    def getId(*args): return _Freestyle.StrokeVertexIterator_getId(*args)
    def getNature(*args): return _Freestyle.StrokeVertexIterator_getNature(*args)
    def castToSVertex(*args): return _Freestyle.StrokeVertexIterator_castToSVertex(*args)
    def castToViewVertex(*args): return _Freestyle.StrokeVertexIterator_castToViewVertex(*args)
    def castToNonTVertex(*args): return _Freestyle.StrokeVertexIterator_castToNonTVertex(*args)
    def castToTVertex(*args): return _Freestyle.StrokeVertexIterator_castToTVertex(*args)
    def A(*args): return _Freestyle.StrokeVertexIterator_A(*args)
    def B(*args): return _Freestyle.StrokeVertexIterator_B(*args)
    def t2d(*args): return _Freestyle.StrokeVertexIterator_t2d(*args)
    def SetA(*args): return _Freestyle.StrokeVertexIterator_SetA(*args)
    def SetB(*args): return _Freestyle.StrokeVertexIterator_SetB(*args)
    def SetT2d(*args): return _Freestyle.StrokeVertexIterator_SetT2d(*args)
    def fedge(*args): return _Freestyle.StrokeVertexIterator_fedge(*args)
    def point2d(*args): return _Freestyle.StrokeVertexIterator_point2d(*args)
    def point3d(*args): return _Freestyle.StrokeVertexIterator_point3d(*args)
    def normal(*args): return _Freestyle.StrokeVertexIterator_normal(*args)
    def shape(*args): return _Freestyle.StrokeVertexIterator_shape(*args)
    def occluders_begin(*args): return _Freestyle.StrokeVertexIterator_occluders_begin(*args)
    def occluders_end(*args): return _Freestyle.StrokeVertexIterator_occluders_end(*args)
    def occluders_empty(*args): return _Freestyle.StrokeVertexIterator_occluders_empty(*args)
    def occluders_size(*args): return _Freestyle.StrokeVertexIterator_occluders_size(*args)
    def occludee(*args): return _Freestyle.StrokeVertexIterator_occludee(*args)
    def occluded_shape(*args): return _Freestyle.StrokeVertexIterator_occluded_shape(*args)
    def occludee_empty(*args): return _Freestyle.StrokeVertexIterator_occludee_empty(*args)
    def z_discontinuity(*args): return _Freestyle.StrokeVertexIterator_z_discontinuity(*args)
    def curvatureFredo(*args): return _Freestyle.StrokeVertexIterator_curvatureFredo(*args)
    def directionFredo(*args): return _Freestyle.StrokeVertexIterator_directionFredo(*args)
StrokeVertexIterator_swigregister = _Freestyle.StrokeVertexIterator_swigregister
StrokeVertexIterator_swigregister(StrokeVertexIterator)

class StrokeAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeAttribute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeAttribute
    __del__ = lambda self : None;
    def getColor(*args): return _Freestyle.StrokeAttribute_getColor(*args)
    def getColorR(*args): return _Freestyle.StrokeAttribute_getColorR(*args)
    def getColorG(*args): return _Freestyle.StrokeAttribute_getColorG(*args)
    def getColorB(*args): return _Freestyle.StrokeAttribute_getColorB(*args)
    def getColorRGB(*args): return _Freestyle.StrokeAttribute_getColorRGB(*args)
    def getAlpha(*args): return _Freestyle.StrokeAttribute_getAlpha(*args)
    def getThickness(*args): return _Freestyle.StrokeAttribute_getThickness(*args)
    def getThicknessR(*args): return _Freestyle.StrokeAttribute_getThicknessR(*args)
    def getThicknessL(*args): return _Freestyle.StrokeAttribute_getThicknessL(*args)
    def getThicknessRL(*args): return _Freestyle.StrokeAttribute_getThicknessRL(*args)
    def isVisible(*args): return _Freestyle.StrokeAttribute_isVisible(*args)
    def getAttributeReal(*args): return _Freestyle.StrokeAttribute_getAttributeReal(*args)
    def getAttributeVec2f(*args): return _Freestyle.StrokeAttribute_getAttributeVec2f(*args)
    def getAttributeVec3f(*args): return _Freestyle.StrokeAttribute_getAttributeVec3f(*args)
    def isAttributeAvailableReal(*args): return _Freestyle.StrokeAttribute_isAttributeAvailableReal(*args)
    def isAttributeAvailableVec2f(*args): return _Freestyle.StrokeAttribute_isAttributeAvailableVec2f(*args)
    def isAttributeAvailableVec3f(*args): return _Freestyle.StrokeAttribute_isAttributeAvailableVec3f(*args)
    def setColor(*args): return _Freestyle.StrokeAttribute_setColor(*args)
    def setAlpha(*args): return _Freestyle.StrokeAttribute_setAlpha(*args)
    def setThickness(*args): return _Freestyle.StrokeAttribute_setThickness(*args)
    def SetVisible(*args): return _Freestyle.StrokeAttribute_SetVisible(*args)
    def setAttributeReal(*args): return _Freestyle.StrokeAttribute_setAttributeReal(*args)
    def setAttributeVec2f(*args): return _Freestyle.StrokeAttribute_setAttributeVec2f(*args)
    def setAttributeVec3f(*args): return _Freestyle.StrokeAttribute_setAttributeVec3f(*args)
StrokeAttribute_swigregister = _Freestyle.StrokeAttribute_swigregister
StrokeAttribute_swigregister(StrokeAttribute)

class StrokeVertex(CurvePoint):
    __swig_setmethods__ = {}
    for _s in [CurvePoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [CurvePoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.StrokeVertex_getExactTypeName(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeVertex
    __del__ = lambda self : None;
    def x(*args): return _Freestyle.StrokeVertex_x(*args)
    def y(*args): return _Freestyle.StrokeVertex_y(*args)
    def getPoint(*args): return _Freestyle.StrokeVertex_getPoint(*args)
    def attribute(*args): return _Freestyle.StrokeVertex_attribute(*args)
    def curvilinearAbscissa(*args): return _Freestyle.StrokeVertex_curvilinearAbscissa(*args)
    def strokeLength(*args): return _Freestyle.StrokeVertex_strokeLength(*args)
    def u(*args): return _Freestyle.StrokeVertex_u(*args)
    def SetX(*args): return _Freestyle.StrokeVertex_SetX(*args)
    def SetY(*args): return _Freestyle.StrokeVertex_SetY(*args)
    def SetPoint(*args): return _Freestyle.StrokeVertex_SetPoint(*args)
    def SetAttribute(*args): return _Freestyle.StrokeVertex_SetAttribute(*args)
    def SetCurvilinearAbscissa(*args): return _Freestyle.StrokeVertex_SetCurvilinearAbscissa(*args)
    def SetStrokeLength(*args): return _Freestyle.StrokeVertex_SetStrokeLength(*args)
StrokeVertex_swigregister = _Freestyle.StrokeVertex_swigregister
StrokeVertex_swigregister(StrokeVertex)

class Stroke(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stroke, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stroke, name)
    __repr__ = _swig_repr
    def getExactTypeName(*args): return _Freestyle.Stroke_getExactTypeName(*args)
    def getId(*args): return _Freestyle.Stroke_getId(*args)
    DRY_MEDIUM = _Freestyle.Stroke_DRY_MEDIUM
    HUMID_MEDIUM = _Freestyle.Stroke_HUMID_MEDIUM
    OPAQUE_MEDIUM = _Freestyle.Stroke_OPAQUE_MEDIUM
    def __init__(self, *args): 
        this = _Freestyle.new_Stroke(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Stroke
    __del__ = lambda self : None;
    def ComputeSampling(*args): return _Freestyle.Stroke_ComputeSampling(*args)
    def Resample(*args): return _Freestyle.Stroke_Resample(*args)
    def RemoveVertex(*args): return _Freestyle.Stroke_RemoveVertex(*args)
    def InsertVertex(*args): return _Freestyle.Stroke_InsertVertex(*args)
    def Render(*args): return _Freestyle.Stroke_Render(*args)
    def RenderBasic(*args): return _Freestyle.Stroke_RenderBasic(*args)
    def getLength2D(*args): return _Freestyle.Stroke_getLength2D(*args)
    def getMediumType(*args): return _Freestyle.Stroke_getMediumType(*args)
    def getTextureId(*args): return _Freestyle.Stroke_getTextureId(*args)
    def hasTips(*args): return _Freestyle.Stroke_hasTips(*args)
    def vertices_size(*args): return _Freestyle.Stroke_vertices_size(*args)
    def viewedges_begin(*args): return _Freestyle.Stroke_viewedges_begin(*args)
    def viewedges_end(*args): return _Freestyle.Stroke_viewedges_end(*args)
    def viewedges_size(*args): return _Freestyle.Stroke_viewedges_size(*args)
    def getBeginningOrientation(*args): return _Freestyle.Stroke_getBeginningOrientation(*args)
    def getBeginningOrientationX(*args): return _Freestyle.Stroke_getBeginningOrientationX(*args)
    def getBeginningOrientationY(*args): return _Freestyle.Stroke_getBeginningOrientationY(*args)
    def getEndingOrientation(*args): return _Freestyle.Stroke_getEndingOrientation(*args)
    def getEndingOrientationX(*args): return _Freestyle.Stroke_getEndingOrientationX(*args)
    def getEndingOrientationY(*args): return _Freestyle.Stroke_getEndingOrientationY(*args)
    def SetId(*args): return _Freestyle.Stroke_SetId(*args)
    def SetLength(*args): return _Freestyle.Stroke_SetLength(*args)
    def SetMediumType(*args): return _Freestyle.Stroke_SetMediumType(*args)
    def SetTextureId(*args): return _Freestyle.Stroke_SetTextureId(*args)
    def SetTips(*args): return _Freestyle.Stroke_SetTips(*args)
    def push_back(*args): return _Freestyle.Stroke_push_back(*args)
    def push_front(*args): return _Freestyle.Stroke_push_front(*args)
    def AddViewEdge(*args): return _Freestyle.Stroke_AddViewEdge(*args)
    def SetBeginningOrientation(*args): return _Freestyle.Stroke_SetBeginningOrientation(*args)
    def SetEndingOrientation(*args): return _Freestyle.Stroke_SetEndingOrientation(*args)
    def strokeVerticesBegin(*args): return _Freestyle.Stroke_strokeVerticesBegin(*args)
    def strokeVerticesEnd(*args): return _Freestyle.Stroke_strokeVerticesEnd(*args)
    def strokeVerticesSize(*args): return _Freestyle.Stroke_strokeVerticesSize(*args)
    def verticesBegin(*args): return _Freestyle.Stroke_verticesBegin(*args)
    def verticesEnd(*args): return _Freestyle.Stroke_verticesEnd(*args)
    def pointsBegin(*args): return _Freestyle.Stroke_pointsBegin(*args)
    def pointsEnd(*args): return _Freestyle.Stroke_pointsEnd(*args)
Stroke_swigregister = _Freestyle.Stroke_swigregister
Stroke_swigregister(Stroke)

class ShadersContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadersContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadersContainer, name)
    __repr__ = _swig_repr
    def iterator(*args): return _Freestyle.ShadersContainer_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Freestyle.ShadersContainer___nonzero__(*args)
    def __len__(*args): return _Freestyle.ShadersContainer___len__(*args)
    def pop(*args): return _Freestyle.ShadersContainer_pop(*args)
    def __getslice__(*args): return _Freestyle.ShadersContainer___getslice__(*args)
    def __setslice__(*args): return _Freestyle.ShadersContainer___setslice__(*args)
    def __delslice__(*args): return _Freestyle.ShadersContainer___delslice__(*args)
    def __delitem__(*args): return _Freestyle.ShadersContainer___delitem__(*args)
    def __getitem__(*args): return _Freestyle.ShadersContainer___getitem__(*args)
    def __setitem__(*args): return _Freestyle.ShadersContainer___setitem__(*args)
    def append(*args): return _Freestyle.ShadersContainer_append(*args)
    def empty(*args): return _Freestyle.ShadersContainer_empty(*args)
    def size(*args): return _Freestyle.ShadersContainer_size(*args)
    def clear(*args): return _Freestyle.ShadersContainer_clear(*args)
    def swap(*args): return _Freestyle.ShadersContainer_swap(*args)
    def get_allocator(*args): return _Freestyle.ShadersContainer_get_allocator(*args)
    def begin(*args): return _Freestyle.ShadersContainer_begin(*args)
    def end(*args): return _Freestyle.ShadersContainer_end(*args)
    def rbegin(*args): return _Freestyle.ShadersContainer_rbegin(*args)
    def rend(*args): return _Freestyle.ShadersContainer_rend(*args)
    def pop_back(*args): return _Freestyle.ShadersContainer_pop_back(*args)
    def erase(*args): return _Freestyle.ShadersContainer_erase(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ShadersContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Freestyle.ShadersContainer_push_back(*args)
    def front(*args): return _Freestyle.ShadersContainer_front(*args)
    def back(*args): return _Freestyle.ShadersContainer_back(*args)
    def assign(*args): return _Freestyle.ShadersContainer_assign(*args)
    def resize(*args): return _Freestyle.ShadersContainer_resize(*args)
    def insert(*args): return _Freestyle.ShadersContainer_insert(*args)
    def reserve(*args): return _Freestyle.ShadersContainer_reserve(*args)
    def capacity(*args): return _Freestyle.ShadersContainer_capacity(*args)
    __swig_destroy__ = _Freestyle.delete_ShadersContainer
    __del__ = lambda self : None;
ShadersContainer_swigregister = _Freestyle.ShadersContainer_swigregister
ShadersContainer_swigregister(ShadersContainer)

class StrokeShader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeShader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == StrokeShader:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _Freestyle.new_StrokeShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeShader
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.StrokeShader_getName(*args)
    def shade(*args): return _Freestyle.StrokeShader_shade(*args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_StrokeShader(self)
        return weakref_proxy(self)
StrokeShader_swigregister = _Freestyle.StrokeShader_swigregister
StrokeShader_swigregister(StrokeShader)

class ConstantThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstantThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ConstantThicknessShader
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.ConstantThicknessShader_getName(*args)
    def shade(*args): return _Freestyle.ConstantThicknessShader_shade(*args)
ConstantThicknessShader_swigregister = _Freestyle.ConstantThicknessShader_swigregister
ConstantThicknessShader_swigregister(ConstantThicknessShader)

class ConstantExternThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantExternThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantExternThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstantExternThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ConstantExternThicknessShader
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.ConstantExternThicknessShader_getName(*args)
    def shade(*args): return _Freestyle.ConstantExternThicknessShader_shade(*args)
ConstantExternThicknessShader_swigregister = _Freestyle.ConstantExternThicknessShader_swigregister
ConstantExternThicknessShader_swigregister(ConstantExternThicknessShader)

class IncreasingThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncreasingThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncreasingThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_IncreasingThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_IncreasingThicknessShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.IncreasingThicknessShader_shade(*args)
IncreasingThicknessShader_swigregister = _Freestyle.IncreasingThicknessShader_swigregister
IncreasingThicknessShader_swigregister(IncreasingThicknessShader)

class ConstrainedIncreasingThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstrainedIncreasingThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstrainedIncreasingThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstrainedIncreasingThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ConstrainedIncreasingThicknessShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.ConstrainedIncreasingThicknessShader_shade(*args)
ConstrainedIncreasingThicknessShader_swigregister = _Freestyle.ConstrainedIncreasingThicknessShader_swigregister
ConstrainedIncreasingThicknessShader_swigregister(ConstrainedIncreasingThicknessShader)

class LengthDependingThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthDependingThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LengthDependingThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_LengthDependingThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_LengthDependingThicknessShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.LengthDependingThicknessShader_shade(*args)
LengthDependingThicknessShader_swigregister = _Freestyle.LengthDependingThicknessShader_swigregister
LengthDependingThicknessShader_swigregister(LengthDependingThicknessShader)

class ThicknessVariationPatternShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThicknessVariationPatternShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThicknessVariationPatternShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ThicknessVariationPatternShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ThicknessVariationPatternShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.ThicknessVariationPatternShader_shade(*args)
ThicknessVariationPatternShader_swigregister = _Freestyle.ThicknessVariationPatternShader_swigregister
ThicknessVariationPatternShader_swigregister(ThicknessVariationPatternShader)

class ThicknessNoiseShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThicknessNoiseShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThicknessNoiseShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ThicknessNoiseShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.ThicknessNoiseShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_ThicknessNoiseShader
    __del__ = lambda self : None;
ThicknessNoiseShader_swigregister = _Freestyle.ThicknessNoiseShader_swigregister
ThicknessNoiseShader_swigregister(ThicknessNoiseShader)

class ConstantColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstantColorShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _Freestyle.ConstantColorShader_getName(*args)
    def shade(*args): return _Freestyle.ConstantColorShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_ConstantColorShader
    __del__ = lambda self : None;
ConstantColorShader_swigregister = _Freestyle.ConstantColorShader_swigregister
ConstantColorShader_swigregister(ConstantColorShader)

class IncreasingColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncreasingColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncreasingColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_IncreasingColorShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.IncreasingColorShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_IncreasingColorShader
    __del__ = lambda self : None;
IncreasingColorShader_swigregister = _Freestyle.IncreasingColorShader_swigregister
IncreasingColorShader_swigregister(IncreasingColorShader)

class ColorVariationPatternShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVariationPatternShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVariationPatternShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ColorVariationPatternShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ColorVariationPatternShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.ColorVariationPatternShader_shade(*args)
ColorVariationPatternShader_swigregister = _Freestyle.ColorVariationPatternShader_swigregister
ColorVariationPatternShader_swigregister(ColorVariationPatternShader)

class MaterialColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_MaterialColorShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.MaterialColorShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_MaterialColorShader
    __del__ = lambda self : None;
MaterialColorShader_swigregister = _Freestyle.MaterialColorShader_swigregister
MaterialColorShader_swigregister(MaterialColorShader)

class CalligraphicColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalligraphicColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CalligraphicColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_CalligraphicColorShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.CalligraphicColorShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_CalligraphicColorShader
    __del__ = lambda self : None;
CalligraphicColorShader_swigregister = _Freestyle.CalligraphicColorShader_swigregister
CalligraphicColorShader_swigregister(CalligraphicColorShader)

class ColorNoiseShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorNoiseShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorNoiseShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ColorNoiseShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.ColorNoiseShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_ColorNoiseShader
    __del__ = lambda self : None;
ColorNoiseShader_swigregister = _Freestyle.ColorNoiseShader_swigregister
ColorNoiseShader_swigregister(ColorNoiseShader)

class TextureAssignerShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureAssignerShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextureAssignerShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_TextureAssignerShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.TextureAssignerShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_TextureAssignerShader
    __del__ = lambda self : None;
TextureAssignerShader_swigregister = _Freestyle.TextureAssignerShader_swigregister
TextureAssignerShader_swigregister(TextureAssignerShader)

class StrokeTextureShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeTextureShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeTextureShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeTextureShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.StrokeTextureShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_StrokeTextureShader
    __del__ = lambda self : None;
StrokeTextureShader_swigregister = _Freestyle.StrokeTextureShader_swigregister
StrokeTextureShader_swigregister(StrokeTextureShader)

class BackboneStretcherShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackboneStretcherShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackboneStretcherShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_BackboneStretcherShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.BackboneStretcherShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_BackboneStretcherShader
    __del__ = lambda self : None;
BackboneStretcherShader_swigregister = _Freestyle.BackboneStretcherShader_swigregister
BackboneStretcherShader_swigregister(BackboneStretcherShader)

class SamplingShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplingShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SamplingShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_SamplingShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.SamplingShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_SamplingShader
    __del__ = lambda self : None;
SamplingShader_swigregister = _Freestyle.SamplingShader_swigregister
SamplingShader_swigregister(SamplingShader)

class ExternalContourStretcherShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalContourStretcherShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalContourStretcherShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ExternalContourStretcherShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.ExternalContourStretcherShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_ExternalContourStretcherShader
    __del__ = lambda self : None;
ExternalContourStretcherShader_swigregister = _Freestyle.ExternalContourStretcherShader_swigregister
ExternalContourStretcherShader_swigregister(ExternalContourStretcherShader)

class BSplineShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSplineShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BSplineShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_BSplineShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.BSplineShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_BSplineShader
    __del__ = lambda self : None;
BSplineShader_swigregister = _Freestyle.BSplineShader_swigregister
BSplineShader_swigregister(BSplineShader)

class BezierCurveShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BezierCurveShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BezierCurveShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_BezierCurveShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.BezierCurveShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_BezierCurveShader
    __del__ = lambda self : None;
BezierCurveShader_swigregister = _Freestyle.BezierCurveShader_swigregister
BezierCurveShader_swigregister(BezierCurveShader)

class InflateShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InflateShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InflateShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_InflateShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.InflateShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_InflateShader
    __del__ = lambda self : None;
InflateShader_swigregister = _Freestyle.InflateShader_swigregister
InflateShader_swigregister(InflateShader)

class PolygonalizationShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonalizationShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonalizationShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_PolygonalizationShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.PolygonalizationShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_PolygonalizationShader
    __del__ = lambda self : None;
PolygonalizationShader_swigregister = _Freestyle.PolygonalizationShader_swigregister
PolygonalizationShader_swigregister(PolygonalizationShader)

class GuidingLinesShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuidingLinesShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuidingLinesShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GuidingLinesShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(*args): return _Freestyle.GuidingLinesShader_shade(*args)
    __swig_destroy__ = _Freestyle.delete_GuidingLinesShader
    __del__ = lambda self : None;
GuidingLinesShader_swigregister = _Freestyle.GuidingLinesShader_swigregister
GuidingLinesShader_swigregister(GuidingLinesShader)

class TipRemoverShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipRemoverShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TipRemoverShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_TipRemoverShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_TipRemoverShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.TipRemoverShader_shade(*args)
TipRemoverShader_swigregister = _Freestyle.TipRemoverShader_swigregister
TipRemoverShader_swigregister(TipRemoverShader)

class streamShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, streamShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, streamShader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_streamShader
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.streamShader_getName(*args)
    def shade(*args): return _Freestyle.streamShader_shade(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_streamShader(*args)
        try: self.this.append(this)
        except: self.this = this
streamShader_swigregister = _Freestyle.streamShader_swigregister
streamShader_swigregister(streamShader)

class fstreamShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fstreamShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fstreamShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_fstreamShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_fstreamShader
    __del__ = lambda self : None;
    def getName(*args): return _Freestyle.fstreamShader_getName(*args)
    def shade(*args): return _Freestyle.fstreamShader_shade(*args)
fstreamShader_swigregister = _Freestyle.fstreamShader_swigregister
fstreamShader_swigregister(fstreamShader)

class CalligraphicShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalligraphicShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CalligraphicShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_CalligraphicShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CalligraphicShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.CalligraphicShader_shade(*args)
CalligraphicShader_swigregister = _Freestyle.CalligraphicShader_swigregister
CalligraphicShader_swigregister(CalligraphicShader)

class SpatialNoiseShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpatialNoiseShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpatialNoiseShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_SpatialNoiseShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SpatialNoiseShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.SpatialNoiseShader_shade(*args)
SpatialNoiseShader_swigregister = _Freestyle.SpatialNoiseShader_swigregister
SpatialNoiseShader_swigregister(SpatialNoiseShader)

class SmoothingShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothingShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothingShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_SmoothingShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SmoothingShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.SmoothingShader_shade(*args)
SmoothingShader_swigregister = _Freestyle.SmoothingShader_swigregister
SmoothingShader_swigregister(SmoothingShader)

class Smoother(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Smoother, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Smoother, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Smoother(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Smoother
    __del__ = lambda self : None;
    def smooth(*args): return _Freestyle.Smoother_smooth(*args)
    def computeCurvature(*args): return _Freestyle.Smoother_computeCurvature(*args)
Smoother_swigregister = _Freestyle.Smoother_swigregister
Smoother_swigregister(Smoother)

class Omitter(Smoother):
    __swig_setmethods__ = {}
    for _s in [Smoother]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Omitter, name, value)
    __swig_getmethods__ = {}
    for _s in [Smoother]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Omitter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Omitter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Omitter
    __del__ = lambda self : None;
    def omit(*args): return _Freestyle.Omitter_omit(*args)
Omitter_swigregister = _Freestyle.Omitter_swigregister
Omitter_swigregister(Omitter)

class OmissionShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OmissionShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OmissionShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_OmissionShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_OmissionShader
    __del__ = lambda self : None;
    def shade(*args): return _Freestyle.OmissionShader_shade(*args)
OmissionShader_swigregister = _Freestyle.OmissionShader_swigregister
OmissionShader_swigregister(OmissionShader)

class Operators(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operators, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Operators, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["select"] = lambda x: _Freestyle.Operators_select
    if _newclass:select = staticmethod(_Freestyle.Operators_select)
    __swig_getmethods__["chain"] = lambda x: _Freestyle.Operators_chain
    if _newclass:chain = staticmethod(_Freestyle.Operators_chain)
    __swig_getmethods__["bidirectionalChain"] = lambda x: _Freestyle.Operators_bidirectionalChain
    if _newclass:bidirectionalChain = staticmethod(_Freestyle.Operators_bidirectionalChain)
    __swig_getmethods__["sequentialSplit"] = lambda x: _Freestyle.Operators_sequentialSplit
    if _newclass:sequentialSplit = staticmethod(_Freestyle.Operators_sequentialSplit)
    __swig_getmethods__["recursiveSplit"] = lambda x: _Freestyle.Operators_recursiveSplit
    if _newclass:recursiveSplit = staticmethod(_Freestyle.Operators_recursiveSplit)
    __swig_getmethods__["sort"] = lambda x: _Freestyle.Operators_sort
    if _newclass:sort = staticmethod(_Freestyle.Operators_sort)
    __swig_getmethods__["create"] = lambda x: _Freestyle.Operators_create
    if _newclass:create = staticmethod(_Freestyle.Operators_create)
    __swig_getmethods__["getViewEdgeFromIndex"] = lambda x: _Freestyle.Operators_getViewEdgeFromIndex
    if _newclass:getViewEdgeFromIndex = staticmethod(_Freestyle.Operators_getViewEdgeFromIndex)
    __swig_getmethods__["getChainFromIndex"] = lambda x: _Freestyle.Operators_getChainFromIndex
    if _newclass:getChainFromIndex = staticmethod(_Freestyle.Operators_getChainFromIndex)
    __swig_getmethods__["getStrokeFromIndex"] = lambda x: _Freestyle.Operators_getStrokeFromIndex
    if _newclass:getStrokeFromIndex = staticmethod(_Freestyle.Operators_getStrokeFromIndex)
    __swig_getmethods__["getViewEdgesSize"] = lambda x: _Freestyle.Operators_getViewEdgesSize
    if _newclass:getViewEdgesSize = staticmethod(_Freestyle.Operators_getViewEdgesSize)
    __swig_getmethods__["getChainsSize"] = lambda x: _Freestyle.Operators_getChainsSize
    if _newclass:getChainsSize = staticmethod(_Freestyle.Operators_getChainsSize)
    __swig_getmethods__["getStrokesSize"] = lambda x: _Freestyle.Operators_getStrokesSize
    if _newclass:getStrokesSize = staticmethod(_Freestyle.Operators_getStrokesSize)
    __swig_destroy__ = _Freestyle.delete_Operators
    __del__ = lambda self : None;
Operators_swigregister = _Freestyle.Operators_swigregister
Operators_swigregister(Operators)
Operators_select = _Freestyle.Operators_select
Operators_chain = _Freestyle.Operators_chain
Operators_bidirectionalChain = _Freestyle.Operators_bidirectionalChain
Operators_sequentialSplit = _Freestyle.Operators_sequentialSplit
Operators_recursiveSplit = _Freestyle.Operators_recursiveSplit
Operators_sort = _Freestyle.Operators_sort
Operators_create = _Freestyle.Operators_create
Operators_getViewEdgeFromIndex = _Freestyle.Operators_getViewEdgeFromIndex
Operators_getChainFromIndex = _Freestyle.Operators_getChainFromIndex
Operators_getStrokeFromIndex = _Freestyle.Operators_getStrokeFromIndex
Operators_getViewEdgesSize = _Freestyle.Operators_getViewEdgesSize
Operators_getChainsSize = _Freestyle.Operators_getChainsSize
Operators_getStrokesSize = _Freestyle.Operators_getStrokesSize

class ltstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ltstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ltstr, name)
    __repr__ = _swig_repr
    def __call__(*args): return _Freestyle.ltstr___call__(*args)
    def __init__(self, *args): 
        this = _Freestyle.new_ltstr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ltstr
    __del__ = lambda self : None;
ltstr_swigregister = _Freestyle.ltstr_swigregister
ltstr_swigregister(ltstr)

class Canvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Canvas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Canvas, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _Freestyle.Canvas_getInstance
    if _newclass:getInstance = staticmethod(_Freestyle.Canvas_getInstance)
    NB_STEERABLE_VIEWMAP = _Freestyle.Canvas_NB_STEERABLE_VIEWMAP
    __swig_destroy__ = _Freestyle.delete_Canvas
    __del__ = lambda self : None;
    def preDraw(*args): return _Freestyle.Canvas_preDraw(*args)
    def Draw(*args): return _Freestyle.Canvas_Draw(*args)
    def postDraw(*args): return _Freestyle.Canvas_postDraw(*args)
    def Render(*args): return _Freestyle.Canvas_Render(*args)
    def RenderBasic(*args): return _Freestyle.Canvas_RenderBasic(*args)
    def RenderStroke(*args): return _Freestyle.Canvas_RenderStroke(*args)
    def init(*args): return _Freestyle.Canvas_init(*args)
    def Clear(*args): return _Freestyle.Canvas_Clear(*args)
    def Erase(*args): return _Freestyle.Canvas_Erase(*args)
    def readColorPixels(*args): return _Freestyle.Canvas_readColorPixels(*args)
    def readDepthPixels(*args): return _Freestyle.Canvas_readDepthPixels(*args)
    def update(*args): return _Freestyle.Canvas_update(*args)
    def isEmpty(*args): return _Freestyle.Canvas_isEmpty(*args)
    def loadMap(*args): return _Freestyle.Canvas_loadMap(*args)
    def readMapPixel(*args): return _Freestyle.Canvas_readMapPixel(*args)
    def loadSteerableViewMap(*args): return _Freestyle.Canvas_loadSteerableViewMap(*args)
    def getSteerableViewMap(*args): return _Freestyle.Canvas_getSteerableViewMap(*args)
    def selectedFEdge(*args): return _Freestyle.Canvas_selectedFEdge(*args)
    def width(*args): return _Freestyle.Canvas_width(*args)
    def height(*args): return _Freestyle.Canvas_height(*args)
    def currentPaperTextureIndex(*args): return _Freestyle.Canvas_currentPaperTextureIndex(*args)
    def scene3DBBox(*args): return _Freestyle.Canvas_scene3DBBox(*args)
    def renderer(*args): return _Freestyle.Canvas_renderer(*args)
    def getCurrentStyleModule(*args): return _Freestyle.Canvas_getCurrentStyleModule(*args)
    def getRecordFlag(*args): return _Freestyle.Canvas_getRecordFlag(*args)
    def SetSelectedFEdge(*args): return _Freestyle.Canvas_SetSelectedFEdge(*args)
    def InsertStyleModule(*args): return _Freestyle.Canvas_InsertStyleModule(*args)
    def RemoveStyleModule(*args): return _Freestyle.Canvas_RemoveStyleModule(*args)
    def SwapStyleModules(*args): return _Freestyle.Canvas_SwapStyleModules(*args)
    def ReplaceStyleModule(*args): return _Freestyle.Canvas_ReplaceStyleModule(*args)
    def SetVisible(*args): return _Freestyle.Canvas_SetVisible(*args)
    def AddLayer(*args): return _Freestyle.Canvas_AddLayer(*args)
    def SetCurrentPaperTextureIndex(*args): return _Freestyle.Canvas_SetCurrentPaperTextureIndex(*args)
    def changePaperTexture(*args): return _Freestyle.Canvas_changePaperTexture(*args)
    def togglePaperTexture(*args): return _Freestyle.Canvas_togglePaperTexture(*args)
    def resetModified(*args): return _Freestyle.Canvas_resetModified(*args)
    def causalStyleModules(*args): return _Freestyle.Canvas_causalStyleModules(*args)
    def setModified(*args): return _Freestyle.Canvas_setModified(*args)
Canvas_swigregister = _Freestyle.Canvas_swigregister
Canvas_swigregister(Canvas)
Canvas_getInstance = _Freestyle.Canvas_getInstance

castToSVertex = _Freestyle.castToSVertex
castToViewVertex = _Freestyle.castToViewVertex
castToTVertex = _Freestyle.castToTVertex
castToCurvePoint = _Freestyle.castToCurvePoint
castToStrokeVertex = _Freestyle.castToStrokeVertex
castToNonTVertex = _Freestyle.castToNonTVertex
castToFEdge = _Freestyle.castToFEdge
castToViewEdge = _Freestyle.castToViewEdge
castToStroke = _Freestyle.castToStroke
castToChain = _Freestyle.castToChain


