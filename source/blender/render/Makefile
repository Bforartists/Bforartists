# Makefile.in generated by automake 1.7.6 from Makefile.am.
# source/blender/render/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/blender
pkglibdir = $(libdir)/blender
pkgincludedir = $(includedir)/blender
top_builddir = ../../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoconf
AUTOHEADER = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoheader
AUTOMAKE = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run automake-1.7
AWK = mawk
BLIB_JPEG = 
BLIB_PNG = 
BLIB_SDL = 
BlenderFMOD_FALSE = 
BlenderFMOD_TRUE = #
BlenderGAME_FALSE = 
BlenderGAME_TRUE = #
BlenderOPENAL_FALSE = 
BlenderOPENAL_TRUE = #
BlenderPLUGIN_FALSE = 
BlenderPLUGIN_TRUE = #
BlenderQUICKTIME_FALSE = 
BlenderQUICKTIME_TRUE = #
BlenderSTATIC_FALSE = 
BlenderSTATIC_TRUE = #
CARBON_FALSE = 
CARBON_TRUE = #
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS =  -funsigned-char
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -funsigned-char
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = 
FFLAGS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBM = -lm
LIBOBJS = 

LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKE = /usr/bin/make
MAKEINFO = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run makeinfo
OBJEXT = o
PACKAGE = blender
PACKAGE_BUGREPORT = 
PACKAGE_NAME = blender
PACKAGE_STRING = blender 2.29
PACKAGE_TARNAME = blender
PACKAGE_VERSION = 2.29
PATH_SEPARATOR = :
PBBUILD = 
PYTHON = /usr/bin/python
PYTHONSYSPREFIX = /usr
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_LDFLAGS = -Xlinker -export-dynamic
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.2
RANLIB = ranlib
SDL_CFLAGS = -I/usr/include/SDL -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib -lSDL -lpthread
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USE_OPENAL_FALSE = 
USE_OPENAL_TRUE = #
VERSION = 2.29
WIN32_FALSE = 
WIN32_TRUE = #
X11_FALSE = #
X11_TRUE = 
X_CFLAGS =  -I/usr/X11R6/include
X_EXTRA_LIBS = 
X_LIBS =  -L/usr/X11R6/lib
X_PRE_LIBS =  -lSM -lICE
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
b_jpeg_FALSE = 
b_jpeg_TRUE = #
b_png_FALSE = 
b_png_TRUE = #
b_sdl_FALSE = 
b_sdl_TRUE = #
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/qword/nuevo/fuentes/trabajo/blender/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
pkgpyexecdir = ${pyexecdir}/blender
pkgpythondir = ${pythondir}/blender
prefix = /usr/local
program_transform_name = s,x,x,
pyexecdir = ${exec_prefix}/lib/python2.2/site-packages
pythondir = ${prefix}/lib/python2.2/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
noinst_LTLIBRARIES = libblender_render.la

libblender_render_la_SOURCES = \
	extern/include/render.h \
	extern/include/render_types.h \
	intern/include/RE_callbacks.h \
	intern/include/edgeRender.h \
	intern/include/envmap.h \
	intern/include/errorHandler.h \
	intern/include/gammaCorrectionTables.h \
	intern/include/initrender.h \
	intern/include/jitter.h \
	intern/include/old_zbuffer_types.h \
	intern/include/outerRenderLoop.h \
	intern/include/pixelblending.h \
	intern/include/pixelblending_types.h \
	intern/include/pixelshading.h \
	intern/include/renderHelp.h \
	intern/include/renderPreAndPost.h \
	intern/include/render_intern.h \
	intern/include/rendercore.h \
	intern/include/rendercore_int.h \
	intern/include/shadbuf.h \
	intern/include/texture.h \
	intern/include/vanillaRenderPipe.h \
	intern/include/vanillaRenderPipe_int.h \
	intern/include/vanillaRenderPipe_types.h \
	intern/include/zbuf.h \
	intern/include/zbuf_int.h \
	intern/include/zbuf_types.h \
	intern/include/zbufferdatastruct.h \
	intern/include/zbufferdatastruct_types.h \
	intern/source/RE_callbacks.c \
	intern/source/edgeRender.c \
	intern/source/envmap.c \
	intern/source/errorHandler.c \
	intern/source/gammaCorrectionTables.c \
	intern/source/initrender.c \
	intern/source/jitter.c \
	intern/source/outerRenderLoop.c \
	intern/source/pixelblending.c \
	intern/source/pixelshading.c \
	intern/source/renderHelp.c \
	intern/source/renderPreAndPost.c \
	intern/source/rendercore.c \
	intern/source/renderdatabase.c \
	intern/source/shadbuf.c \
	intern/source/vanillaRenderPipe.c \
	intern/source/zbuf.c \
	intern/source/ray.c \
	intern/source/texture.c \
	intern/source/zbufferdatastruct.c


INCLUDES = -I$(top_srcdir)/source/blender/render/intern/include \
	-I$(top_srcdir)/intern/guardedalloc \
	-I$(top_srcdir)/source/blender/blenlib \
	-I$(top_srcdir)/source/blender/makesdna \
	-I$(top_srcdir)/source/blender/render/extern/include \
	-I$(top_srcdir)/source/blender/blenkernel \
	-I$(top_srcdir)/source/blender/radiosity/extern/include \
	-I$(top_srcdir)/source/blender/imbuf \
	-I$(top_srcdir)/source/blender/quicktime \
	-I$(top_srcdir)/source/blender/include \
	-I$(top_srcdir)/source/kernel/gen_messaging


EXTRA_DIST = \
	Makefile \
	intern/Makefile \
	intern/source/Makefile

subdir = source/blender/render
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)

libblender_render_la_LDFLAGS =
libblender_render_la_LIBADD =
am_libblender_render_la_OBJECTS = RE_callbacks.lo edgeRender.lo \
	envmap.lo errorHandler.lo gammaCorrectionTables.lo \
	initrender.lo jitter.lo outerRenderLoop.lo pixelblending.lo \
	pixelshading.lo renderHelp.lo renderPreAndPost.lo rendercore.lo \
	renderdatabase.lo shadbuf.lo vanillaRenderPipe.lo zbuf.lo \
	ray.lo texture.lo zbufferdatastruct.lo
libblender_render_la_OBJECTS = $(am_libblender_render_la_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/RE_callbacks.Plo \
	./$(DEPDIR)/edgeRender.Plo ./$(DEPDIR)/envmap.Plo \
	./$(DEPDIR)/errorHandler.Plo \
	./$(DEPDIR)/gammaCorrectionTables.Plo \
	./$(DEPDIR)/initrender.Plo ./$(DEPDIR)/jitter.Plo \
	./$(DEPDIR)/outerRenderLoop.Plo \
	./$(DEPDIR)/pixelblending.Plo \
	./$(DEPDIR)/pixelshading.Plo ./$(DEPDIR)/ray.Plo \
	./$(DEPDIR)/renderHelp.Plo \
	./$(DEPDIR)/renderPreAndPost.Plo \
	./$(DEPDIR)/rendercore.Plo \
	./$(DEPDIR)/renderdatabase.Plo \
	./$(DEPDIR)/shadbuf.Plo ./$(DEPDIR)/texture.Plo \
	./$(DEPDIR)/vanillaRenderPipe.Plo \
	./$(DEPDIR)/zbuf.Plo \
	./$(DEPDIR)/zbufferdatastruct.Plo
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libblender_render_la_SOURCES)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(libblender_render_la_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  source/blender/render/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libblender_render.la: $(libblender_render_la_OBJECTS) $(libblender_render_la_DEPENDENCIES) 
	$(LINK)  $(libblender_render_la_LDFLAGS) $(libblender_render_la_OBJECTS) $(libblender_render_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/RE_callbacks.Plo
include ./$(DEPDIR)/edgeRender.Plo
include ./$(DEPDIR)/envmap.Plo
include ./$(DEPDIR)/errorHandler.Plo
include ./$(DEPDIR)/gammaCorrectionTables.Plo
include ./$(DEPDIR)/initrender.Plo
include ./$(DEPDIR)/jitter.Plo
include ./$(DEPDIR)/outerRenderLoop.Plo
include ./$(DEPDIR)/pixelblending.Plo
include ./$(DEPDIR)/pixelshading.Plo
include ./$(DEPDIR)/ray.Plo
include ./$(DEPDIR)/renderHelp.Plo
include ./$(DEPDIR)/renderPreAndPost.Plo
include ./$(DEPDIR)/rendercore.Plo
include ./$(DEPDIR)/renderdatabase.Plo
include ./$(DEPDIR)/shadbuf.Plo
include ./$(DEPDIR)/texture.Plo
include ./$(DEPDIR)/vanillaRenderPipe.Plo
include ./$(DEPDIR)/zbuf.Plo
include ./$(DEPDIR)/zbufferdatastruct.Plo

distclean-depend:
	-rm -rf ./$(DEPDIR)

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

RE_callbacks.o: intern/source/RE_callbacks.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT RE_callbacks.o -MD -MP -MF "$(DEPDIR)/RE_callbacks.Tpo" \
	  -c -o RE_callbacks.o `test -f 'intern/source/RE_callbacks.c' || echo '$(srcdir)/'`intern/source/RE_callbacks.c; \
	then mv -f "$(DEPDIR)/RE_callbacks.Tpo" "$(DEPDIR)/RE_callbacks.Po"; \
	else rm -f "$(DEPDIR)/RE_callbacks.Tpo"; exit 1; \
	fi
#	source='intern/source/RE_callbacks.c' object='RE_callbacks.o' libtool=no \
#	depfile='$(DEPDIR)/RE_callbacks.Po' tmpdepfile='$(DEPDIR)/RE_callbacks.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o RE_callbacks.o `test -f 'intern/source/RE_callbacks.c' || echo '$(srcdir)/'`intern/source/RE_callbacks.c

RE_callbacks.obj: intern/source/RE_callbacks.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT RE_callbacks.obj -MD -MP -MF "$(DEPDIR)/RE_callbacks.Tpo" \
	  -c -o RE_callbacks.obj `if test -f 'intern/source/RE_callbacks.c'; then $(CYGPATH_W) 'intern/source/RE_callbacks.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/RE_callbacks.c'; fi`; \
	then mv -f "$(DEPDIR)/RE_callbacks.Tpo" "$(DEPDIR)/RE_callbacks.Po"; \
	else rm -f "$(DEPDIR)/RE_callbacks.Tpo"; exit 1; \
	fi
#	source='intern/source/RE_callbacks.c' object='RE_callbacks.obj' libtool=no \
#	depfile='$(DEPDIR)/RE_callbacks.Po' tmpdepfile='$(DEPDIR)/RE_callbacks.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o RE_callbacks.obj `if test -f 'intern/source/RE_callbacks.c'; then $(CYGPATH_W) 'intern/source/RE_callbacks.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/RE_callbacks.c'; fi`

RE_callbacks.lo: intern/source/RE_callbacks.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT RE_callbacks.lo -MD -MP -MF "$(DEPDIR)/RE_callbacks.Tpo" \
	  -c -o RE_callbacks.lo `test -f 'intern/source/RE_callbacks.c' || echo '$(srcdir)/'`intern/source/RE_callbacks.c; \
	then mv -f "$(DEPDIR)/RE_callbacks.Tpo" "$(DEPDIR)/RE_callbacks.Plo"; \
	else rm -f "$(DEPDIR)/RE_callbacks.Tpo"; exit 1; \
	fi
#	source='intern/source/RE_callbacks.c' object='RE_callbacks.lo' libtool=yes \
#	depfile='$(DEPDIR)/RE_callbacks.Plo' tmpdepfile='$(DEPDIR)/RE_callbacks.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o RE_callbacks.lo `test -f 'intern/source/RE_callbacks.c' || echo '$(srcdir)/'`intern/source/RE_callbacks.c

edgeRender.o: intern/source/edgeRender.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT edgeRender.o -MD -MP -MF "$(DEPDIR)/edgeRender.Tpo" \
	  -c -o edgeRender.o `test -f 'intern/source/edgeRender.c' || echo '$(srcdir)/'`intern/source/edgeRender.c; \
	then mv -f "$(DEPDIR)/edgeRender.Tpo" "$(DEPDIR)/edgeRender.Po"; \
	else rm -f "$(DEPDIR)/edgeRender.Tpo"; exit 1; \
	fi
#	source='intern/source/edgeRender.c' object='edgeRender.o' libtool=no \
#	depfile='$(DEPDIR)/edgeRender.Po' tmpdepfile='$(DEPDIR)/edgeRender.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o edgeRender.o `test -f 'intern/source/edgeRender.c' || echo '$(srcdir)/'`intern/source/edgeRender.c

edgeRender.obj: intern/source/edgeRender.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT edgeRender.obj -MD -MP -MF "$(DEPDIR)/edgeRender.Tpo" \
	  -c -o edgeRender.obj `if test -f 'intern/source/edgeRender.c'; then $(CYGPATH_W) 'intern/source/edgeRender.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/edgeRender.c'; fi`; \
	then mv -f "$(DEPDIR)/edgeRender.Tpo" "$(DEPDIR)/edgeRender.Po"; \
	else rm -f "$(DEPDIR)/edgeRender.Tpo"; exit 1; \
	fi
#	source='intern/source/edgeRender.c' object='edgeRender.obj' libtool=no \
#	depfile='$(DEPDIR)/edgeRender.Po' tmpdepfile='$(DEPDIR)/edgeRender.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o edgeRender.obj `if test -f 'intern/source/edgeRender.c'; then $(CYGPATH_W) 'intern/source/edgeRender.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/edgeRender.c'; fi`

edgeRender.lo: intern/source/edgeRender.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT edgeRender.lo -MD -MP -MF "$(DEPDIR)/edgeRender.Tpo" \
	  -c -o edgeRender.lo `test -f 'intern/source/edgeRender.c' || echo '$(srcdir)/'`intern/source/edgeRender.c; \
	then mv -f "$(DEPDIR)/edgeRender.Tpo" "$(DEPDIR)/edgeRender.Plo"; \
	else rm -f "$(DEPDIR)/edgeRender.Tpo"; exit 1; \
	fi
#	source='intern/source/edgeRender.c' object='edgeRender.lo' libtool=yes \
#	depfile='$(DEPDIR)/edgeRender.Plo' tmpdepfile='$(DEPDIR)/edgeRender.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o edgeRender.lo `test -f 'intern/source/edgeRender.c' || echo '$(srcdir)/'`intern/source/edgeRender.c

envmap.o: intern/source/envmap.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT envmap.o -MD -MP -MF "$(DEPDIR)/envmap.Tpo" \
	  -c -o envmap.o `test -f 'intern/source/envmap.c' || echo '$(srcdir)/'`intern/source/envmap.c; \
	then mv -f "$(DEPDIR)/envmap.Tpo" "$(DEPDIR)/envmap.Po"; \
	else rm -f "$(DEPDIR)/envmap.Tpo"; exit 1; \
	fi
#	source='intern/source/envmap.c' object='envmap.o' libtool=no \
#	depfile='$(DEPDIR)/envmap.Po' tmpdepfile='$(DEPDIR)/envmap.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o envmap.o `test -f 'intern/source/envmap.c' || echo '$(srcdir)/'`intern/source/envmap.c

envmap.obj: intern/source/envmap.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT envmap.obj -MD -MP -MF "$(DEPDIR)/envmap.Tpo" \
	  -c -o envmap.obj `if test -f 'intern/source/envmap.c'; then $(CYGPATH_W) 'intern/source/envmap.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/envmap.c'; fi`; \
	then mv -f "$(DEPDIR)/envmap.Tpo" "$(DEPDIR)/envmap.Po"; \
	else rm -f "$(DEPDIR)/envmap.Tpo"; exit 1; \
	fi
#	source='intern/source/envmap.c' object='envmap.obj' libtool=no \
#	depfile='$(DEPDIR)/envmap.Po' tmpdepfile='$(DEPDIR)/envmap.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o envmap.obj `if test -f 'intern/source/envmap.c'; then $(CYGPATH_W) 'intern/source/envmap.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/envmap.c'; fi`

envmap.lo: intern/source/envmap.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT envmap.lo -MD -MP -MF "$(DEPDIR)/envmap.Tpo" \
	  -c -o envmap.lo `test -f 'intern/source/envmap.c' || echo '$(srcdir)/'`intern/source/envmap.c; \
	then mv -f "$(DEPDIR)/envmap.Tpo" "$(DEPDIR)/envmap.Plo"; \
	else rm -f "$(DEPDIR)/envmap.Tpo"; exit 1; \
	fi
#	source='intern/source/envmap.c' object='envmap.lo' libtool=yes \
#	depfile='$(DEPDIR)/envmap.Plo' tmpdepfile='$(DEPDIR)/envmap.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o envmap.lo `test -f 'intern/source/envmap.c' || echo '$(srcdir)/'`intern/source/envmap.c

errorHandler.o: intern/source/errorHandler.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT errorHandler.o -MD -MP -MF "$(DEPDIR)/errorHandler.Tpo" \
	  -c -o errorHandler.o `test -f 'intern/source/errorHandler.c' || echo '$(srcdir)/'`intern/source/errorHandler.c; \
	then mv -f "$(DEPDIR)/errorHandler.Tpo" "$(DEPDIR)/errorHandler.Po"; \
	else rm -f "$(DEPDIR)/errorHandler.Tpo"; exit 1; \
	fi
#	source='intern/source/errorHandler.c' object='errorHandler.o' libtool=no \
#	depfile='$(DEPDIR)/errorHandler.Po' tmpdepfile='$(DEPDIR)/errorHandler.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o errorHandler.o `test -f 'intern/source/errorHandler.c' || echo '$(srcdir)/'`intern/source/errorHandler.c

errorHandler.obj: intern/source/errorHandler.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT errorHandler.obj -MD -MP -MF "$(DEPDIR)/errorHandler.Tpo" \
	  -c -o errorHandler.obj `if test -f 'intern/source/errorHandler.c'; then $(CYGPATH_W) 'intern/source/errorHandler.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/errorHandler.c'; fi`; \
	then mv -f "$(DEPDIR)/errorHandler.Tpo" "$(DEPDIR)/errorHandler.Po"; \
	else rm -f "$(DEPDIR)/errorHandler.Tpo"; exit 1; \
	fi
#	source='intern/source/errorHandler.c' object='errorHandler.obj' libtool=no \
#	depfile='$(DEPDIR)/errorHandler.Po' tmpdepfile='$(DEPDIR)/errorHandler.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o errorHandler.obj `if test -f 'intern/source/errorHandler.c'; then $(CYGPATH_W) 'intern/source/errorHandler.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/errorHandler.c'; fi`

errorHandler.lo: intern/source/errorHandler.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT errorHandler.lo -MD -MP -MF "$(DEPDIR)/errorHandler.Tpo" \
	  -c -o errorHandler.lo `test -f 'intern/source/errorHandler.c' || echo '$(srcdir)/'`intern/source/errorHandler.c; \
	then mv -f "$(DEPDIR)/errorHandler.Tpo" "$(DEPDIR)/errorHandler.Plo"; \
	else rm -f "$(DEPDIR)/errorHandler.Tpo"; exit 1; \
	fi
#	source='intern/source/errorHandler.c' object='errorHandler.lo' libtool=yes \
#	depfile='$(DEPDIR)/errorHandler.Plo' tmpdepfile='$(DEPDIR)/errorHandler.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o errorHandler.lo `test -f 'intern/source/errorHandler.c' || echo '$(srcdir)/'`intern/source/errorHandler.c

gammaCorrectionTables.o: intern/source/gammaCorrectionTables.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT gammaCorrectionTables.o -MD -MP -MF "$(DEPDIR)/gammaCorrectionTables.Tpo" \
	  -c -o gammaCorrectionTables.o `test -f 'intern/source/gammaCorrectionTables.c' || echo '$(srcdir)/'`intern/source/gammaCorrectionTables.c; \
	then mv -f "$(DEPDIR)/gammaCorrectionTables.Tpo" "$(DEPDIR)/gammaCorrectionTables.Po"; \
	else rm -f "$(DEPDIR)/gammaCorrectionTables.Tpo"; exit 1; \
	fi
#	source='intern/source/gammaCorrectionTables.c' object='gammaCorrectionTables.o' libtool=no \
#	depfile='$(DEPDIR)/gammaCorrectionTables.Po' tmpdepfile='$(DEPDIR)/gammaCorrectionTables.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o gammaCorrectionTables.o `test -f 'intern/source/gammaCorrectionTables.c' || echo '$(srcdir)/'`intern/source/gammaCorrectionTables.c

gammaCorrectionTables.obj: intern/source/gammaCorrectionTables.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT gammaCorrectionTables.obj -MD -MP -MF "$(DEPDIR)/gammaCorrectionTables.Tpo" \
	  -c -o gammaCorrectionTables.obj `if test -f 'intern/source/gammaCorrectionTables.c'; then $(CYGPATH_W) 'intern/source/gammaCorrectionTables.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/gammaCorrectionTables.c'; fi`; \
	then mv -f "$(DEPDIR)/gammaCorrectionTables.Tpo" "$(DEPDIR)/gammaCorrectionTables.Po"; \
	else rm -f "$(DEPDIR)/gammaCorrectionTables.Tpo"; exit 1; \
	fi
#	source='intern/source/gammaCorrectionTables.c' object='gammaCorrectionTables.obj' libtool=no \
#	depfile='$(DEPDIR)/gammaCorrectionTables.Po' tmpdepfile='$(DEPDIR)/gammaCorrectionTables.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o gammaCorrectionTables.obj `if test -f 'intern/source/gammaCorrectionTables.c'; then $(CYGPATH_W) 'intern/source/gammaCorrectionTables.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/gammaCorrectionTables.c'; fi`

gammaCorrectionTables.lo: intern/source/gammaCorrectionTables.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT gammaCorrectionTables.lo -MD -MP -MF "$(DEPDIR)/gammaCorrectionTables.Tpo" \
	  -c -o gammaCorrectionTables.lo `test -f 'intern/source/gammaCorrectionTables.c' || echo '$(srcdir)/'`intern/source/gammaCorrectionTables.c; \
	then mv -f "$(DEPDIR)/gammaCorrectionTables.Tpo" "$(DEPDIR)/gammaCorrectionTables.Plo"; \
	else rm -f "$(DEPDIR)/gammaCorrectionTables.Tpo"; exit 1; \
	fi
#	source='intern/source/gammaCorrectionTables.c' object='gammaCorrectionTables.lo' libtool=yes \
#	depfile='$(DEPDIR)/gammaCorrectionTables.Plo' tmpdepfile='$(DEPDIR)/gammaCorrectionTables.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o gammaCorrectionTables.lo `test -f 'intern/source/gammaCorrectionTables.c' || echo '$(srcdir)/'`intern/source/gammaCorrectionTables.c

initrender.o: intern/source/initrender.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT initrender.o -MD -MP -MF "$(DEPDIR)/initrender.Tpo" \
	  -c -o initrender.o `test -f 'intern/source/initrender.c' || echo '$(srcdir)/'`intern/source/initrender.c; \
	then mv -f "$(DEPDIR)/initrender.Tpo" "$(DEPDIR)/initrender.Po"; \
	else rm -f "$(DEPDIR)/initrender.Tpo"; exit 1; \
	fi
#	source='intern/source/initrender.c' object='initrender.o' libtool=no \
#	depfile='$(DEPDIR)/initrender.Po' tmpdepfile='$(DEPDIR)/initrender.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o initrender.o `test -f 'intern/source/initrender.c' || echo '$(srcdir)/'`intern/source/initrender.c

initrender.obj: intern/source/initrender.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT initrender.obj -MD -MP -MF "$(DEPDIR)/initrender.Tpo" \
	  -c -o initrender.obj `if test -f 'intern/source/initrender.c'; then $(CYGPATH_W) 'intern/source/initrender.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/initrender.c'; fi`; \
	then mv -f "$(DEPDIR)/initrender.Tpo" "$(DEPDIR)/initrender.Po"; \
	else rm -f "$(DEPDIR)/initrender.Tpo"; exit 1; \
	fi
#	source='intern/source/initrender.c' object='initrender.obj' libtool=no \
#	depfile='$(DEPDIR)/initrender.Po' tmpdepfile='$(DEPDIR)/initrender.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o initrender.obj `if test -f 'intern/source/initrender.c'; then $(CYGPATH_W) 'intern/source/initrender.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/initrender.c'; fi`

initrender.lo: intern/source/initrender.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT initrender.lo -MD -MP -MF "$(DEPDIR)/initrender.Tpo" \
	  -c -o initrender.lo `test -f 'intern/source/initrender.c' || echo '$(srcdir)/'`intern/source/initrender.c; \
	then mv -f "$(DEPDIR)/initrender.Tpo" "$(DEPDIR)/initrender.Plo"; \
	else rm -f "$(DEPDIR)/initrender.Tpo"; exit 1; \
	fi
#	source='intern/source/initrender.c' object='initrender.lo' libtool=yes \
#	depfile='$(DEPDIR)/initrender.Plo' tmpdepfile='$(DEPDIR)/initrender.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o initrender.lo `test -f 'intern/source/initrender.c' || echo '$(srcdir)/'`intern/source/initrender.c

jitter.o: intern/source/jitter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT jitter.o -MD -MP -MF "$(DEPDIR)/jitter.Tpo" \
	  -c -o jitter.o `test -f 'intern/source/jitter.c' || echo '$(srcdir)/'`intern/source/jitter.c; \
	then mv -f "$(DEPDIR)/jitter.Tpo" "$(DEPDIR)/jitter.Po"; \
	else rm -f "$(DEPDIR)/jitter.Tpo"; exit 1; \
	fi
#	source='intern/source/jitter.c' object='jitter.o' libtool=no \
#	depfile='$(DEPDIR)/jitter.Po' tmpdepfile='$(DEPDIR)/jitter.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o jitter.o `test -f 'intern/source/jitter.c' || echo '$(srcdir)/'`intern/source/jitter.c

jitter.obj: intern/source/jitter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT jitter.obj -MD -MP -MF "$(DEPDIR)/jitter.Tpo" \
	  -c -o jitter.obj `if test -f 'intern/source/jitter.c'; then $(CYGPATH_W) 'intern/source/jitter.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/jitter.c'; fi`; \
	then mv -f "$(DEPDIR)/jitter.Tpo" "$(DEPDIR)/jitter.Po"; \
	else rm -f "$(DEPDIR)/jitter.Tpo"; exit 1; \
	fi
#	source='intern/source/jitter.c' object='jitter.obj' libtool=no \
#	depfile='$(DEPDIR)/jitter.Po' tmpdepfile='$(DEPDIR)/jitter.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o jitter.obj `if test -f 'intern/source/jitter.c'; then $(CYGPATH_W) 'intern/source/jitter.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/jitter.c'; fi`

jitter.lo: intern/source/jitter.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT jitter.lo -MD -MP -MF "$(DEPDIR)/jitter.Tpo" \
	  -c -o jitter.lo `test -f 'intern/source/jitter.c' || echo '$(srcdir)/'`intern/source/jitter.c; \
	then mv -f "$(DEPDIR)/jitter.Tpo" "$(DEPDIR)/jitter.Plo"; \
	else rm -f "$(DEPDIR)/jitter.Tpo"; exit 1; \
	fi
#	source='intern/source/jitter.c' object='jitter.lo' libtool=yes \
#	depfile='$(DEPDIR)/jitter.Plo' tmpdepfile='$(DEPDIR)/jitter.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o jitter.lo `test -f 'intern/source/jitter.c' || echo '$(srcdir)/'`intern/source/jitter.c

outerRenderLoop.o: intern/source/outerRenderLoop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT outerRenderLoop.o -MD -MP -MF "$(DEPDIR)/outerRenderLoop.Tpo" \
	  -c -o outerRenderLoop.o `test -f 'intern/source/outerRenderLoop.c' || echo '$(srcdir)/'`intern/source/outerRenderLoop.c; \
	then mv -f "$(DEPDIR)/outerRenderLoop.Tpo" "$(DEPDIR)/outerRenderLoop.Po"; \
	else rm -f "$(DEPDIR)/outerRenderLoop.Tpo"; exit 1; \
	fi
#	source='intern/source/outerRenderLoop.c' object='outerRenderLoop.o' libtool=no \
#	depfile='$(DEPDIR)/outerRenderLoop.Po' tmpdepfile='$(DEPDIR)/outerRenderLoop.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o outerRenderLoop.o `test -f 'intern/source/outerRenderLoop.c' || echo '$(srcdir)/'`intern/source/outerRenderLoop.c

outerRenderLoop.obj: intern/source/outerRenderLoop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT outerRenderLoop.obj -MD -MP -MF "$(DEPDIR)/outerRenderLoop.Tpo" \
	  -c -o outerRenderLoop.obj `if test -f 'intern/source/outerRenderLoop.c'; then $(CYGPATH_W) 'intern/source/outerRenderLoop.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/outerRenderLoop.c'; fi`; \
	then mv -f "$(DEPDIR)/outerRenderLoop.Tpo" "$(DEPDIR)/outerRenderLoop.Po"; \
	else rm -f "$(DEPDIR)/outerRenderLoop.Tpo"; exit 1; \
	fi
#	source='intern/source/outerRenderLoop.c' object='outerRenderLoop.obj' libtool=no \
#	depfile='$(DEPDIR)/outerRenderLoop.Po' tmpdepfile='$(DEPDIR)/outerRenderLoop.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o outerRenderLoop.obj `if test -f 'intern/source/outerRenderLoop.c'; then $(CYGPATH_W) 'intern/source/outerRenderLoop.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/outerRenderLoop.c'; fi`

outerRenderLoop.lo: intern/source/outerRenderLoop.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT outerRenderLoop.lo -MD -MP -MF "$(DEPDIR)/outerRenderLoop.Tpo" \
	  -c -o outerRenderLoop.lo `test -f 'intern/source/outerRenderLoop.c' || echo '$(srcdir)/'`intern/source/outerRenderLoop.c; \
	then mv -f "$(DEPDIR)/outerRenderLoop.Tpo" "$(DEPDIR)/outerRenderLoop.Plo"; \
	else rm -f "$(DEPDIR)/outerRenderLoop.Tpo"; exit 1; \
	fi
#	source='intern/source/outerRenderLoop.c' object='outerRenderLoop.lo' libtool=yes \
#	depfile='$(DEPDIR)/outerRenderLoop.Plo' tmpdepfile='$(DEPDIR)/outerRenderLoop.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o outerRenderLoop.lo `test -f 'intern/source/outerRenderLoop.c' || echo '$(srcdir)/'`intern/source/outerRenderLoop.c

pixelblending.o: intern/source/pixelblending.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pixelblending.o -MD -MP -MF "$(DEPDIR)/pixelblending.Tpo" \
	  -c -o pixelblending.o `test -f 'intern/source/pixelblending.c' || echo '$(srcdir)/'`intern/source/pixelblending.c; \
	then mv -f "$(DEPDIR)/pixelblending.Tpo" "$(DEPDIR)/pixelblending.Po"; \
	else rm -f "$(DEPDIR)/pixelblending.Tpo"; exit 1; \
	fi
#	source='intern/source/pixelblending.c' object='pixelblending.o' libtool=no \
#	depfile='$(DEPDIR)/pixelblending.Po' tmpdepfile='$(DEPDIR)/pixelblending.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pixelblending.o `test -f 'intern/source/pixelblending.c' || echo '$(srcdir)/'`intern/source/pixelblending.c

pixelblending.obj: intern/source/pixelblending.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pixelblending.obj -MD -MP -MF "$(DEPDIR)/pixelblending.Tpo" \
	  -c -o pixelblending.obj `if test -f 'intern/source/pixelblending.c'; then $(CYGPATH_W) 'intern/source/pixelblending.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/pixelblending.c'; fi`; \
	then mv -f "$(DEPDIR)/pixelblending.Tpo" "$(DEPDIR)/pixelblending.Po"; \
	else rm -f "$(DEPDIR)/pixelblending.Tpo"; exit 1; \
	fi
#	source='intern/source/pixelblending.c' object='pixelblending.obj' libtool=no \
#	depfile='$(DEPDIR)/pixelblending.Po' tmpdepfile='$(DEPDIR)/pixelblending.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pixelblending.obj `if test -f 'intern/source/pixelblending.c'; then $(CYGPATH_W) 'intern/source/pixelblending.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/pixelblending.c'; fi`

pixelblending.lo: intern/source/pixelblending.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pixelblending.lo -MD -MP -MF "$(DEPDIR)/pixelblending.Tpo" \
	  -c -o pixelblending.lo `test -f 'intern/source/pixelblending.c' || echo '$(srcdir)/'`intern/source/pixelblending.c; \
	then mv -f "$(DEPDIR)/pixelblending.Tpo" "$(DEPDIR)/pixelblending.Plo"; \
	else rm -f "$(DEPDIR)/pixelblending.Tpo"; exit 1; \
	fi
#	source='intern/source/pixelblending.c' object='pixelblending.lo' libtool=yes \
#	depfile='$(DEPDIR)/pixelblending.Plo' tmpdepfile='$(DEPDIR)/pixelblending.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pixelblending.lo `test -f 'intern/source/pixelblending.c' || echo '$(srcdir)/'`intern/source/pixelblending.c

pixelshading.o: intern/source/pixelshading.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pixelshading.o -MD -MP -MF "$(DEPDIR)/pixelshading.Tpo" \
	  -c -o pixelshading.o `test -f 'intern/source/pixelshading.c' || echo '$(srcdir)/'`intern/source/pixelshading.c; \
	then mv -f "$(DEPDIR)/pixelshading.Tpo" "$(DEPDIR)/pixelshading.Po"; \
	else rm -f "$(DEPDIR)/pixelshading.Tpo"; exit 1; \
	fi
#	source='intern/source/pixelshading.c' object='pixelshading.o' libtool=no \
#	depfile='$(DEPDIR)/pixelshading.Po' tmpdepfile='$(DEPDIR)/pixelshading.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pixelshading.o `test -f 'intern/source/pixelshading.c' || echo '$(srcdir)/'`intern/source/pixelshading.c

pixelshading.obj: intern/source/pixelshading.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pixelshading.obj -MD -MP -MF "$(DEPDIR)/pixelshading.Tpo" \
	  -c -o pixelshading.obj `if test -f 'intern/source/pixelshading.c'; then $(CYGPATH_W) 'intern/source/pixelshading.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/pixelshading.c'; fi`; \
	then mv -f "$(DEPDIR)/pixelshading.Tpo" "$(DEPDIR)/pixelshading.Po"; \
	else rm -f "$(DEPDIR)/pixelshading.Tpo"; exit 1; \
	fi
#	source='intern/source/pixelshading.c' object='pixelshading.obj' libtool=no \
#	depfile='$(DEPDIR)/pixelshading.Po' tmpdepfile='$(DEPDIR)/pixelshading.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pixelshading.obj `if test -f 'intern/source/pixelshading.c'; then $(CYGPATH_W) 'intern/source/pixelshading.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/pixelshading.c'; fi`

pixelshading.lo: intern/source/pixelshading.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pixelshading.lo -MD -MP -MF "$(DEPDIR)/pixelshading.Tpo" \
	  -c -o pixelshading.lo `test -f 'intern/source/pixelshading.c' || echo '$(srcdir)/'`intern/source/pixelshading.c; \
	then mv -f "$(DEPDIR)/pixelshading.Tpo" "$(DEPDIR)/pixelshading.Plo"; \
	else rm -f "$(DEPDIR)/pixelshading.Tpo"; exit 1; \
	fi
#	source='intern/source/pixelshading.c' object='pixelshading.lo' libtool=yes \
#	depfile='$(DEPDIR)/pixelshading.Plo' tmpdepfile='$(DEPDIR)/pixelshading.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pixelshading.lo `test -f 'intern/source/pixelshading.c' || echo '$(srcdir)/'`intern/source/pixelshading.c

renderHelp.o: intern/source/renderHelp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderHelp.o -MD -MP -MF "$(DEPDIR)/renderHelp.Tpo" \
	  -c -o renderHelp.o `test -f 'intern/source/renderHelp.c' || echo '$(srcdir)/'`intern/source/renderHelp.c; \
	then mv -f "$(DEPDIR)/renderHelp.Tpo" "$(DEPDIR)/renderHelp.Po"; \
	else rm -f "$(DEPDIR)/renderHelp.Tpo"; exit 1; \
	fi
#	source='intern/source/renderHelp.c' object='renderHelp.o' libtool=no \
#	depfile='$(DEPDIR)/renderHelp.Po' tmpdepfile='$(DEPDIR)/renderHelp.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderHelp.o `test -f 'intern/source/renderHelp.c' || echo '$(srcdir)/'`intern/source/renderHelp.c

renderHelp.obj: intern/source/renderHelp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderHelp.obj -MD -MP -MF "$(DEPDIR)/renderHelp.Tpo" \
	  -c -o renderHelp.obj `if test -f 'intern/source/renderHelp.c'; then $(CYGPATH_W) 'intern/source/renderHelp.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/renderHelp.c'; fi`; \
	then mv -f "$(DEPDIR)/renderHelp.Tpo" "$(DEPDIR)/renderHelp.Po"; \
	else rm -f "$(DEPDIR)/renderHelp.Tpo"; exit 1; \
	fi
#	source='intern/source/renderHelp.c' object='renderHelp.obj' libtool=no \
#	depfile='$(DEPDIR)/renderHelp.Po' tmpdepfile='$(DEPDIR)/renderHelp.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderHelp.obj `if test -f 'intern/source/renderHelp.c'; then $(CYGPATH_W) 'intern/source/renderHelp.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/renderHelp.c'; fi`

renderHelp.lo: intern/source/renderHelp.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderHelp.lo -MD -MP -MF "$(DEPDIR)/renderHelp.Tpo" \
	  -c -o renderHelp.lo `test -f 'intern/source/renderHelp.c' || echo '$(srcdir)/'`intern/source/renderHelp.c; \
	then mv -f "$(DEPDIR)/renderHelp.Tpo" "$(DEPDIR)/renderHelp.Plo"; \
	else rm -f "$(DEPDIR)/renderHelp.Tpo"; exit 1; \
	fi
#	source='intern/source/renderHelp.c' object='renderHelp.lo' libtool=yes \
#	depfile='$(DEPDIR)/renderHelp.Plo' tmpdepfile='$(DEPDIR)/renderHelp.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderHelp.lo `test -f 'intern/source/renderHelp.c' || echo '$(srcdir)/'`intern/source/renderHelp.c

renderPreAndPost.o: intern/source/renderPreAndPost.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderPreAndPost.o -MD -MP -MF "$(DEPDIR)/renderPreAndPost.Tpo" \
	  -c -o renderPreAndPost.o `test -f 'intern/source/renderPreAndPost.c' || echo '$(srcdir)/'`intern/source/renderPreAndPost.c; \
	then mv -f "$(DEPDIR)/renderPreAndPost.Tpo" "$(DEPDIR)/renderPreAndPost.Po"; \
	else rm -f "$(DEPDIR)/renderPreAndPost.Tpo"; exit 1; \
	fi
#	source='intern/source/renderPreAndPost.c' object='renderPreAndPost.o' libtool=no \
#	depfile='$(DEPDIR)/renderPreAndPost.Po' tmpdepfile='$(DEPDIR)/renderPreAndPost.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderPreAndPost.o `test -f 'intern/source/renderPreAndPost.c' || echo '$(srcdir)/'`intern/source/renderPreAndPost.c

renderPreAndPost.obj: intern/source/renderPreAndPost.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderPreAndPost.obj -MD -MP -MF "$(DEPDIR)/renderPreAndPost.Tpo" \
	  -c -o renderPreAndPost.obj `if test -f 'intern/source/renderPreAndPost.c'; then $(CYGPATH_W) 'intern/source/renderPreAndPost.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/renderPreAndPost.c'; fi`; \
	then mv -f "$(DEPDIR)/renderPreAndPost.Tpo" "$(DEPDIR)/renderPreAndPost.Po"; \
	else rm -f "$(DEPDIR)/renderPreAndPost.Tpo"; exit 1; \
	fi
#	source='intern/source/renderPreAndPost.c' object='renderPreAndPost.obj' libtool=no \
#	depfile='$(DEPDIR)/renderPreAndPost.Po' tmpdepfile='$(DEPDIR)/renderPreAndPost.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderPreAndPost.obj `if test -f 'intern/source/renderPreAndPost.c'; then $(CYGPATH_W) 'intern/source/renderPreAndPost.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/renderPreAndPost.c'; fi`

renderPreAndPost.lo: intern/source/renderPreAndPost.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderPreAndPost.lo -MD -MP -MF "$(DEPDIR)/renderPreAndPost.Tpo" \
	  -c -o renderPreAndPost.lo `test -f 'intern/source/renderPreAndPost.c' || echo '$(srcdir)/'`intern/source/renderPreAndPost.c; \
	then mv -f "$(DEPDIR)/renderPreAndPost.Tpo" "$(DEPDIR)/renderPreAndPost.Plo"; \
	else rm -f "$(DEPDIR)/renderPreAndPost.Tpo"; exit 1; \
	fi
#	source='intern/source/renderPreAndPost.c' object='renderPreAndPost.lo' libtool=yes \
#	depfile='$(DEPDIR)/renderPreAndPost.Plo' tmpdepfile='$(DEPDIR)/renderPreAndPost.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderPreAndPost.lo `test -f 'intern/source/renderPreAndPost.c' || echo '$(srcdir)/'`intern/source/renderPreAndPost.c

rendercore.o: intern/source/rendercore.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT rendercore.o -MD -MP -MF "$(DEPDIR)/rendercore.Tpo" \
	  -c -o rendercore.o `test -f 'intern/source/rendercore.c' || echo '$(srcdir)/'`intern/source/rendercore.c; \
	then mv -f "$(DEPDIR)/rendercore.Tpo" "$(DEPDIR)/rendercore.Po"; \
	else rm -f "$(DEPDIR)/rendercore.Tpo"; exit 1; \
	fi
#	source='intern/source/rendercore.c' object='rendercore.o' libtool=no \
#	depfile='$(DEPDIR)/rendercore.Po' tmpdepfile='$(DEPDIR)/rendercore.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rendercore.o `test -f 'intern/source/rendercore.c' || echo '$(srcdir)/'`intern/source/rendercore.c

rendercore.obj: intern/source/rendercore.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT rendercore.obj -MD -MP -MF "$(DEPDIR)/rendercore.Tpo" \
	  -c -o rendercore.obj `if test -f 'intern/source/rendercore.c'; then $(CYGPATH_W) 'intern/source/rendercore.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/rendercore.c'; fi`; \
	then mv -f "$(DEPDIR)/rendercore.Tpo" "$(DEPDIR)/rendercore.Po"; \
	else rm -f "$(DEPDIR)/rendercore.Tpo"; exit 1; \
	fi
#	source='intern/source/rendercore.c' object='rendercore.obj' libtool=no \
#	depfile='$(DEPDIR)/rendercore.Po' tmpdepfile='$(DEPDIR)/rendercore.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rendercore.obj `if test -f 'intern/source/rendercore.c'; then $(CYGPATH_W) 'intern/source/rendercore.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/rendercore.c'; fi`

rendercore.lo: intern/source/rendercore.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT rendercore.lo -MD -MP -MF "$(DEPDIR)/rendercore.Tpo" \
	  -c -o rendercore.lo `test -f 'intern/source/rendercore.c' || echo '$(srcdir)/'`intern/source/rendercore.c; \
	then mv -f "$(DEPDIR)/rendercore.Tpo" "$(DEPDIR)/rendercore.Plo"; \
	else rm -f "$(DEPDIR)/rendercore.Tpo"; exit 1; \
	fi
#	source='intern/source/rendercore.c' object='rendercore.lo' libtool=yes \
#	depfile='$(DEPDIR)/rendercore.Plo' tmpdepfile='$(DEPDIR)/rendercore.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rendercore.lo `test -f 'intern/source/rendercore.c' || echo '$(srcdir)/'`intern/source/rendercore.c

renderdatabase.o: intern/source/renderdatabase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderdatabase.o -MD -MP -MF "$(DEPDIR)/renderdatabase.Tpo" \
	  -c -o renderdatabase.o `test -f 'intern/source/renderdatabase.c' || echo '$(srcdir)/'`intern/source/renderdatabase.c; \
	then mv -f "$(DEPDIR)/renderdatabase.Tpo" "$(DEPDIR)/renderdatabase.Po"; \
	else rm -f "$(DEPDIR)/renderdatabase.Tpo"; exit 1; \
	fi
#	source='intern/source/renderdatabase.c' object='renderdatabase.o' libtool=no \
#	depfile='$(DEPDIR)/renderdatabase.Po' tmpdepfile='$(DEPDIR)/renderdatabase.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderdatabase.o `test -f 'intern/source/renderdatabase.c' || echo '$(srcdir)/'`intern/source/renderdatabase.c

renderdatabase.obj: intern/source/renderdatabase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderdatabase.obj -MD -MP -MF "$(DEPDIR)/renderdatabase.Tpo" \
	  -c -o renderdatabase.obj `if test -f 'intern/source/renderdatabase.c'; then $(CYGPATH_W) 'intern/source/renderdatabase.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/renderdatabase.c'; fi`; \
	then mv -f "$(DEPDIR)/renderdatabase.Tpo" "$(DEPDIR)/renderdatabase.Po"; \
	else rm -f "$(DEPDIR)/renderdatabase.Tpo"; exit 1; \
	fi
#	source='intern/source/renderdatabase.c' object='renderdatabase.obj' libtool=no \
#	depfile='$(DEPDIR)/renderdatabase.Po' tmpdepfile='$(DEPDIR)/renderdatabase.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderdatabase.obj `if test -f 'intern/source/renderdatabase.c'; then $(CYGPATH_W) 'intern/source/renderdatabase.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/renderdatabase.c'; fi`

renderdatabase.lo: intern/source/renderdatabase.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT renderdatabase.lo -MD -MP -MF "$(DEPDIR)/renderdatabase.Tpo" \
	  -c -o renderdatabase.lo `test -f 'intern/source/renderdatabase.c' || echo '$(srcdir)/'`intern/source/renderdatabase.c; \
	then mv -f "$(DEPDIR)/renderdatabase.Tpo" "$(DEPDIR)/renderdatabase.Plo"; \
	else rm -f "$(DEPDIR)/renderdatabase.Tpo"; exit 1; \
	fi
#	source='intern/source/renderdatabase.c' object='renderdatabase.lo' libtool=yes \
#	depfile='$(DEPDIR)/renderdatabase.Plo' tmpdepfile='$(DEPDIR)/renderdatabase.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o renderdatabase.lo `test -f 'intern/source/renderdatabase.c' || echo '$(srcdir)/'`intern/source/renderdatabase.c

shadbuf.o: intern/source/shadbuf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT shadbuf.o -MD -MP -MF "$(DEPDIR)/shadbuf.Tpo" \
	  -c -o shadbuf.o `test -f 'intern/source/shadbuf.c' || echo '$(srcdir)/'`intern/source/shadbuf.c; \
	then mv -f "$(DEPDIR)/shadbuf.Tpo" "$(DEPDIR)/shadbuf.Po"; \
	else rm -f "$(DEPDIR)/shadbuf.Tpo"; exit 1; \
	fi
#	source='intern/source/shadbuf.c' object='shadbuf.o' libtool=no \
#	depfile='$(DEPDIR)/shadbuf.Po' tmpdepfile='$(DEPDIR)/shadbuf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o shadbuf.o `test -f 'intern/source/shadbuf.c' || echo '$(srcdir)/'`intern/source/shadbuf.c

shadbuf.obj: intern/source/shadbuf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT shadbuf.obj -MD -MP -MF "$(DEPDIR)/shadbuf.Tpo" \
	  -c -o shadbuf.obj `if test -f 'intern/source/shadbuf.c'; then $(CYGPATH_W) 'intern/source/shadbuf.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/shadbuf.c'; fi`; \
	then mv -f "$(DEPDIR)/shadbuf.Tpo" "$(DEPDIR)/shadbuf.Po"; \
	else rm -f "$(DEPDIR)/shadbuf.Tpo"; exit 1; \
	fi
#	source='intern/source/shadbuf.c' object='shadbuf.obj' libtool=no \
#	depfile='$(DEPDIR)/shadbuf.Po' tmpdepfile='$(DEPDIR)/shadbuf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o shadbuf.obj `if test -f 'intern/source/shadbuf.c'; then $(CYGPATH_W) 'intern/source/shadbuf.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/shadbuf.c'; fi`

shadbuf.lo: intern/source/shadbuf.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT shadbuf.lo -MD -MP -MF "$(DEPDIR)/shadbuf.Tpo" \
	  -c -o shadbuf.lo `test -f 'intern/source/shadbuf.c' || echo '$(srcdir)/'`intern/source/shadbuf.c; \
	then mv -f "$(DEPDIR)/shadbuf.Tpo" "$(DEPDIR)/shadbuf.Plo"; \
	else rm -f "$(DEPDIR)/shadbuf.Tpo"; exit 1; \
	fi
#	source='intern/source/shadbuf.c' object='shadbuf.lo' libtool=yes \
#	depfile='$(DEPDIR)/shadbuf.Plo' tmpdepfile='$(DEPDIR)/shadbuf.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o shadbuf.lo `test -f 'intern/source/shadbuf.c' || echo '$(srcdir)/'`intern/source/shadbuf.c

vanillaRenderPipe.o: intern/source/vanillaRenderPipe.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vanillaRenderPipe.o -MD -MP -MF "$(DEPDIR)/vanillaRenderPipe.Tpo" \
	  -c -o vanillaRenderPipe.o `test -f 'intern/source/vanillaRenderPipe.c' || echo '$(srcdir)/'`intern/source/vanillaRenderPipe.c; \
	then mv -f "$(DEPDIR)/vanillaRenderPipe.Tpo" "$(DEPDIR)/vanillaRenderPipe.Po"; \
	else rm -f "$(DEPDIR)/vanillaRenderPipe.Tpo"; exit 1; \
	fi
#	source='intern/source/vanillaRenderPipe.c' object='vanillaRenderPipe.o' libtool=no \
#	depfile='$(DEPDIR)/vanillaRenderPipe.Po' tmpdepfile='$(DEPDIR)/vanillaRenderPipe.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vanillaRenderPipe.o `test -f 'intern/source/vanillaRenderPipe.c' || echo '$(srcdir)/'`intern/source/vanillaRenderPipe.c

vanillaRenderPipe.obj: intern/source/vanillaRenderPipe.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vanillaRenderPipe.obj -MD -MP -MF "$(DEPDIR)/vanillaRenderPipe.Tpo" \
	  -c -o vanillaRenderPipe.obj `if test -f 'intern/source/vanillaRenderPipe.c'; then $(CYGPATH_W) 'intern/source/vanillaRenderPipe.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/vanillaRenderPipe.c'; fi`; \
	then mv -f "$(DEPDIR)/vanillaRenderPipe.Tpo" "$(DEPDIR)/vanillaRenderPipe.Po"; \
	else rm -f "$(DEPDIR)/vanillaRenderPipe.Tpo"; exit 1; \
	fi
#	source='intern/source/vanillaRenderPipe.c' object='vanillaRenderPipe.obj' libtool=no \
#	depfile='$(DEPDIR)/vanillaRenderPipe.Po' tmpdepfile='$(DEPDIR)/vanillaRenderPipe.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vanillaRenderPipe.obj `if test -f 'intern/source/vanillaRenderPipe.c'; then $(CYGPATH_W) 'intern/source/vanillaRenderPipe.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/vanillaRenderPipe.c'; fi`

vanillaRenderPipe.lo: intern/source/vanillaRenderPipe.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vanillaRenderPipe.lo -MD -MP -MF "$(DEPDIR)/vanillaRenderPipe.Tpo" \
	  -c -o vanillaRenderPipe.lo `test -f 'intern/source/vanillaRenderPipe.c' || echo '$(srcdir)/'`intern/source/vanillaRenderPipe.c; \
	then mv -f "$(DEPDIR)/vanillaRenderPipe.Tpo" "$(DEPDIR)/vanillaRenderPipe.Plo"; \
	else rm -f "$(DEPDIR)/vanillaRenderPipe.Tpo"; exit 1; \
	fi
#	source='intern/source/vanillaRenderPipe.c' object='vanillaRenderPipe.lo' libtool=yes \
#	depfile='$(DEPDIR)/vanillaRenderPipe.Plo' tmpdepfile='$(DEPDIR)/vanillaRenderPipe.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vanillaRenderPipe.lo `test -f 'intern/source/vanillaRenderPipe.c' || echo '$(srcdir)/'`intern/source/vanillaRenderPipe.c

zbuf.o: intern/source/zbuf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT zbuf.o -MD -MP -MF "$(DEPDIR)/zbuf.Tpo" \
	  -c -o zbuf.o `test -f 'intern/source/zbuf.c' || echo '$(srcdir)/'`intern/source/zbuf.c; \
	then mv -f "$(DEPDIR)/zbuf.Tpo" "$(DEPDIR)/zbuf.Po"; \
	else rm -f "$(DEPDIR)/zbuf.Tpo"; exit 1; \
	fi
#	source='intern/source/zbuf.c' object='zbuf.o' libtool=no \
#	depfile='$(DEPDIR)/zbuf.Po' tmpdepfile='$(DEPDIR)/zbuf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o zbuf.o `test -f 'intern/source/zbuf.c' || echo '$(srcdir)/'`intern/source/zbuf.c

zbuf.obj: intern/source/zbuf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT zbuf.obj -MD -MP -MF "$(DEPDIR)/zbuf.Tpo" \
	  -c -o zbuf.obj `if test -f 'intern/source/zbuf.c'; then $(CYGPATH_W) 'intern/source/zbuf.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/zbuf.c'; fi`; \
	then mv -f "$(DEPDIR)/zbuf.Tpo" "$(DEPDIR)/zbuf.Po"; \
	else rm -f "$(DEPDIR)/zbuf.Tpo"; exit 1; \
	fi
#	source='intern/source/zbuf.c' object='zbuf.obj' libtool=no \
#	depfile='$(DEPDIR)/zbuf.Po' tmpdepfile='$(DEPDIR)/zbuf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o zbuf.obj `if test -f 'intern/source/zbuf.c'; then $(CYGPATH_W) 'intern/source/zbuf.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/zbuf.c'; fi`

zbuf.lo: intern/source/zbuf.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT zbuf.lo -MD -MP -MF "$(DEPDIR)/zbuf.Tpo" \
	  -c -o zbuf.lo `test -f 'intern/source/zbuf.c' || echo '$(srcdir)/'`intern/source/zbuf.c; \
	then mv -f "$(DEPDIR)/zbuf.Tpo" "$(DEPDIR)/zbuf.Plo"; \
	else rm -f "$(DEPDIR)/zbuf.Tpo"; exit 1; \
	fi
#	source='intern/source/zbuf.c' object='zbuf.lo' libtool=yes \
#	depfile='$(DEPDIR)/zbuf.Plo' tmpdepfile='$(DEPDIR)/zbuf.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o zbuf.lo `test -f 'intern/source/zbuf.c' || echo '$(srcdir)/'`intern/source/zbuf.c

ray.o: intern/source/ray.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ray.o -MD -MP -MF "$(DEPDIR)/ray.Tpo" \
	  -c -o ray.o `test -f 'intern/source/ray.c' || echo '$(srcdir)/'`intern/source/ray.c; \
	then mv -f "$(DEPDIR)/ray.Tpo" "$(DEPDIR)/ray.Po"; \
	else rm -f "$(DEPDIR)/ray.Tpo"; exit 1; \
	fi
#	source='intern/source/ray.c' object='ray.o' libtool=no \
#	depfile='$(DEPDIR)/ray.Po' tmpdepfile='$(DEPDIR)/ray.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ray.o `test -f 'intern/source/ray.c' || echo '$(srcdir)/'`intern/source/ray.c

ray.obj: intern/source/ray.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ray.obj -MD -MP -MF "$(DEPDIR)/ray.Tpo" \
	  -c -o ray.obj `if test -f 'intern/source/ray.c'; then $(CYGPATH_W) 'intern/source/ray.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/ray.c'; fi`; \
	then mv -f "$(DEPDIR)/ray.Tpo" "$(DEPDIR)/ray.Po"; \
	else rm -f "$(DEPDIR)/ray.Tpo"; exit 1; \
	fi
#	source='intern/source/ray.c' object='ray.obj' libtool=no \
#	depfile='$(DEPDIR)/ray.Po' tmpdepfile='$(DEPDIR)/ray.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ray.obj `if test -f 'intern/source/ray.c'; then $(CYGPATH_W) 'intern/source/ray.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/ray.c'; fi`

ray.lo: intern/source/ray.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ray.lo -MD -MP -MF "$(DEPDIR)/ray.Tpo" \
	  -c -o ray.lo `test -f 'intern/source/ray.c' || echo '$(srcdir)/'`intern/source/ray.c; \
	then mv -f "$(DEPDIR)/ray.Tpo" "$(DEPDIR)/ray.Plo"; \
	else rm -f "$(DEPDIR)/ray.Tpo"; exit 1; \
	fi
#	source='intern/source/ray.c' object='ray.lo' libtool=yes \
#	depfile='$(DEPDIR)/ray.Plo' tmpdepfile='$(DEPDIR)/ray.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ray.lo `test -f 'intern/source/ray.c' || echo '$(srcdir)/'`intern/source/ray.c

texture.o: intern/source/texture.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT texture.o -MD -MP -MF "$(DEPDIR)/texture.Tpo" \
	  -c -o texture.o `test -f 'intern/source/texture.c' || echo '$(srcdir)/'`intern/source/texture.c; \
	then mv -f "$(DEPDIR)/texture.Tpo" "$(DEPDIR)/texture.Po"; \
	else rm -f "$(DEPDIR)/texture.Tpo"; exit 1; \
	fi
#	source='intern/source/texture.c' object='texture.o' libtool=no \
#	depfile='$(DEPDIR)/texture.Po' tmpdepfile='$(DEPDIR)/texture.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o texture.o `test -f 'intern/source/texture.c' || echo '$(srcdir)/'`intern/source/texture.c

texture.obj: intern/source/texture.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT texture.obj -MD -MP -MF "$(DEPDIR)/texture.Tpo" \
	  -c -o texture.obj `if test -f 'intern/source/texture.c'; then $(CYGPATH_W) 'intern/source/texture.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/texture.c'; fi`; \
	then mv -f "$(DEPDIR)/texture.Tpo" "$(DEPDIR)/texture.Po"; \
	else rm -f "$(DEPDIR)/texture.Tpo"; exit 1; \
	fi
#	source='intern/source/texture.c' object='texture.obj' libtool=no \
#	depfile='$(DEPDIR)/texture.Po' tmpdepfile='$(DEPDIR)/texture.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o texture.obj `if test -f 'intern/source/texture.c'; then $(CYGPATH_W) 'intern/source/texture.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/texture.c'; fi`

texture.lo: intern/source/texture.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT texture.lo -MD -MP -MF "$(DEPDIR)/texture.Tpo" \
	  -c -o texture.lo `test -f 'intern/source/texture.c' || echo '$(srcdir)/'`intern/source/texture.c; \
	then mv -f "$(DEPDIR)/texture.Tpo" "$(DEPDIR)/texture.Plo"; \
	else rm -f "$(DEPDIR)/texture.Tpo"; exit 1; \
	fi
#	source='intern/source/texture.c' object='texture.lo' libtool=yes \
#	depfile='$(DEPDIR)/texture.Plo' tmpdepfile='$(DEPDIR)/texture.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o texture.lo `test -f 'intern/source/texture.c' || echo '$(srcdir)/'`intern/source/texture.c

zbufferdatastruct.o: intern/source/zbufferdatastruct.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT zbufferdatastruct.o -MD -MP -MF "$(DEPDIR)/zbufferdatastruct.Tpo" \
	  -c -o zbufferdatastruct.o `test -f 'intern/source/zbufferdatastruct.c' || echo '$(srcdir)/'`intern/source/zbufferdatastruct.c; \
	then mv -f "$(DEPDIR)/zbufferdatastruct.Tpo" "$(DEPDIR)/zbufferdatastruct.Po"; \
	else rm -f "$(DEPDIR)/zbufferdatastruct.Tpo"; exit 1; \
	fi
#	source='intern/source/zbufferdatastruct.c' object='zbufferdatastruct.o' libtool=no \
#	depfile='$(DEPDIR)/zbufferdatastruct.Po' tmpdepfile='$(DEPDIR)/zbufferdatastruct.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o zbufferdatastruct.o `test -f 'intern/source/zbufferdatastruct.c' || echo '$(srcdir)/'`intern/source/zbufferdatastruct.c

zbufferdatastruct.obj: intern/source/zbufferdatastruct.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT zbufferdatastruct.obj -MD -MP -MF "$(DEPDIR)/zbufferdatastruct.Tpo" \
	  -c -o zbufferdatastruct.obj `if test -f 'intern/source/zbufferdatastruct.c'; then $(CYGPATH_W) 'intern/source/zbufferdatastruct.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/zbufferdatastruct.c'; fi`; \
	then mv -f "$(DEPDIR)/zbufferdatastruct.Tpo" "$(DEPDIR)/zbufferdatastruct.Po"; \
	else rm -f "$(DEPDIR)/zbufferdatastruct.Tpo"; exit 1; \
	fi
#	source='intern/source/zbufferdatastruct.c' object='zbufferdatastruct.obj' libtool=no \
#	depfile='$(DEPDIR)/zbufferdatastruct.Po' tmpdepfile='$(DEPDIR)/zbufferdatastruct.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o zbufferdatastruct.obj `if test -f 'intern/source/zbufferdatastruct.c'; then $(CYGPATH_W) 'intern/source/zbufferdatastruct.c'; else $(CYGPATH_W) '$(srcdir)/intern/source/zbufferdatastruct.c'; fi`

zbufferdatastruct.lo: intern/source/zbufferdatastruct.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT zbufferdatastruct.lo -MD -MP -MF "$(DEPDIR)/zbufferdatastruct.Tpo" \
	  -c -o zbufferdatastruct.lo `test -f 'intern/source/zbufferdatastruct.c' || echo '$(srcdir)/'`intern/source/zbufferdatastruct.c; \
	then mv -f "$(DEPDIR)/zbufferdatastruct.Tpo" "$(DEPDIR)/zbufferdatastruct.Plo"; \
	else rm -f "$(DEPDIR)/zbufferdatastruct.Tpo"; exit 1; \
	fi
#	source='intern/source/zbufferdatastruct.c' object='zbufferdatastruct.lo' libtool=yes \
#	depfile='$(DEPDIR)/zbufferdatastruct.Plo' tmpdepfile='$(DEPDIR)/zbufferdatastruct.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o zbufferdatastruct.lo `test -f 'intern/source/zbufferdatastruct.c' || echo '$(srcdir)/'`intern/source/zbufferdatastruct.c

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	$(mkinstalldirs) $(distdir)/intern $(distdir)/intern/source
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES)

installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-depend distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-data install-data-am \
	install-exec install-exec-am install-info install-info-am \
	install-man install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
