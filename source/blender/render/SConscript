#!/usr/bin/python
Import ('env')

sources = env.Glob('intern/source/*.c') + env.Glob('intern/pipeline/*.c')
raysources = env.Glob('intern/raytrace/*.cpp')

incs = 'intern/include #/intern/guardedalloc ../blenlib ../makesdna ../makesrna'
incs += ' extern/include ../blenkernel ../radiosity/extern/include ../imbuf'
incs += ' ../include ../blenloader ../../../intern/smoke/extern ../../../intern/mikktspace'

cflags_raytrace = env['CCFLAGS']
cxxflags_raytrace = env['CXXFLAGS']

defs = []
defs_raytrace = []

if env['WITH_BF_PYTHON']:
    incs += ' ../python'
    incs += ' ' + env['BF_PYTHON_INC']
    defs.append('WITH_PYTHON')
    if env['BF_DEBUG']:
        defs.append('DEBUG')

if env['OURPLATFORM'] in ('win32-vc', 'win64-vc'):
    if env['WITH_BF_RAYOPTIMIZATION']:
        cflags_raytrace = env['CCFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']
        cxxflags_raytrace = env['CCFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']

if env['OURPLATFORM'] == 'win32-mingw':
    if env['WITH_BF_RAYOPTIMIZATION']:
        cflags_raytrace = env['CCFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']
        cxxflags_raytrace = env['CXXFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']

if env['OURPLATFORM'] == 'darwin':
    if env['MACOSX_ARCHITECTURE'] in ('i386', 'x86_64') and env['WITH_BF_RAYOPTIMIZATION']:
        cflags_raytrace = env['CFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']
        cxxflags_raytrace = env['CXXFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']
        
if env['OURPLATFORM'] == 'linux2':
    if env['WITH_BF_RAYOPTIMIZATION']:
        cflags_raytrace = env['CCFLAGS'] +  env['BF_RAYOPTIMIZATION_SSE_FLAGS']
        cxxflags_raytrace = env['CXXFLAGS'] +  env['BF_RAYOPTIMIZATION_SSE_FLAGS']
    incs += ' ../../../extern/binreloc/include'

if env['OURPLATFORM'] == 'linuxcross':
    if env['WITH_BF_RAYOPTIMIZATION']:
        cflags_raytrace = env['CCFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']
        cxxflags_raytrace = env['CCFLAGS'] + env['BF_RAYOPTIMIZATION_SSE_FLAGS']

if env['WITH_BF_QUICKTIME']:
    defs.append('WITH_QUICKTIME')
    incs += ' ../quicktime ' + env['BF_QUICKTIME_INC']

if env['WITH_BF_OPENEXR']:
    defs.append('WITH_OPENEXR')

if env['WITH_BF_GAMEENGINE']:
    defs.append('WITH_GAMEENGINE')

if env['OURPLATFORM'] in ('win32-vc', 'win32-mingw', 'linuxcross', 'win64-vc'):
    incs += ' ' + env['BF_PTHREADS_INC']

#
# HACK: To fix problem with error 'MMX instruction set not enabled' from mmintrin.h
#
if env['OURPLATFORM'] == 'linuxcross':
    defs.append('__SSE__')
    defs_raytrace.append('__MMX__')

if env['WITH_BF_RAYOPTIMIZATION']:
    defs.append('__SSE__')
    defs_raytrace.append('__SSE__')

env.BlenderLib ( libname = 'bf_render', sources = sources, includes = Split(incs), defines=defs, libtype='core', priority=145 )
env.BlenderLib ( libname = 'bf_render_raytrace', sources = raysources, includes = Split(incs), defines=defs_raytrace, libtype='core', priority=145, compileflags=cflags_raytrace, cxx_compileflags=cxxflags_raytrace )
