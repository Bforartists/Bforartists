/* SPDX-FileCopyrightText: 2023 Blender Authors
 *
 * SPDX-License-Identifier: GPL-2.0-or-later */

#pragma once

void register_node_tree_type_sh();

void register_node_type_sh_group();

void register_node_type_sh_add_shader();
void register_node_type_sh_ambient_occlusion();
void register_node_type_sh_attribute();
void register_node_type_sh_background();
void register_node_type_sh_bevel();
void register_node_type_sh_blackbody();
void register_node_type_sh_brightcontrast();
void register_node_type_sh_bsdf_diffuse();
void register_node_type_sh_bsdf_glass();
void register_node_type_sh_bsdf_glossy();
void register_node_type_sh_bsdf_hair_principled();
void register_node_type_sh_bsdf_hair();
void register_node_type_sh_bsdf_principled();
void register_node_type_sh_bsdf_refraction();
void register_node_type_sh_bsdf_toon();
void register_node_type_sh_bsdf_translucent();
void register_node_type_sh_bsdf_transparent();
void register_node_type_sh_bsdf_sheen();
void register_node_type_sh_bump();
void register_node_type_sh_camera();
void register_node_type_sh_clamp();
void register_node_type_sh_combcolor();
void register_node_type_sh_combhsv();
void register_node_type_sh_combrgb();
void register_node_type_sh_combxyz();
void register_node_type_sh_curve_float();
void register_node_type_sh_curve_rgb();
void register_node_type_sh_curve_vec();
void register_node_type_sh_displacement();
void register_node_type_sh_dynamic();
void register_node_type_sh_eevee_metallic();
void register_node_type_sh_eevee_specular();
void register_node_type_sh_emission();
void register_node_type_sh_fresnel();
void register_node_type_sh_gamma();
void register_node_type_sh_geometry();
void register_node_type_sh_hair_info();
void register_node_type_sh_holdout();
void register_node_type_sh_hue_sat();
void register_node_type_sh_invert();
void register_node_type_sh_layer_weight();
void register_node_type_sh_light_falloff();
void register_node_type_sh_light_path();
void register_node_type_sh_map_range();
void register_node_type_sh_mapping();
void register_node_type_sh_math();
void register_node_type_sh_mix_rgb();
void register_node_type_sh_mix_shader();
void register_node_type_sh_mix();
void register_node_type_sh_normal_map();
void register_node_type_sh_normal();
void register_node_type_sh_object_info();
void register_node_type_sh_output_aov();
void register_node_type_sh_output_eevee_material();
void register_node_type_sh_output_light();
void register_node_type_sh_output_linestyle();
void register_node_type_sh_output_material();
void register_node_type_sh_output_world();
void register_node_type_sh_particle_info();
void register_node_type_sh_point_info();
void register_node_type_sh_rgb();
void register_node_type_sh_rgbtobw();
void register_node_type_sh_script();
void register_node_type_sh_sepcolor();
void register_node_type_sh_sephsv();
void register_node_type_sh_seprgb();
void register_node_type_sh_sepxyz();
void register_node_type_sh_shadertorgb();
void register_node_type_sh_squeeze();
void register_node_type_sh_subsurface_scattering();
void register_node_type_sh_tangent();
void register_node_type_sh_tex_brick();
void register_node_type_sh_tex_checker();
void register_node_type_sh_tex_coord();
void register_node_type_sh_tex_environment();
void register_node_type_sh_tex_gradient();
void register_node_type_sh_tex_ies();
void register_node_type_sh_tex_image();
void register_node_type_sh_tex_magic();
void register_node_type_sh_tex_musgrave();
void register_node_type_sh_tex_noise();
void register_node_type_sh_tex_pointdensity();
void register_node_type_sh_tex_sky();
void register_node_type_sh_tex_voronoi();
void register_node_type_sh_tex_wave();
void register_node_type_sh_tex_white_noise();
void register_node_type_sh_uvalongstroke();
void register_node_type_sh_uvmap();
void register_node_type_sh_valtorgb();
void register_node_type_sh_value();
void register_node_type_sh_vect_math();
void register_node_type_sh_vect_transform();
void register_node_type_sh_vector_displacement();
void register_node_type_sh_vector_rotate();
void register_node_type_sh_vertex_color();
void register_node_type_sh_volume_absorption();
void register_node_type_sh_volume_info();
void register_node_type_sh_volume_principled();
void register_node_type_sh_volume_scatter();
void register_node_type_sh_wavelength();
void register_node_type_sh_wireframe();
