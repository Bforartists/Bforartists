/* SPDX-FileCopyrightText: 2023 Blender Authors
 *
 * SPDX-License-Identifier: GPL-2.0-or-later */

/** \file
 * \ingroup nodes
 */

/* intentionally no include guard */

/* Keep aligned args for readability. */
/* clang-format off */

/* Empty definitions for undefined macros to avoid warnings */
#ifndef DefNode
#define DefNode(Category, ID, DefFunc, EnumName, StructName, UIName, UIDesc)
#endif

/* WARNING! If you edit those strings, please do the same in relevant nodes files (under blender/nodes/...)! */

/*       Tree type       Node ID                  RNA def function       Struct name       UI Name              UI Description */
DefNode(Node,           NODE_FRAME,              def_frame,              Frame,            "Frame",             "Collect related nodes together in a common area. Useful for organization when the re-usability of a node group is not required")
DefNode(Node,           NODE_GROUP_INPUT,        def_group_input,        GroupInput,       "Group Input",       "Expose connected data from inside a node group as inputs to its interface")
DefNode(Node,           NODE_GROUP_OUTPUT,       def_group_output,       GroupOutput,      "Group Output",      "Output data from inside of a node group")
DefNode(Node,           NODE_GROUP,              def_group,              Group,            "Group",             "")
DefNode(Node,           NODE_REROUTE,            def_reroute,            Reroute,          "Reroute",           "A single-socket organization tool that supports one input and multiple outputs")

DefNode(ShaderNode,     SH_NODE_BRIGHTCONTRAST,  0,                      BrightContrast,   "Brightness/Contrast","Control the brightness and contrast of the input color")
DefNode(ShaderNode,     SH_NODE_CAMERA,          0,                      CameraData,       "Camera Data",       "Retrieve information about the camera and how it relates to the current shading point's position")
DefNode(ShaderNode,     SH_NODE_CLAMP,           def_clamp,              Clamp,            "Clamp",             "Clamp a value between a minimum and a maximum")
DefNode(ShaderNode,     SH_NODE_COMBRGB_LEGACY,  0,                      CombineRGB,       "Combine RGB",       "Generate a color from its red, green, and blue channels (Deprecated)")
DefNode(ShaderNode,     SH_NODE_CURVE_RGB,       def_rgb_curve,          RGBCurve,         "RGB Curves",        "Apply color corrections for each color channel")
DefNode(ShaderNode,     SH_NODE_CURVE_VEC,       def_vector_curve,       VectorCurve,      "Vector Curves",     "Map input vector components with curves")
DefNode(ShaderNode,     SH_NODE_GAMMA,           0,                      Gamma,            "Gamma",             "Apply a gamma correction")
DefNode(ShaderNode,     SH_NODE_HUE_SAT,         0,                      HueSaturation,    "Hue/Saturation/Value","Apply a color transformation in the HSV color model")
DefNode(ShaderNode,     SH_NODE_INVERT,          0,                      Invert,           "Invert Color",      "Invert a color, producing a negative")
DefNode(ShaderNode,     SH_NODE_MAP_RANGE,       def_map_range,          MapRange,         "Map Range",         "Remap a value from a range to a target range")
DefNode(ShaderNode,     SH_NODE_MAPPING,         def_sh_mapping,         Mapping,          "Mapping",           "Transform the input vector by applying translation, rotation, and scale")
DefNode(ShaderNode,     SH_NODE_MATH,            def_math,               Math,             "Math",              "Perform math operations")
DefNode(ShaderNode,     SH_NODE_MIX_RGB_LEGACY,  def_mix_rgb,            MixRGB,           "MixRGB",            "Mix two input colors")
DefNode(ShaderNode,     SH_NODE_NORMAL,          0,                      Normal,           "Normal",            "Generate a normal vector and a dot product")
DefNode(ShaderNode,     SH_NODE_RGB,             0,                      RGB,              "RGB",               "A color picker")
DefNode(ShaderNode,     SH_NODE_RGBTOBW,         0,                      RGBToBW,          "RGB to BW",         "Convert a color's luminance to a grayscale value")
DefNode(ShaderNode,     SH_NODE_SEPRGB_LEGACY,   0,                      SeparateRGB,      "Separate RGB",      "Split a color into its red, green, and blue channels (Deprecated)")
DefNode(ShaderNode,     SH_NODE_SHADERTORGB,     0,                      ShaderToRGB,      "Shader to RGB",     "Convert rendering effect (such as light and shadow) to color. Typically used for non-photorealistic rendering, to apply additional effects on the output of BSDFs.\nNote: only supported in EEVEE")
DefNode(ShaderNode,     SH_NODE_SQUEEZE,         0,                      Squeeze,          "Squeeze Value",     "")
DefNode(ShaderNode,     SH_NODE_VALTORGB,        def_colorramp,          ValToRGB,         "Color Ramp",        "Map values to colors with the use of a gradient")
DefNode(ShaderNode,     SH_NODE_VALUE,           0,                      Value,            "Value",             "Input numerical values to other nodes in the tree")
DefNode(ShaderNode,     SH_NODE_VECTOR_MATH,     def_vector_math,        VectorMath,       "Vector Math",       "Perform vector math operation")

DefNode(ShaderNode,     SH_NODE_ADD_SHADER,         0,                      AddShader,        "Add Shader",        "Add two Shaders together")
DefNode(ShaderNode,     SH_NODE_AMBIENT_OCCLUSION,  def_sh_ambient_occlusion,AmbientOcclusion, "Ambient Occlusion", "Compute how much the hemisphere above the shading point is occluded, for example to add weathering effects to corners.\nNote: For Cycles, this may slow down renders significantly")
DefNode(ShaderNode,     SH_NODE_ATTRIBUTE,          def_sh_attribute,       Attribute,        "Attribute",         "Retrieve attributes attached to objects or geometry")
DefNode(ShaderNode,     SH_NODE_BACKGROUND,         0,                      Background,       "Background",        "Add background light emission.\nNote: This node should only be used for the world surface output")
DefNode(ShaderNode,     SH_NODE_BEVEL,              def_sh_bevel,           Bevel,            "Bevel",             "Generates normals with round corners.\nNote: only supported in Cycles, and may slow down renders")
DefNode(ShaderNode,     SH_NODE_BLACKBODY,          0,                      Blackbody,        "Blackbody",         "Convert a blackbody temperature to an RGB value")
DefNode(ShaderNode,     SH_NODE_BSDF_DIFFUSE,       0,                      BsdfDiffuse,      "Diffuse BSDF",      "Lambertian and Oren-Nayar diffuse reflection")
DefNode(ShaderNode,     SH_NODE_BSDF_GLASS,         def_glass,              BsdfGlass,        "Glass BSDF",        "Glass-like shader mixing refraction and reflection at grazing angles")
DefNode(ShaderNode,     SH_NODE_BSDF_GLOSSY,        def_glossy,             BsdfAnisotropic,  "Glossy BSDF",       "Reflection with microfacet distribution, used for materials such as metal or mirrors")
DefNode(ShaderNode,     SH_NODE_BSDF_HAIR_PRINCIPLED,  def_hair_principled, BsdfHairPrincipled,"Principled Hair BSDF", "Physically-based, easy-to-use shader for rendering hair and fur")
DefNode(ShaderNode,     SH_NODE_BSDF_HAIR,          def_hair,               BsdfHair,         "Hair BSDF",         "Reflection and transmission shaders optimized for hair rendering")
DefNode(ShaderNode,     SH_NODE_BSDF_METALLIC,        def_metallic,         BsdfMetallic,     "Metallic BSDF",       "Metallic reflection with microfacet distribution, and metallic fresnel")
DefNode(ShaderNode,     SH_NODE_BSDF_PRINCIPLED,    def_principled,         BsdfPrincipled,   "Principled BSDF",   "Physically-based, easy-to-use shader for rendering surface materials, based on the OpenPBR model")
DefNode(ShaderNode,     SH_NODE_BSDF_RAY_PORTAL,    0,                      BsdfRayPortal,    "Ray Portal BSDF",   "Continue tracing from an arbitrary new position and in a new direction")
DefNode(ShaderNode,     SH_NODE_BSDF_REFRACTION,    def_refraction,         BsdfRefraction,   "Refraction BSDF",   "Glossy refraction with sharp or microfacet distribution, typically used for materials that transmit light")
DefNode(ShaderNode,     SH_NODE_BSDF_SHEEN,         def_sheen,              BsdfSheen,        "Sheen BSDF",        "Reflection for materials such as cloth.\nTypically mixed with other shaders (such as a Diffuse Shader) and is not particularly useful on its own")
DefNode(ShaderNode,     SH_NODE_BSDF_TOON,          def_toon,               BsdfToon,         "Toon BSDF",         "Diffuse and Glossy shaders with cartoon light effects")
DefNode(ShaderNode,     SH_NODE_BSDF_TRANSLUCENT,   0,                      BsdfTranslucent,  "Translucent BSDF",  "Lambertian diffuse transmission")
DefNode(ShaderNode,     SH_NODE_BSDF_TRANSPARENT,   0,                      BsdfTransparent,  "Transparent BSDF",  "Transparency without refraction, passing straight through the surface as if there were no geometry")
DefNode(ShaderNode,     SH_NODE_BUMP,               def_sh_bump,            Bump,             "Bump",              "Generate a perturbed normal from a height texture for bump mapping. Typically used for faking highly detailed surfaces")
DefNode(ShaderNode,     SH_NODE_COMBHSV_LEGACY,     0,                      CombineHSV,       "Combine HSV",       "Create a color from its hue, saturation, and value channels")
DefNode(ShaderNode,     SH_NODE_COMBINE_COLOR,      def_sh_combsep_color,   CombineColor,     "Combine Color",     "Create a color from individual components using multiple models")
DefNode(ShaderNode,     SH_NODE_COMBXYZ,            0,                      CombineXYZ,       "Combine XYZ",       "Create a vector from X, Y, and Z components")
DefNode(ShaderNode,     SH_NODE_CURVE_FLOAT,        def_float_curve,        FloatCurve,       "Float Curve",       "Map an input float to a curve and outputs a float value")
DefNode(ShaderNode,     SH_NODE_DISPLACEMENT,       def_sh_displacement,    Displacement,     "Displacement",      "Displace the surface along the surface normal")
DefNode(ShaderNode,     SH_NODE_EEVEE_SPECULAR,     0,                      EeveeSpecular,    "Specular BSDF",     "Similar to the Principled BSDF node but uses the specular workflow instead of metallic, which functions by specifying the facing (along normal) reflection color. Energy is not conserved, so the result may not be physically accurate")
DefNode(ShaderNode,     SH_NODE_EMISSION,           0,                      Emission,         "Emission",          "Lambertian emission shader")
DefNode(ShaderNode,     SH_NODE_FRESNEL,            0,                      Fresnel,          "Fresnel",           "Produce a blending factor depending on the angle between the surface normal and the view direction using Fresnel equations.\nTypically used for mixing reflections at grazing angles")
DefNode(ShaderNode,     SH_NODE_HAIR_INFO,          0,                      HairInfo,         "Curves Info",       "Retrieve hair curve information")
DefNode(ShaderNode,     SH_NODE_HOLDOUT,            0,                      Holdout,          "Holdout",           "Create a \"hole\" in the image with zero alpha transparency, which is useful for compositing.\nNote: the holdout shader can only create alpha when transparency is enabled in the film settings")
DefNode(ShaderNode,     SH_NODE_LAYER_WEIGHT,       0,                      LayerWeight,      "Layer Weight",      "Produce a blending factor depending on the angle between the surface normal and the view direction.\nTypically used for layering shaders with the Mix Shader node")
DefNode(ShaderNode,     SH_NODE_LIGHT_FALLOFF,      0,                      LightFalloff,     "Light Falloff",     "Manipulate how light intensity decreases over distance. Typically used for non-physically-based effects; in reality light always falls off quadratically")
DefNode(ShaderNode,     SH_NODE_LIGHT_PATH,         0,                      LightPath,        "Light Path",        "Retrieve the type of incoming ray for which the shader is being executed.\nTypically used for non-physically-based tricks")
DefNode(ShaderNode,     SH_NODE_MIX_SHADER,         0,                      MixShader,        "Mix Shader",        "Mix two shaders together. Typically used for material layering")
DefNode(ShaderNode,     SH_NODE_MIX,                def_sh_mix,             Mix,              "Mix",               "Mix values by a factor")
DefNode(ShaderNode,     SH_NODE_NEW_GEOMETRY,       0,                      NewGeometry,      "Geometry",          "Retrieve geometric information about the current shading point")
DefNode(ShaderNode,     SH_NODE_NORMAL_MAP,         def_sh_normal_map,      NormalMap,        "Normal Map",        "Generate a perturbed normal from an RGB normal map image. Typically used for faking highly detailed surfaces")
DefNode(ShaderNode,     SH_NODE_OBJECT_INFO,        0,                      ObjectInfo,       "Object Info",       "Retrieve information about the object instance")
DefNode(ShaderNode,     SH_NODE_OUTPUT_AOV,         def_sh_output_aov,      OutputAOV,        "AOV Output",        "Arbitrary Output Variables.\nProvide custom render passes for arbitrary shader node outputs")
DefNode(ShaderNode,     SH_NODE_OUTPUT_LIGHT,       def_sh_output,          OutputLight,      "Light Output",      "Output light information to a light object")
DefNode(ShaderNode,     SH_NODE_OUTPUT_LINESTYLE,   def_sh_output_linestyle,OutputLineStyle,  "Line Style Output", "")
DefNode(ShaderNode,     SH_NODE_OUTPUT_MATERIAL,    def_sh_output,          OutputMaterial,   "Material Output",   "Output surface material information for use in rendering")
DefNode(ShaderNode,     SH_NODE_OUTPUT_WORLD,       def_sh_output,          OutputWorld,      "World Output",      "Output light color information to the scene's World")
DefNode(ShaderNode,     SH_NODE_PARTICLE_INFO,      0,                      ParticleInfo,     "Particle Info",     "Retrieve the data of the particle that spawned the object instance, for example to give variation to multiple instances of an object")
DefNode(ShaderNode,     SH_NODE_POINT_INFO,         0,                      PointInfo,        "Point Info",        "Retrieve information about points in a point cloud")
DefNode(ShaderNode,     SH_NODE_SCRIPT,             def_sh_script,          Script,           "Script",            "Generate an OSL shader from a file or text data-block.\nNote: OSL shaders are not supported on all GPU backends")
DefNode(ShaderNode,     SH_NODE_SEPARATE_COLOR,     def_sh_combsep_color,   SeparateColor,    "Separate Color",    "Split a color into its individual components using multiple models")
DefNode(ShaderNode,     SH_NODE_SEPHSV_LEGACY,      0,                      SeparateHSV,      "Separate HSV",      "Split a color into its hue, saturation, and value channels")
DefNode(ShaderNode,     SH_NODE_SEPXYZ,             0,                      SeparateXYZ,      "Separate XYZ",      "Split a vector into its X, Y, and Z components")
DefNode(ShaderNode,     SH_NODE_SUBSURFACE_SCATTERING, def_sh_subsurface,   SubsurfaceScattering,"Subsurface Scattering","Subsurface multiple scattering shader to simulate light entering the surface and bouncing internally.\nTypically used for materials such as skin, wax, marble or milk")
DefNode(ShaderNode,     SH_NODE_TANGENT,            def_sh_tangent,         Tangent,          "Tangent",           "Generate a tangent direction for the Anisotropic BSDF")
DefNode(ShaderNode,     SH_NODE_TEX_BRICK,          def_sh_tex_brick,       TexBrick,         "Brick Texture",     "Generate a procedural texture producing bricks")
DefNode(ShaderNode,     SH_NODE_TEX_CHECKER,        def_sh_tex_checker,     TexChecker,       "Checker Texture",   "Generate a checkerboard texture")
DefNode(ShaderNode,     SH_NODE_TEX_COORD,          def_sh_tex_coord,       TexCoord,         "Texture Coordinate","Retrieve multiple types of texture coordinates.\nTypically used as inputs for texture nodes")
DefNode(ShaderNode,     SH_NODE_TEX_ENVIRONMENT,    def_sh_tex_environment, TexEnvironment,   "Environment Texture","Sample an image file as an environment texture. Typically used to light the scene with the background node")
DefNode(ShaderNode,     SH_NODE_TEX_GABOR,          def_sh_tex_gabor,       TexGabor,         "Gabor Texture",     "Generate Gabor noise")
DefNode(ShaderNode,     SH_NODE_TEX_GRADIENT,       def_sh_tex_gradient,    TexGradient,      "Gradient Texture",  "Generate interpolated color and intensity values based on the input vector")
DefNode(ShaderNode,     SH_NODE_TEX_IES,            def_sh_tex_ies,         TexIES,           "IES Texture",       "Match real world lights with IES files, which store the directional intensity distribution of light sources")
DefNode(ShaderNode,     SH_NODE_TEX_IMAGE,          def_sh_tex_image,       TexImage,         "Image Texture",     "Sample an image file as a texture")
DefNode(ShaderNode,     SH_NODE_TEX_MAGIC,          def_sh_tex_magic,       TexMagic,         "Magic Texture",     "Generate a psychedelic color texture")
DefNode(ShaderNode,     SH_NODE_TEX_NOISE,          def_sh_tex_noise,       TexNoise,         "Noise Texture",     "Generate fractal Perlin noise")
DefNode(ShaderNode,     SH_NODE_TEX_POINTDENSITY,   def_sh_tex_pointdensity,TexPointDensity,  "Point Density",     "Generate a volumetric point for each particle or vertex of another object")
DefNode(ShaderNode,     SH_NODE_TEX_SKY,            def_sh_tex_sky,         TexSky,           "Sky Texture",       "Generate a procedural sky texture")
DefNode(ShaderNode,     SH_NODE_TEX_VORONOI,        def_sh_tex_voronoi,     TexVoronoi,       "Voronoi Texture",   "Generate Worley noise based on the distance to random points. Typically used to generate textures such as stones, water, or biological cells")
DefNode(ShaderNode,     SH_NODE_TEX_WAVE,           def_sh_tex_wave,        TexWave,          "Wave Texture",      "Generate procedural bands or rings with noise")
DefNode(ShaderNode,     SH_NODE_TEX_WHITE_NOISE,    def_sh_tex_white_noise, TexWhiteNoise,    "White Noise Texture","Return a random value or color based on an input seed")
DefNode(ShaderNode,     SH_NODE_UVALONGSTROKE,      def_sh_uvalongstroke,   UVAlongStroke,    "UV Along Stroke",   "")
DefNode(ShaderNode,     SH_NODE_UVMAP,              def_sh_uvmap,           UVMap,            "UV Map",            "Retrieve a UV map from the geometry, or the default fallback if none is specified")
DefNode(ShaderNode,     SH_NODE_VECT_TRANSFORM,     def_sh_vect_transform,  VectorTransform,  "Vector Transform",  "Convert a vector, point, or normal between world, camera, and object coordinate space")
DefNode(ShaderNode,     SH_NODE_VECTOR_DISPLACEMENT,def_sh_vector_displacement,VectorDisplacement,"Vector Displacement","Displace the surface along an arbitrary direction")
DefNode(ShaderNode,     SH_NODE_VECTOR_ROTATE,      def_sh_vector_rotate,   VectorRotate,     "Vector Rotate",     "Rotate a vector around a pivot point (center)")
DefNode(ShaderNode,     SH_NODE_VERTEX_COLOR,       def_sh_vertex_color,    VertexColor,      "Color Attribute",   "Retrieve a color attribute, or the default fallback if none is specified")
DefNode(ShaderNode,     SH_NODE_VOLUME_ABSORPTION,  0,                      VolumeAbsorption, "Volume Absorption", "Absorb light as it passes through the volume")
DefNode(ShaderNode,     SH_NODE_VOLUME_INFO,        0,                      VolumeInfo,       "Volume Info",       "Read volume data attributes from volume grids")
DefNode(ShaderNode,     SH_NODE_VOLUME_PRINCIPLED,  0,                      VolumePrincipled, "Principled Volume", "Combine all volume shading components into a single easy to use node")
DefNode(ShaderNode,     SH_NODE_VOLUME_SCATTER,     def_scatter,            VolumeScatter,    "Volume Scatter",    "Scatter light as it passes through the volume, often used to add fog to a scene")
DefNode(ShaderNode,     SH_NODE_WAVELENGTH,         0,                      Wavelength,       "Wavelength",        "Convert a wavelength value to an RGB value")
DefNode(ShaderNode,     SH_NODE_WIREFRAME,          def_sh_tex_wireframe,   Wireframe,        "Wireframe",         "Retrieve the edges of an object as it appears to Cycles.\nNote: as meshes are triangulated before being processed by Cycles, topology will always appear triangulated")

/* NOTE: #OutputFile node has special RNA setup function called in `rna_nodetree.cc`. */
DefNode(CompositorNode, CMP_NODE_ALPHAOVER,         def_cmp_alpha_over,     AlphaOver,        "Alpha Over",          "Overlay a foreground image onto a background image")
DefNode(CompositorNode, CMP_NODE_ANTIALIASING,   def_cmp_antialiasing,      AntiAliasing,     "Anti-Aliasing",       "Smooth away jagged edges")
DefNode(CompositorNode, CMP_NODE_BILATERALBLUR,  def_cmp_bilateral_blur,    Bilateralblur,    "Bilateral Blur",      "Adaptively blur image, while retaining sharp edges")
DefNode(CompositorNode, CMP_NODE_BLUR,              def_cmp_blur,           Blur,             "Blur",                "Blur an image, using several blur modes")
DefNode(CompositorNode, CMP_NODE_BOKEHBLUR,      def_cmp_bokehblur,         BokehBlur,        "Bokeh Blur",          "Generate a bokeh type blur similar to Defocus. Unlike defocus an in-focus region is defined in the compositor")
DefNode(CompositorNode, CMP_NODE_BOKEHIMAGE,     def_cmp_bokehimage,        BokehImage,       "Bokeh Image",         "Generate image with bokeh shape for use with the Bokeh Blur filter node")
DefNode(CompositorNode, CMP_NODE_BRIGHTCONTRAST, def_cmp_brightcontrast,    BrightContrast,   "Brightness/Contrast", "Adjust brightness and contrast")
DefNode(CompositorNode, CMP_NODE_CHANNEL_MATTE,  def_cmp_channel_matte,     ChannelMatte,     "Channel Key",         "Create matte based on differences in color channels")
DefNode(CompositorNode, CMP_NODE_CHROMA_MATTE,   def_cmp_chroma_matte,      ChromaMatte,      "Chroma Key",          "Create matte based on chroma values")
DefNode(CompositorNode, CMP_NODE_COLOR_MATTE,    def_cmp_color_matte,       ColorMatte,       "Color Key",           "Create matte using a given color, for green or blue screen footage")
DefNode(CompositorNode, CMP_NODE_COLOR_SPILL,    def_cmp_color_spill,       ColorSpill,       "Color Spill",         "Remove colors from a blue or green screen, by reducing one RGB channel compared to the others")
DefNode(CompositorNode, CMP_NODE_COLORBALANCE,   def_cmp_colorbalance,      ColorBalance,     "Color Balance",       "Adjust color and values")
DefNode(CompositorNode, CMP_NODE_COLORCORRECTION,def_cmp_colorcorrection,   ColorCorrection,  "Color Correction",    "Adjust the color of an image, separately in several tonal ranges (highlights, midtones and shadows)")
DefNode(CompositorNode, CMP_NODE_COMBHSVA_LEGACY,0,                         CombHSVA,         "Combine HSVA",        "Deprecated")
DefNode(CompositorNode, CMP_NODE_COMBINE_COLOR,  def_cmp_combsep_color,     CombineColor,     "Combine Color",       "Combine an image from its composite color channels")
DefNode(CompositorNode, CMP_NODE_COMBINE_XYZ,    0,                         CombineXYZ,       "Combine XYZ",         "Combine a vector from its individual components")
DefNode(CompositorNode, CMP_NODE_COMBRGBA_LEGACY,0,                         CombRGBA,         "Combine RGBA",        "Deprecated")
DefNode(CompositorNode, CMP_NODE_COMBYCCA_LEGACY,def_cmp_ycc,               CombYCCA,         "Combine YCbCrA",      "Deprecated")
DefNode(CompositorNode, CMP_NODE_COMBYUVA_LEGACY,0,                         CombYUVA,         "Combine YUVA",        "Deprecated")
DefNode(CompositorNode, CMP_NODE_COMPOSITE,         def_cmp_composite,      Composite,        "Composite",           "Final render output")
DefNode(CompositorNode, CMP_NODE_CONVERT_COLOR_SPACE,def_cmp_convert_color_space,ConvertColorSpace,"Convert Colorspace","Convert between color spaces")
DefNode(CompositorNode, CMP_NODE_CORNERPIN,      0,                         CornerPin,        "Corner Pin",          "Plane warp transformation using explicit corner values")
DefNode(CompositorNode, CMP_NODE_CROP,           def_cmp_crop,              Crop,             "Crop",                "Crops image to a smaller region, either making the cropped area transparent or resizing the image")
DefNode(CompositorNode, CMP_NODE_CRYPTOMATTE_LEGACY, def_cmp_cryptomatte_legacy,Cryptomatte,      "Cryptomatte (Legacy)","Deprecated. Use Cryptomatte Node instead")
DefNode(CompositorNode, CMP_NODE_CRYPTOMATTE,    def_cmp_cryptomatte,       CryptomatteV2,    "Cryptomatte",         "Generate matte for individual objects and materials using Cryptomatte render passes")
DefNode(CompositorNode, CMP_NODE_CURVE_RGB,         def_rgb_curve,          CurveRGB,         "RGB Curves",          "Perform level adjustments on each color channel of an image")
DefNode(CompositorNode, CMP_NODE_CURVE_VEC,         def_vector_curve,       CurveVec,         "Vector Curves",       "Map input vector components with curves")
DefNode(CompositorNode, CMP_NODE_DBLUR,          def_cmp_dblur,             DBlur,            "Directional Blur",    "Blur an image along a direction")
DefNode(CompositorNode, CMP_NODE_DEFOCUS,        def_cmp_defocus,           Defocus,          "Defocus",             "Apply depth of field in 2D, using a Z depth map or mask")
DefNode(CompositorNode, CMP_NODE_DENOISE,        def_cmp_denoise,           Denoise,          "Denoise",             "Denoise renders from Cycles and other ray tracing renderers")
DefNode(CompositorNode, CMP_NODE_DESPECKLE,      def_cmp_despeckle,         Despeckle,        "Despeckle",           "Smooth areas of an image in which noise is noticeable, while leaving complex areas untouched")
DefNode(CompositorNode, CMP_NODE_DIFF_MATTE,     def_cmp_diff_matte,        DiffMatte,        "Difference Key",      "Produce a matte that isolates foreground content by comparing it with a reference background image")
DefNode(CompositorNode, CMP_NODE_DILATEERODE,    def_cmp_dilate_erode,      DilateErode,      "Dilate/Erode",        "Expand and shrink masks")
DefNode(CompositorNode, CMP_NODE_DISPLACE,       0,                         Displace,         "Displace",            "Displace pixel position using an offset vector")
DefNode(CompositorNode, CMP_NODE_DIST_MATTE,     def_cmp_distance_matte,    DistanceMatte,    "Distance Key",        "Create matte based on 3D distance between colors")
DefNode(CompositorNode, CMP_NODE_DOUBLEEDGEMASK, def_cmp_double_edge_mask,  DoubleEdgeMask,   "Double Edge Mask",    "Create a gradient between two masks")
DefNode(CompositorNode, CMP_NODE_EXPOSURE,       0,                         Exposure,         "Exposure",            "Adjust brightness using a camera exposure parameter")
DefNode(CompositorNode, CMP_NODE_FILTER,            def_cmp_filter,         Filter,           "Filter",              "Apply common image enhancement filters")
DefNode(CompositorNode, CMP_NODE_FLIP,           def_cmp_flip,              Flip,             "Flip",                "Flip an image along a defined axis")
DefNode(CompositorNode, CMP_NODE_GAMMA,          0,                         Gamma,            "Gamma",               "Apply gamma correction")
DefNode(CompositorNode, CMP_NODE_GLARE,          def_cmp_glare,             Glare,            "Glare",               "Add lens flares, fog and glows around bright parts of the image")
DefNode(CompositorNode, CMP_NODE_HUE_SAT,           0,                      HueSat,           "Hue/Saturation/Value","Apply a color transformation in the HSV color model")
DefNode(CompositorNode, CMP_NODE_HUECORRECT,     def_cmp_huecorrect,        HueCorrect,       "Hue Correct",         "Adjust hue, saturation, and value with a curve")
DefNode(CompositorNode, CMP_NODE_ID_MASK,        def_cmp_id_mask,           IDMask,           "ID Mask",             "Create a matte from an object or material index pass")
DefNode(CompositorNode, CMP_NODE_IMAGE,             def_cmp_image,          Image,            "Image",               "Input image or movie file")
DefNode(CompositorNode, CMP_NODE_INPAINT,        def_cmp_inpaint,           Inpaint,          "Inpaint",             "Extend borders of an image into transparent or masked regions")
DefNode(CompositorNode, CMP_NODE_INVERT,         def_cmp_invert,            Invert,           "Invert Color",        "Invert colors, producing a negative")
DefNode(CompositorNode, CMP_NODE_KEYING,         def_cmp_keying,            Keying,           "Keying",              "Perform both chroma keying (to remove the backdrop) and despill (to correct color cast from the backdrop)")
DefNode(CompositorNode, CMP_NODE_KEYINGSCREEN,   def_cmp_keyingscreen,      KeyingScreen,     "Keying Screen",       "Create plates for use as a color reference for keying nodes")
DefNode(CompositorNode, CMP_NODE_KUWAHARA,       def_cmp_kuwahara,          Kuwahara,         "Kuwahara",            "Apply smoothing filter that preserves edges, for stylized and painterly effects")
DefNode(CompositorNode, CMP_NODE_LENSDIST,       def_cmp_lensdist,          Lensdist,         "Lens Distortion",     "Simulate distortion and dispersion from camera lenses")
DefNode(CompositorNode, CMP_NODE_LUMA_MATTE,     def_cmp_luma_matte,        LumaMatte,        "Luminance Key",       "Create a matte based on luminance (brightness) difference")
DefNode(CompositorNode, CMP_NODE_MAP_RANGE,         def_cmp_map_range,      MapRange,         "Map Range",           "Map an input value range into a destination range")
DefNode(CompositorNode, CMP_NODE_MAP_UV,         def_cmp_map_uv,            MapUV,            "Map UV",              "Map a texture using UV coordinates, to apply a texture to objects in compositing")
DefNode(CompositorNode, CMP_NODE_MAP_VALUE,         def_cmp_map_value,      MapValue,         "Map Value",           "Scale, offset and clamp values")
DefNode(CompositorNode, CMP_NODE_MASK_BOX,       def_cmp_boxmask,           BoxMask,          "Box Mask",            "Create rectangular mask suitable for use as a simple matte")
DefNode(CompositorNode, CMP_NODE_MASK_ELLIPSE,   def_cmp_ellipsemask,       EllipseMask,      "Ellipse Mask",        "Create elliptical mask suitable for use as a simple matte or vignette mask")
DefNode(CompositorNode, CMP_NODE_MASK,           def_cmp_mask,              Mask,             "Mask",                "Input mask from a mask datablock, created in the image editor")
DefNode(CompositorNode, CMP_NODE_MATH,           def_math,                  Math,             "Math",                "Perform math operations")
DefNode(CompositorNode, CMP_NODE_MIX_RGB,           def_mix_rgb,            MixRGB,           "Mix",                 "Blend two images together using various blending modes")
DefNode(CompositorNode, CMP_NODE_MOVIECLIP,      def_cmp_movieclip,         MovieClip,        "Movie Clip",          "Input image or movie from a movie clip datablock, typically used for motion tracking")
DefNode(CompositorNode, CMP_NODE_MOVIEDISTORTION,def_cmp_moviedistortion,   MovieDistortion,  "Movie Distortion",    "Remove lens distortion from footage, using motion tracking camera lens settings")
DefNode(CompositorNode, CMP_NODE_NORMAL,            0,                      Normal,           "Normal",              "Generate a normal vector and a dot product")
DefNode(CompositorNode, CMP_NODE_NORMALIZE,      0,                         Normalize,        "Normalize",           "Map values to 0 to 1 range, based on the minimum and maximum pixel values")
DefNode(CompositorNode, CMP_NODE_OUTPUT_FILE,       0,                      OutputFile,       "File Output",         "Write image file to disk")
DefNode(CompositorNode, CMP_NODE_PIXELATE,       def_cmp_pixelate,          Pixelate,         "Pixelate",            "Reduce detail in an image by making individual pixels more prominent, for a blocky or mosaic-like appearance")
DefNode(CompositorNode, CMP_NODE_PLANETRACKDEFORM,def_cmp_planetrackdeform, PlaneTrackDeform, "Plane Track Deform",  "Replace flat planes in footage by another image, detected by plane tracks from motion tracking")
DefNode(CompositorNode, CMP_NODE_POSTERIZE,      0,                         Posterize,        "Posterize",           "Reduce number of colors in an image, converting smooth gradients into sharp transitions")
DefNode(CompositorNode, CMP_NODE_PREMULKEY,      def_cmp_premul_key,        PremulKey,        "Alpha Convert",       "Convert to and from premultiplied (associated) alpha")
DefNode(CompositorNode, CMP_NODE_R_LAYERS,          def_cmp_render_layers,  RLayers,          "Render Layers",       "Input render passes from a scene render")
DefNode(CompositorNode, CMP_NODE_RGB,               0,                      RGB,              "RGB",                 "A color picker")
DefNode(CompositorNode, CMP_NODE_RGBTOBW,           0,                      RGBToBW,          "RGB to BW",           "Convert RGB input into grayscale using luminance")
DefNode(CompositorNode, CMP_NODE_ROTATE,         def_cmp_rotate,            Rotate,           "Rotate",              "Rotate image by specified angle")
DefNode(CompositorNode, CMP_NODE_SCALE,          def_cmp_scale,             Scale,            "Scale",               "Change the size of the image")
DefNode(CompositorNode, CMP_NODE_SCENE_TIME,     0,                         SceneTime,        "Scene Time",          "Input the current scene time in seconds or frames")
DefNode(CompositorNode, CMP_NODE_SEPARATE_COLOR, def_cmp_combsep_color,     SeparateColor,    "Separate Color",      "Split an image into its composite color channels")
DefNode(CompositorNode, CMP_NODE_SEPARATE_XYZ,   0,                         SeparateXYZ,      "Separate XYZ",        "Split a vector into its individual components")
DefNode(CompositorNode, CMP_NODE_SEPHSVA_LEGACY,    0,                      SepHSVA,          "Separate HSVA",       "Deprecated")
DefNode(CompositorNode, CMP_NODE_SEPRGBA_LEGACY,    0,                      SepRGBA,          "Separate RGBA",       "Deprecated")
DefNode(CompositorNode, CMP_NODE_SEPYCCA_LEGACY, def_cmp_ycc,               SepYCCA,          "Separate YCbCrA",     "Deprecated")
DefNode(CompositorNode, CMP_NODE_SEPYUVA_LEGACY, 0,                         SepYUVA,          "Separate YUVA",       "Deprecated")
DefNode(CompositorNode, CMP_NODE_SETALPHA,          def_cmp_set_alpha,      SetAlpha,         "Set Alpha",           "Add an alpha channel to an image")
DefNode(CompositorNode, CMP_NODE_SPLIT,          def_cmp_split,             Split,            "Split",               "Combine two images for side-by-side display. Typically used in combination with a Viewer node")
DefNode(CompositorNode, CMP_NODE_STABILIZE2D,    def_cmp_stabilize2d,       Stabilize,        "Stabilize 2D",        "Stabilize footage using 2D stabilization motion tracking settings")
DefNode(CompositorNode, CMP_NODE_SUNBEAMS,       def_cmp_sunbeams,          SunBeams,         "Sun Beams",           "Create sun beams based on image brightness")
DefNode(CompositorNode, CMP_NODE_SWITCH_VIEW,    def_cmp_switch_view,       SwitchView,       "Switch View",         "Combine the views (left and right) into a single stereo 3D output")
DefNode(CompositorNode, CMP_NODE_SWITCH,         def_cmp_switch,            Switch,           "Switch",              "Switch between two images using a checkbox")
DefNode(CompositorNode, CMP_NODE_TEXTURE,        def_texture,               Texture,          "Texture",             "Generate texture pattern from texture datablock")
DefNode(CompositorNode, CMP_NODE_TIME,              def_time,               Time,             "Time Curve",          "Generate a factor value (from 0.0 to 1.0) between scene start and end time, using a curve mapping")
DefNode(CompositorNode, CMP_NODE_TONEMAP,        def_cmp_tonemap,           Tonemap,          "Tonemap",             "Map one set of colors to another in order to approximate the appearance of high dynamic range")
DefNode(CompositorNode, CMP_NODE_TRACKPOS,       def_cmp_trackpos,          TrackPos,         "Track Position",      "Provide information about motion tracking points, such as x and y values")
DefNode(CompositorNode, CMP_NODE_TRANSFORM,      dev_cmd_transform,         Transform,        "Transform",           "Scale, translate and rotate an image")
DefNode(CompositorNode, CMP_NODE_TRANSLATE,      def_cmp_translate,         Translate,        "Translate",           "Offset an image")
DefNode(CompositorNode, CMP_NODE_VALTORGB,          def_colorramp,          ValToRGB,         "Color Ramp",          "Map values to colors with the use of a gradient")
DefNode(CompositorNode, CMP_NODE_VALUE,             0,                      Value,            "Value",               "Input numerical values to other nodes in the node graph")
DefNode(CompositorNode, CMP_NODE_VECBLUR,           def_cmp_vector_blur,    VecBlur,          "Vector Blur",         "Uses the vector speed render pass to blur the image pixels in 2D")
DefNode(CompositorNode, CMP_NODE_VIEW_LEVELS,    def_cmp_levels,            Levels,           "Levels",              "Compute average and standard deviation of pixel values")
DefNode(CompositorNode, CMP_NODE_VIEWER,            def_cmp_viewer,         Viewer,           "Viewer",              "Visualize data from inside a node graph, in the image editor or as a backdrop")
DefNode(CompositorNode, CMP_NODE_ZCOMBINE,       def_cmp_zcombine,          Zcombine,         "Z Combine",           "Combine two images using depth maps")

DefNode(TextureNode,    TEX_NODE_AT,             0,                      At,               "At",                ""              )
DefNode(TextureNode,    TEX_NODE_BRICKS,         def_tex_bricks,         Bricks,           "Bricks",            ""              )
DefNode(TextureNode,    TEX_NODE_CHECKER,        0,                      Checker,          "Checker",           ""              )
DefNode(TextureNode,    TEX_NODE_COMBINE_COLOR,  def_tex_combsep_color,  CombineColor,     "Combine Color",     ""              )
DefNode(TextureNode,    TEX_NODE_COMPOSE_LEGACY, 0,                      Compose,          "Combine RGBA",      ""              )
DefNode(TextureNode,    TEX_NODE_COORD,          0,                      Coordinates,      "Coordinates",       ""              )
DefNode(TextureNode,    TEX_NODE_CURVE_RGB,      def_rgb_curve,          CurveRGB,         "RGB Curves",        ""              )
DefNode(TextureNode,    TEX_NODE_CURVE_TIME,     def_time,               CurveTime,        "Curve Time",        ""              )
DefNode(TextureNode,    TEX_NODE_DECOMPOSE_LEGACY,0,                     Decompose,        "Separate RGBA",     ""              )
DefNode(TextureNode,    TEX_NODE_DISTANCE,       0,                      Distance,         "Distance",          ""              )
DefNode(TextureNode,    TEX_NODE_HUE_SAT,        0,                      HueSaturation,    "Hue/Saturation/Value", ""           )
DefNode(TextureNode,    TEX_NODE_IMAGE,          def_tex_image,          Image,            "Image",             ""              )
DefNode(TextureNode,    TEX_NODE_INVERT,         0,                      Invert,           "Invert Color",      ""              )
DefNode(TextureNode,    TEX_NODE_MATH,           def_math,               Math,             "Math",              ""              )
DefNode(TextureNode,    TEX_NODE_MIX_RGB,        def_mix_rgb,            MixRGB,           "Mix RGB",           ""              )
DefNode(TextureNode,    TEX_NODE_OUTPUT,         def_tex_output,         Output,           "Output",            ""              )
DefNode(TextureNode,    TEX_NODE_RGBTOBW,        0,                      RGBToBW,          "RGB to BW",         ""              )
DefNode(TextureNode,    TEX_NODE_ROTATE,         0,                      Rotate,           "Rotate",            ""              )
DefNode(TextureNode,    TEX_NODE_SCALE,          0,                      Scale,            "Scale",             ""              )
DefNode(TextureNode,    TEX_NODE_SEPARATE_COLOR, def_tex_combsep_color,  SeparateColor,    "Separate Color",    ""              )
DefNode(TextureNode,    TEX_NODE_TEXTURE,        def_texture,            Texture,          "Texture",           ""              )
DefNode(TextureNode,    TEX_NODE_TRANSLATE,      0,                      Translate,        "Translate",         ""              )
DefNode(TextureNode,    TEX_NODE_VALTONOR,       0,                      ValToNor,         "Value to Normal",   ""              )
DefNode(TextureNode,    TEX_NODE_VALTORGB,       def_colorramp,          ValToRGB,         "Color Ramp",        ""              )
DefNode(TextureNode,    TEX_NODE_VIEWER,         0,                      Viewer,           "Viewer",            ""              )
/* procedural textures */
DefNode(TextureNode,    TEX_NODE_PROC+TEX_BLEND, 0,                      TexBlend,         "Blend",             ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_CLOUDS, 0,                     TexClouds,        "Clouds",            ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_DISTNOISE, 0,                  TexDistNoise,     "Distorted Noise",   ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_MAGIC, 0,                      TexMagic,         "Magic",             ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_MARBLE, 0,                     TexMarble,        "Marble",            ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_MUSGRAVE, 0,                   TexMusgrave,      "Musgrave",          ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_NOISE, 0,                      TexNoise,         "Noise",             ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_STUCCI, 0,                     TexStucci,        "Stucci",            ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_VORONOI, 0,                    TexVoronoi,       "Voronoi",           ""              )
DefNode(TextureNode,    TEX_NODE_PROC+TEX_WOOD, 0,                       TexWood,          "Wood",              ""              )

DefNode(FunctionNode, FN_NODE_ALIGN_EULER_TO_VECTOR, 0, AlignEulerToVector, "Align Euler to Vector", "")
DefNode(FunctionNode, FN_NODE_ALIGN_ROTATION_TO_VECTOR, 0, AlignRotationToVector, "Align Rotation to Vector", "")
DefNode(FunctionNode, FN_NODE_AXES_TO_ROTATION, 0, AxesToRotation, "Axes to Rotation", "Create a rotation from a primary and (ideally orthogonal) secondary axis")
DefNode(FunctionNode, FN_NODE_AXIS_ANGLE_TO_ROTATION, 0, AxisAngleToRotation, "Axis Angle to Rotation", "")
DefNode(FunctionNode, FN_NODE_BOOLEAN_MATH, 0, BooleanMath, "Boolean Math", "")
DefNode(FunctionNode, FN_NODE_COMBINE_COLOR, 0, CombineColor, "Combine Color", "")
DefNode(FunctionNode, FN_NODE_COMBINE_MATRIX, 0, CombineMatrix, "Combine Matrix", "Construct a 4x4 matrix from its individual values")
DefNode(FunctionNode, FN_NODE_COMBINE_TRANSFORM, 0, CombineTransform, "Combine Transform", "")
DefNode(FunctionNode, FN_NODE_COMPARE, 0, Compare, "Compare", "")
DefNode(FunctionNode, FN_NODE_EULER_TO_ROTATION, 0, EulerToRotation, "Euler to Rotation", "")
DefNode(FunctionNode, FN_NODE_FLOAT_TO_INT, def_float_to_int, FloatToInt, "Float to Integer", "")
DefNode(FunctionNode, FN_NODE_HASH_VALUE, 0, HashValue, "Hash Value", "")
DefNode(FunctionNode, FN_NODE_INPUT_BOOL, def_fn_input_bool, InputBool, "Boolean", "")
DefNode(FunctionNode, FN_NODE_INPUT_COLOR, def_fn_input_color, InputColor, "Color", "")
DefNode(FunctionNode, FN_NODE_INPUT_INT, def_fn_input_int, InputInt, "Integer", "")
DefNode(FunctionNode, FN_NODE_INPUT_ROTATION, def_fn_input_rotation, InputRotation, "Rotation", "")
DefNode(FunctionNode, FN_NODE_INPUT_SPECIAL_CHARACTERS, 0, InputSpecialCharacters, "Special Characters", "")
DefNode(FunctionNode, FN_NODE_INPUT_STRING, def_fn_input_string, InputString, "String", "")
DefNode(FunctionNode, FN_NODE_INPUT_VECTOR, def_fn_input_vector, InputVector, "Vector", "")
DefNode(FunctionNode, FN_NODE_INTEGER_MATH, 0, IntegerMath, "Integer Math", "")
DefNode(FunctionNode, FN_NODE_INVERT_MATRIX, 0, InvertMatrix, "Invert Matrix", "")
DefNode(FunctionNode, FN_NODE_INVERT_ROTATION, 0, InvertRotation, "Invert Rotation", "")
DefNode(FunctionNode, FN_NODE_MATRIX_DETERMINANT, 0, MatrixDeterminant, "Matrix Determinant", "")
DefNode(FunctionNode, FN_NODE_MATRIX_MULTIPLY, 0, MatrixMultiply, "Multiply Matrices", "")
DefNode(FunctionNode, FN_NODE_PROJECT_POINT, 0, ProjectPoint, "Project Point", "Project a point using a matrix, using location, rotation, scale, and perspective divide")
DefNode(FunctionNode, FN_NODE_QUATERNION_TO_ROTATION, 0, QuaternionToRotation, "Quaternion to Rotation", "")
DefNode(FunctionNode, FN_NODE_RANDOM_VALUE, def_fn_random_value, RandomValue, "Random Value", "")
DefNode(FunctionNode, FN_NODE_REPLACE_STRING, 0, ReplaceString, "Replace String", "")
DefNode(FunctionNode, FN_NODE_ROTATE_EULER, def_fn_rotate_euler, RotateEuler, "Rotate Euler", "")
DefNode(FunctionNode, FN_NODE_ROTATE_ROTATION, 0, RotateRotation, "Rotate Rotation", "")
DefNode(FunctionNode, FN_NODE_ROTATE_VECTOR, 0, RotateVector, "Rotate Vector", "")
DefNode(FunctionNode, FN_NODE_ROTATION_TO_AXIS_ANGLE, 0, RotationToAxisAngle, "Rotation to Axis Angle", "")
DefNode(FunctionNode, FN_NODE_ROTATION_TO_EULER, 0, RotationToEuler, "Rotation to Euler", "")
DefNode(FunctionNode, FN_NODE_ROTATION_TO_QUATERNION, 0, RotationToQuaternion, "Rotation to Quaternion", "")
DefNode(FunctionNode, FN_NODE_SEPARATE_COLOR, 0, SeparateColor, "Separate Color", "")
DefNode(FunctionNode, FN_NODE_SEPARATE_MATRIX, 0, SeparateMatrix, "Separate Matrix", "Split a 4x4 matrix into its individual values")
DefNode(FunctionNode, FN_NODE_SEPARATE_TRANSFORM, 0, SeparateTransform, "Separate Transform", "")
DefNode(FunctionNode, FN_NODE_SLICE_STRING, 0, SliceString, "Slice String", "")
DefNode(FunctionNode, FN_NODE_STRING_LENGTH, 0, StringLength, "String Length", "")
DefNode(FunctionNode, FN_NODE_TRANSFORM_DIRECTION, 0, TransformDirection, "Transform Direction", "")
DefNode(FunctionNode, FN_NODE_TRANSFORM_POINT, 0, TransformPoint, "Transform Point", "")
DefNode(FunctionNode, FN_NODE_TRANSPOSE_MATRIX, 0, TransposeMatrix, "Transpose Matrix", "")
DefNode(FunctionNode, FN_NODE_VALUE_TO_STRING, 0, ValueToString, "Value to String", "")

DefNode(GeometryNode, GEO_NODE_ACCUMULATE_FIELD, 0, AccumulateField, "Accumulate Field", "Add the values of an evaluated field together and output the running total for each element")
DefNode(GeometryNode, GEO_NODE_ATTRIBUTE_DOMAIN_SIZE, 0, AttributeDomainSize, "Domain Size", "Retrieve the number of elements in a geometry for each attribute domain")
DefNode(GeometryNode, GEO_NODE_ATTRIBUTE_STATISTIC, 0,AttributeStatistic, "Attribute Statistic", "Calculate statistics about a data set from a field evaluated on a geometry")
DefNode(GeometryNode, GEO_NODE_BAKE, rna_def_geo_bake, Bake, "Bake", "Cache the incoming data so that it can be used without recomputation")
DefNode(GeometryNode, GEO_NODE_BLUR_ATTRIBUTE, 0, BlurAttribute, "Blur Attribute", "Mix attribute values of neighboring elements")
DefNode(GeometryNode, GEO_NODE_BOUNDING_BOX, 0, BoundBox, "Bounding Box", "Calculate the limits of a geometry's positions and generate a box mesh with those dimensions")
DefNode(GeometryNode, GEO_NODE_CAPTURE_ATTRIBUTE, rna_def_geo_capture_attribute, CaptureAttribute, "Capture Attribute", "Store the result of a field on a geometry and output the data as a node socket. Allows remembering or interpolating data as the geometry changes, such as positions before deformation")
DefNode(GeometryNode, GEO_NODE_COLLECTION_INFO, 0, CollectionInfo, "Collection Info", "Retrieve geometry instances from a collection")
DefNode(GeometryNode, GEO_NODE_CONVEX_HULL, 0, ConvexHull, "Convex Hull", "Create a mesh that encloses all points in the input geometry with the smallest number of points")
DefNode(GeometryNode, GEO_NODE_CURVE_ENDPOINT_SELECTION, 0, CurveEndpointSelection, "Endpoint Selection", "Provide a selection for an arbitrary number of endpoints in each spline")
DefNode(GeometryNode, GEO_NODE_CURVE_HANDLE_TYPE_SELECTION, def_geo_curve_handle_type_selection, CurveHandleTypeSelection, "Handle Type Selection", "Provide a selection based on the handle types of Bézier control points")
DefNode(GeometryNode, GEO_NODE_CURVE_LENGTH, 0, CurveLength, "Curve Length", "Retrieve the length of all splines added together")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_ARC, 0,CurveArc, "Arc", "Generate a poly spline arc")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_BEZIER_SEGMENT, 0, CurvePrimitiveBezierSegment, "Bézier Segment", "Generate a 2D Bézier spline from the given control points and handles")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_CIRCLE,0, CurvePrimitiveCircle, "Curve Circle", "Generate a poly spline circle")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_LINE, 0, CurvePrimitiveLine, "Curve Line", "Generate a poly spline line with two points")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_QUADRATIC_BEZIER, 0, CurveQuadraticBezier, "Quadratic Bézier", "Generate a poly spline in a parabola shape with control points positions")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_QUADRILATERAL, 0, CurvePrimitiveQuadrilateral, "Quadrilateral", "Generate a polygon with four points")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_SPIRAL,0, CurveSpiral, "Curve Spiral", "Generate a poly spline in a spiral shape")
DefNode(GeometryNode, GEO_NODE_CURVE_PRIMITIVE_STAR, 0, CurveStar, "Star", "Generate a poly spline in a star pattern by connecting alternating points of two circles")
DefNode(GeometryNode, GEO_NODE_CURVE_SET_HANDLE_TYPE, def_geo_curve_set_handle_type, CurveSetHandles, "Set Handle Type", "Set the handle type for the control points of a Bézier curve")
DefNode(GeometryNode, GEO_NODE_CURVE_SPLINE_PARAMETER,0, SplineParameter, "Spline Parameter", "Retrieve how far along each spline a control point is")
DefNode(GeometryNode, GEO_NODE_CURVE_SPLINE_TYPE, 0, CurveSplineType, "Set Spline Type", "Change the type of curves")
DefNode(GeometryNode, GEO_NODE_CURVE_TO_MESH, 0, CurveToMesh, "Curve to Mesh", "Convert curves into a mesh, optionally with a custom profile shape defined by curves")
DefNode(GeometryNode, GEO_NODE_CURVE_TO_POINTS, 0, CurveToPoints, "Curve to Points", "Generate a point cloud by sampling positions along curves")
DefNode(GeometryNode, GEO_NODE_CURVE_TOPOLOGY_CURVE_OF_POINT, 0, CurveOfPoint, "Curve of Point", "Retrieve the curve a control point is part of")
DefNode(GeometryNode, GEO_NODE_CURVE_TOPOLOGY_POINTS_OF_CURVE, 0, PointsOfCurve, "Points of Curve", "Retrieve a point index within a curve")
DefNode(GeometryNode, GEO_NODE_CURVES_TO_GREASE_PENCIL, 0, CurvesToGreasePencil, "Curves to Grease Pencil", "Convert the curves in each top-level instance into Grease Pencil layer")
DefNode(GeometryNode, GEO_NODE_DEFORM_CURVES_ON_SURFACE, 0, DeformCurvesOnSurface, "Deform Curves on Surface", "Translate and rotate curves based on changes between the object's original and evaluated surface mesh")
DefNode(GeometryNode, GEO_NODE_DELETE_GEOMETRY, 0, DeleteGeometry, "Delete Geometry", "Remove selected elements of a geometry")
DefNode(GeometryNode, GEO_NODE_DISTRIBUTE_POINTS_IN_GRID, 0, DistributePointsInGrid, "Distribute Points in Grid", "Generate points inside a volume grid")
DefNode(GeometryNode, GEO_NODE_DISTRIBUTE_POINTS_IN_VOLUME, 0, DistributePointsInVolume, "Distribute Points in Volume", "Generate points inside a volume")
DefNode(GeometryNode, GEO_NODE_DISTRIBUTE_POINTS_ON_FACES, def_geo_distribute_points_on_faces, DistributePointsOnFaces, "Distribute Points on Faces", "Generate points spread out on the surface of a mesh")
DefNode(GeometryNode, GEO_NODE_DUAL_MESH, 0, DualMesh, "Dual Mesh", "Convert Faces into vertices and vertices into faces")
DefNode(GeometryNode, GEO_NODE_DUPLICATE_ELEMENTS, 0, DuplicateElements, "Duplicate Elements", "Generate an arbitrary number copies of each selected input element")
DefNode(GeometryNode, GEO_NODE_EDGE_PATHS_TO_CURVES, 0, EdgePathsToCurves, "Edge Paths to Curves", "Output curves following paths across mesh edges")
DefNode(GeometryNode, GEO_NODE_EDGE_PATHS_TO_SELECTION, 0, EdgePathsToSelection, "Edge Paths to Selection", "Output a selection of edges by following paths across mesh edges")
DefNode(GeometryNode, GEO_NODE_EDGES_TO_FACE_GROUPS, 0, EdgesToFaceGroups, "Edges to Face Groups", "Group faces into regions surrounded by the selected boundary edges")
DefNode(GeometryNode, GEO_NODE_EVALUATE_AT_INDEX, 0, FieldAtIndex, "Evaluate at Index", "Retrieve data of other elements in the context's geometry")
DefNode(GeometryNode, GEO_NODE_EVALUATE_ON_DOMAIN, 0, FieldOnDomain, "Evaluate on Domain", "Retrieve values from a field on a different domain besides the domain from the context")
DefNode(GeometryNode, GEO_NODE_EXTRUDE_MESH, 0, ExtrudeMesh, "Extrude Mesh", "Generate new vertices, edges, or faces from selected elements and move them based on an offset while keeping them connected by their boundary")
DefNode(GeometryNode, GEO_NODE_FILL_CURVE, 0, FillCurve, "Fill Curve", "Generate a mesh on the XY plane with faces on the inside of input curves")
DefNode(GeometryNode, GEO_NODE_FILLET_CURVE, 0, FilletCurve, "Fillet Curve", "Round corners by generating circular arcs on each control point")
DefNode(GeometryNode, GEO_NODE_FLIP_FACES, 0, FlipFaces, "Flip Faces", "Reverse the order of the vertices and edges of selected faces, flipping their normal direction")
DefNode(GeometryNode, GEO_NODE_FOREACH_GEOMETRY_ELEMENT_INPUT, def_geo_foreach_geometry_element_input, ForeachGeometryElementInput, "For Each Geometry Element Input", "")
DefNode(GeometryNode, GEO_NODE_FOREACH_GEOMETRY_ELEMENT_OUTPUT, def_geo_foreach_geometry_element_output, ForeachGeometryElementOutput, "For Each Geometry Element Output", "")
DefNode(GeometryNode, GEO_NODE_GEOMETRY_TO_INSTANCE, 0, GeometryToInstance, "Geometry to Instance", "Convert each input geometry into an instance, which can be much faster than the Join Geometry node when the inputs are large")
DefNode(GeometryNode, GEO_NODE_GET_NAMED_GRID, 0, GetNamedGrid, "Get Named Grid", "Get volume grid from a volume geometry with the specified name")
DefNode(GeometryNode, GEO_NODE_GIZMO_DIAL, 0, GizmoDial, "Dial Gizmo", "Show a dial gizmo in the viewport for a value")
DefNode(GeometryNode, GEO_NODE_GIZMO_LINEAR, 0, GizmoLinear, "Linear Gizmo", "Show a linear gizmo in the viewport for a value")
DefNode(GeometryNode, GEO_NODE_GIZMO_TRANSFORM, rna_def_geo_gizmo_transform, GizmoTransform, "Transform Gizmo", "Show a transform gizmo in the viewport")
DefNode(GeometryNode, GEO_NODE_GREASE_PENCIL_TO_CURVES, 0, GreasePencilToCurves, "Grease Pencil to Curves", "Convert Grease Pencil layers into curve instances")
DefNode(GeometryNode, GEO_NODE_GRID_TO_MESH, 0, GridToMesh, "Grid to Mesh", "Generate a mesh on the \"surface\" of a volume grid")
DefNode(GeometryNode, GEO_NODE_IMAGE_INFO, 0, ImageInfo, "Image Info", "Retrieve information about an image")
DefNode(GeometryNode, GEO_NODE_IMAGE_TEXTURE, def_geo_image_texture, ImageTexture, "Image Texture", "Sample values from an image texture")
DefNode(GeometryNode, GEO_NODE_IMAGE, def_geo_image, InputImage, "Image", "Input image")
DefNode(GeometryNode, GEO_NODE_IMPORT_OBJ, 0, ImportOBJ, "Import OBJ", "Import geometry from an OBJ file")
DefNode(GeometryNode, GEO_NODE_IMPORT_PLY, 0, ImportPLY, "Import PLY", "Import a point cloud from a PLY file")
DefNode(GeometryNode, GEO_NODE_IMPORT_STL, 0, ImportSTL, "Import STL", "Import a mesh from an STL file")
DefNode(GeometryNode, GEO_NODE_INDEX_OF_NEAREST, 0, IndexOfNearest, "Index of Nearest", "Find the nearest element in a group. Similar to the \"Sample Nearest\" node")
DefNode(GeometryNode, GEO_NODE_INDEX_SWITCH, def_geo_index_switch, IndexSwitch, "Index Switch", "Choose between an arbitrary number of values with an index")
DefNode(GeometryNode, GEO_NODE_INPUT_ACTIVE_CAMERA, 0, InputActiveCamera, "Active Camera", "Retrieve the scene's active camera")
DefNode(GeometryNode, GEO_NODE_INPUT_COLLECTION, def_geo_input_collection, InputCollection, "Collection", "Output a single collection")
DefNode(GeometryNode, GEO_NODE_INPUT_CURVE_HANDLES, 0, InputCurveHandlePositions, "Curve Handle Positions", "Retrieve the position of each Bézier control point's handles")
DefNode(GeometryNode, GEO_NODE_INPUT_CURVE_TILT, 0, InputCurveTilt, "Curve Tilt", "Retrieve the angle at each control point used to twist the curve's normal around its tangent")
DefNode(GeometryNode, GEO_NODE_INPUT_EDGE_SMOOTH, 0, InputEdgeSmooth, "Is Edge Smooth", "Retrieve whether each edge is marked for smooth or split normals")
DefNode(GeometryNode, GEO_NODE_INPUT_FACE_SMOOTH, 0, InputShadeSmooth, "Is Face Smooth", "Retrieve whether each face is marked for smooth or sharp normals")
DefNode(GeometryNode, GEO_NODE_INPUT_ID, 0, InputID, "ID", "Retrieve a stable random identifier value from the \"id\" attribute on the point domain, or the index if the attribute does not exist")
DefNode(GeometryNode, GEO_NODE_INPUT_INDEX, 0, InputIndex, "Index", "Retrieve an integer value indicating the position of each element in the list, starting at zero")
DefNode(GeometryNode, GEO_NODE_INPUT_INSTANCE_ROTATION, 0, InputInstanceRotation, "Instance Rotation", "Retrieve the rotation of each instance in the geometry")
DefNode(GeometryNode, GEO_NODE_INPUT_INSTANCE_SCALE, 0, InputInstanceScale, "Instance Scale", "Retrieve the scale of each instance in the geometry")
DefNode(GeometryNode, GEO_NODE_INPUT_INSTANCE_TRANSFORM, 0, InstanceTransform, "Instance Transform", "Retrieve the full transformation of each instance in the geometry")
DefNode(GeometryNode, GEO_NODE_INPUT_MATERIAL_INDEX, 0, InputMaterialIndex, "Material Index", "Retrieve the index of the material used for each element in the geometry's list of materials")
DefNode(GeometryNode, GEO_NODE_INPUT_MATERIAL, def_geo_input_material, InputMaterial, "Material", "Output a single material")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_EDGE_ANGLE, 0, InputMeshEdgeAngle, "Edge Angle", "The angle between the normals of connected manifold faces")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_EDGE_NEIGHBORS, 0,InputMeshEdgeNeighbors, "Edge Neighbors", "Retrieve the number of faces that use each edge as one of their sides")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_EDGE_VERTICES, 0, InputMeshEdgeVertices, "Edge Vertices", "Retrieve topology information relating to each edge of a mesh")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_FACE_AREA, 0, InputMeshFaceArea, "Face Area", "Calculate the surface area of a mesh's faces")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_FACE_IS_PLANAR, 0, InputMeshFaceIsPlanar, "Is Face Planar", "Retrieve whether all triangles in a face are on the same plane, i.e. whether they have the same normal")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_FACE_NEIGHBORS, 0,InputMeshFaceNeighbors, "Face Neighbors", "Retrieve topology information relating to each face of a mesh")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_ISLAND, 0, InputMeshIsland, "Mesh Island", "Retrieve information about separate connected regions in a mesh")
DefNode(GeometryNode, GEO_NODE_INPUT_MESH_VERTEX_NEIGHBORS, 0, InputMeshVertexNeighbors, "Vertex Neighbors", "Retrieve topology information relating to each vertex of a mesh")
DefNode(GeometryNode, GEO_NODE_INPUT_NAMED_ATTRIBUTE, 0, InputNamedAttribute, "Named Attribute", "Retrieve the data of a specified attribute")
DefNode(GeometryNode, GEO_NODE_INPUT_NAMED_LAYER_SELECTION, 0, InputNamedLayerSelection, "Named Layer Selection", "Output a selection of a Grease Pencil layer")
DefNode(GeometryNode, GEO_NODE_INPUT_NORMAL, 0, InputNormal, "Normal", "Retrieve a unit length vector indicating the direction pointing away from the geometry at each element")
DefNode(GeometryNode, GEO_NODE_INPUT_OBJECT, def_geo_input_object, InputObject, "Object", "Output a single object")
DefNode(GeometryNode, GEO_NODE_INPUT_POSITION, 0, InputPosition, "Position", "Retrieve a vector indicating the location of each element")
DefNode(GeometryNode, GEO_NODE_INPUT_RADIUS, 0, InputRadius, "Radius", "Retrieve the radius at each point on curve or point cloud geometry")
DefNode(GeometryNode, GEO_NODE_INPUT_SCENE_TIME, 0, InputSceneTime, "Scene Time", "Retrieve the current time in the scene's animation in units of seconds or frames")
DefNode(GeometryNode, GEO_NODE_INPUT_SHORTEST_EDGE_PATHS, 0, InputShortestEdgePaths, "Shortest Edge Paths", "Find the shortest paths along mesh edges to selected end vertices, with customizable cost per edge")
DefNode(GeometryNode, GEO_NODE_INPUT_SPLINE_CYCLIC, 0,InputSplineCyclic, "Is Spline Cyclic", "Retrieve whether each spline endpoint connects to the beginning")
DefNode(GeometryNode, GEO_NODE_INPUT_SPLINE_LENGTH, 0, SplineLength, "Spline Length", "Retrieve the total length of each spline, as a distance or as a number of points")
DefNode(GeometryNode, GEO_NODE_INPUT_SPLINE_RESOLUTION, 0, InputSplineResolution, "Spline Resolution", "Retrieve the number of evaluated points that will be generated for every control point on curves")
DefNode(GeometryNode, GEO_NODE_INPUT_TANGENT, 0, InputTangent, "Curve Tangent", "Retrieve the direction of curves at each control point")
DefNode(GeometryNode, GEO_NODE_INSTANCE_ON_POINTS, 0, InstanceOnPoints, "Instance on Points", "Generate a reference to geometry at each of the input points, without duplicating its underlying data")
DefNode(GeometryNode, GEO_NODE_INSTANCES_TO_POINTS, 0,InstancesToPoints, "Instances to Points", "Generate points at the origins of instances.\nNote: Nested instances are not affected by this node")
DefNode(GeometryNode, GEO_NODE_INTERPOLATE_CURVES, 0, InterpolateCurves, "Interpolate Curves", "Generate new curves on points by interpolating between existing curves")
DefNode(GeometryNode, GEO_NODE_IS_VIEWPORT, 0, IsViewport, "Is Viewport", "Retrieve whether the nodes are being evaluated for the viewport rather than the final render")
DefNode(GeometryNode, GEO_NODE_JOIN_GEOMETRY, 0, JoinGeometry, "Join Geometry", "Merge separately generated geometries into a single one")
DefNode(GeometryNode, GEO_NODE_MATERIAL_SELECTION, 0, MaterialSelection, "Material Selection", "Provide a selection of faces that use the specified material")
DefNode(GeometryNode, GEO_NODE_MENU_SWITCH, def_geo_menu_switch, MenuSwitch, "Menu Switch", "Select from multiple inputs by name")
DefNode(GeometryNode, GEO_NODE_MERGE_BY_DISTANCE, 0, MergeByDistance, "Merge by Distance", "Merge vertices or points within a given distance")
DefNode(GeometryNode, GEO_NODE_MERGE_LAYERS, 0, MergeLayers, "Merge Layers", "Join groups of Grease Pencil layers into one")
DefNode(GeometryNode, GEO_NODE_MESH_BOOLEAN, 0, MeshBoolean, "Mesh Boolean", "Cut, subtract, or join multiple mesh inputs")
DefNode(GeometryNode, GEO_NODE_MESH_FACE_GROUP_BOUNDARIES, 0, MeshFaceSetBoundaries, "Face Group Boundaries", "Find edges on the boundaries between groups of faces with the same ID value")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_CIRCLE, 0, MeshCircle, "Mesh Circle", "Generate a circular ring of edges")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_CONE, 0,MeshCone, "Cone", "Generate a cone mesh")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_CUBE, 0,MeshCube, "Cube", "Generate a cuboid mesh with variable side lengths and subdivisions")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_CYLINDER, 0, MeshCylinder, "Cylinder", "Generate a cylinder mesh")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_GRID, 0,MeshGrid, "Grid", "Generate a planar mesh on the XY plane")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_ICO_SPHERE, 0, MeshIcoSphere, "Ico Sphere", "Generate a spherical mesh that consists of equally sized triangles")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_LINE, 0,MeshLine, "Mesh Line", "Generate vertices in a line and connect them with edges")
DefNode(GeometryNode, GEO_NODE_MESH_PRIMITIVE_UV_SPHERE, 0, MeshUVSphere, "UV Sphere", "Generate a spherical mesh with quads, except for triangles at the top and bottom")
DefNode(GeometryNode, GEO_NODE_MESH_TO_CURVE, 0, MeshToCurve, "Mesh to Curve", "Generate a curve from a mesh")
DefNode(GeometryNode, GEO_NODE_MESH_TO_DENSITY_GRID, 0, MeshToDensityGrid, "Mesh to Density Grid", "Create a filled volume grid from a mesh")
DefNode(GeometryNode, GEO_NODE_MESH_TO_POINTS, 0, MeshToPoints, "Mesh to Points", "Generate a point cloud from a mesh's vertices")
DefNode(GeometryNode, GEO_NODE_MESH_TO_SDF_GRID, 0, MeshToSDFGrid, "Mesh to SDF Grid", "Create a signed distance volume grid from a mesh")
DefNode(GeometryNode, GEO_NODE_MESH_TO_VOLUME, 0, MeshToVolume, "Mesh to Volume", "Create a fog volume with the shape of the input mesh's surface")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_EDGE, 0, CornersOfEdge, "Corners of Edge", "Retrieve face corners connected to edges")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_FACE, 0, CornersOfFace, "Corners of Face", "Retrieve corners that make up a face")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_VERTEX, 0, CornersOfVertex, "Corners of Vertex", "Retrieve face corners connected to vertices")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_EDGES_OF_CORNER, 0, EdgesOfCorner, "Edges of Corner", "Retrieve the edges on both sides of a face corner")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_EDGES_OF_VERTEX, 0, EdgesOfVertex, "Edges of Vertex", "Retrieve the edges connected to each vertex")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_FACE_OF_CORNER, 0, FaceOfCorner, "Face of Corner", "Retrieve the face each face corner is part of")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_OFFSET_CORNER_IN_FACE, 0, OffsetCornerInFace, "Offset Corner in Face", "Retrieve corners in the same face as another")
DefNode(GeometryNode, GEO_NODE_MESH_TOPOLOGY_VERTEX_OF_CORNER, 0, VertexOfCorner, "Vertex of Corner", "Retrieve the vertex each face corner is attached to")
DefNode(GeometryNode, GEO_NODE_OBJECT_INFO, 0, ObjectInfo, "Object Info", "Retrieve information from an object")
DefNode(GeometryNode, GEO_NODE_OFFSET_POINT_IN_CURVE, 0, OffsetPointInCurve, "Offset Point in Curve", "Offset a control point index within its curve")
DefNode(GeometryNode, GEO_NODE_POINTS_TO_CURVES, 0, PointsToCurves, "Points to Curves", "Split all points to curve by its group ID and reorder by weight")
DefNode(GeometryNode, GEO_NODE_POINTS_TO_SDF_GRID, 0, PointsToSDFGrid, "Points to SDF Grid", "Create a signed distance volume grid from points")
DefNode(GeometryNode, GEO_NODE_POINTS_TO_VERTICES, 0, PointsToVertices, "Points to Vertices", "Generate a mesh vertex for each point cloud point")
DefNode(GeometryNode, GEO_NODE_POINTS_TO_VOLUME, 0, PointsToVolume, "Points to Volume", "Generate a fog volume sphere around every point")
DefNode(GeometryNode, GEO_NODE_POINTS, 0, Points, "Points", "Generate a point cloud with positions and radii defined by fields")
DefNode(GeometryNode, GEO_NODE_PROXIMITY, 0, Proximity, "Geometry Proximity", "Compute the closest location on the target geometry")
DefNode(GeometryNode, GEO_NODE_RAYCAST, 0, Raycast, "Raycast", "Cast rays from the context geometry onto a target geometry, and retrieve information from each hit point")
DefNode(GeometryNode, GEO_NODE_REALIZE_INSTANCES, 0, RealizeInstances, "Realize Instances", "Convert instances into real geometry data")
DefNode(GeometryNode, GEO_NODE_REMOVE_ATTRIBUTE, 0, RemoveAttribute, "Remove Named Attribute", "Delete an attribute with a specified name from a geometry. Typically used to optimize performance")
DefNode(GeometryNode, GEO_NODE_REPEAT_INPUT, def_geo_repeat_input, RepeatInput, "Repeat Input", "")
DefNode(GeometryNode, GEO_NODE_REPEAT_OUTPUT, def_geo_repeat_output, RepeatOutput, "Repeat Output", "")
DefNode(GeometryNode, GEO_NODE_REPLACE_MATERIAL, 0, ReplaceMaterial, "Replace Material", "Swap one material with another")
DefNode(GeometryNode, GEO_NODE_RESAMPLE_CURVE, 0, ResampleCurve, "Resample Curve", "Generate a poly spline for each input spline")
DefNode(GeometryNode, GEO_NODE_REVERSE_CURVE, 0, ReverseCurve, "Reverse Curve", "Change the direction of curves by swapping their start and end data")
DefNode(GeometryNode, GEO_NODE_ROTATE_INSTANCES, 0, RotateInstances, "Rotate Instances", "Rotate geometry instances in local or global space")
DefNode(GeometryNode, GEO_NODE_SAMPLE_CURVE, def_geo_curve_sample, SampleCurve, "Sample Curve", "Retrieve data from a point on a curve at a certain distance from its start")
DefNode(GeometryNode, GEO_NODE_SAMPLE_GRID_INDEX, 0, SampleGridIndex, "Sample Grid Index", "Retrieve volume grid values at specific voxels")
DefNode(GeometryNode, GEO_NODE_SAMPLE_GRID, 0, SampleGrid, "Sample Grid", "")
DefNode(GeometryNode, GEO_NODE_SAMPLE_INDEX, def_geo_sample_index, SampleIndex, "Sample Index", "Retrieve values from specific geometry elements")
DefNode(GeometryNode, GEO_NODE_SAMPLE_NEAREST_SURFACE, 0, SampleNearestSurface, "Sample Nearest Surface", "Calculate the interpolated value of a mesh attribute on the closest point of its surface")
DefNode(GeometryNode, GEO_NODE_SAMPLE_NEAREST, 0, SampleNearest, "Sample Nearest", "Find the element of a geometry closest to a position. Similar to the \"Index of Nearest\" node")
DefNode(GeometryNode, GEO_NODE_SAMPLE_UV_SURFACE, 0, SampleUVSurface, "Sample UV Surface", "Calculate the interpolated values of a mesh attribute at a UV coordinate")
DefNode(GeometryNode, GEO_NODE_SCALE_ELEMENTS, 0, ScaleElements, "Scale Elements", "Scale groups of connected edges and faces")
DefNode(GeometryNode, GEO_NODE_SCALE_INSTANCES, 0, ScaleInstances, "Scale Instances", "Scale geometry instances in local or global space")
DefNode(GeometryNode, GEO_NODE_SDF_GRID_BOOLEAN, 0, SDFGridBoolean, "SDF Grid Boolean", "Cut, subtract, or join multiple SDF volume grid inputs")
DefNode(GeometryNode, GEO_NODE_SELF_OBJECT, 0, SelfObject, "Self Object", "Retrieve the object that contains the geometry nodes modifier currently being executed")
DefNode(GeometryNode, GEO_NODE_SEPARATE_COMPONENTS, 0,SeparateComponents, "Separate Components", "Split a geometry into a separate output for each type of data in the geometry")
DefNode(GeometryNode, GEO_NODE_SEPARATE_GEOMETRY, 0, SeparateGeometry, "Separate Geometry", "Split a geometry into two geometry outputs based on a selection")
DefNode(GeometryNode, GEO_NODE_SET_CURVE_HANDLES, 0, SetCurveHandlePositions, "Set Handle Positions", "Set the positions for the handles of Bézier curves")
DefNode(GeometryNode, GEO_NODE_SET_CURVE_NORMAL, 0, SetCurveNormal, "Set Curve Normal", "Set the evaluation mode for curve normals")
DefNode(GeometryNode, GEO_NODE_SET_CURVE_RADIUS, 0, SetCurveRadius, "Set Curve Radius", "Set the radius of the curve at each control point")
DefNode(GeometryNode, GEO_NODE_SET_CURVE_TILT, 0, SetCurveTilt, "Set Curve Tilt", "Set the tilt angle at each curve control point")
DefNode(GeometryNode, GEO_NODE_SET_GEOMETRY_NAME, 0, SetGeometryName, "Set Geometry Name", "Set the name of a geometry for easier debugging")
DefNode(GeometryNode, GEO_NODE_SET_ID, 0, SetID, "Set ID", "Set the id attribute on the input geometry, mainly used internally for randomizing")
DefNode(GeometryNode, GEO_NODE_SET_INSTANCE_TRANSFORM, 0, SetInstanceTransform, "Set Instance Transform", "Set the transformation matrix of every instance")
DefNode(GeometryNode, GEO_NODE_SET_MATERIAL_INDEX, 0, SetMaterialIndex, "Set Material Index", "Set the material index for each selected geometry element")
DefNode(GeometryNode, GEO_NODE_SET_MATERIAL, 0, SetMaterial, "Set Material", "Assign a material to geometry elements")
DefNode(GeometryNode, GEO_NODE_SET_POINT_RADIUS, 0, SetPointRadius, "Set Point Radius", "Set the display size of point cloud points")
DefNode(GeometryNode, GEO_NODE_SET_POSITION, 0, SetPosition, "Set Position", "Set the location of each point")
DefNode(GeometryNode, GEO_NODE_SET_SHADE_SMOOTH, 0, SetShadeSmooth, "Set Shade Smooth", "Control the smoothness of mesh normals around each face by changing the \"shade smooth\" attribute")
DefNode(GeometryNode, GEO_NODE_SET_SPLINE_CYCLIC, 0, SetSplineCyclic, "Set Spline Cyclic", "Control whether each spline loops back on itself by changing the \"cyclic\" attribute")
DefNode(GeometryNode, GEO_NODE_SET_SPLINE_RESOLUTION, 0, SetSplineResolution, "Set Spline Resolution", "Control how many evaluated points should be generated on every curve segment")
DefNode(GeometryNode, GEO_NODE_SIMULATION_INPUT, def_geo_simulation_input, SimulationInput, "Simulation Input", "Input data for the simulation zone")
DefNode(GeometryNode, GEO_NODE_SIMULATION_OUTPUT, def_geo_simulation_output, SimulationOutput, "Simulation Output", "Output data from the simulation zone")
DefNode(GeometryNode, GEO_NODE_SORT_ELEMENTS, 0, SortElements, "Sort Elements", "Rearrange geometry elements, changing their indices")
DefNode(GeometryNode, GEO_NODE_SPLIT_EDGES, 0, SplitEdges, "Split Edges", "Duplicate mesh edges and break connections with the surrounding faces")
DefNode(GeometryNode, GEO_NODE_SPLIT_TO_INSTANCES, 0, SplitToInstances, "Split to Instances", "Create separate geometries containing the elements from the same group")
DefNode(GeometryNode, GEO_NODE_STORE_NAMED_ATTRIBUTE, 0, StoreNamedAttribute, "Store Named Attribute", "Store the result of a field on a geometry as an attribute with the specified name")
DefNode(GeometryNode, GEO_NODE_STORE_NAMED_GRID, 0, StoreNamedGrid, "Store Named Grid", "Store grid data in a volume geometry with the specified name")
DefNode(GeometryNode, GEO_NODE_STRING_JOIN, 0, StringJoin, "Join Strings", "Combine any number of input strings")
DefNode(GeometryNode, GEO_NODE_STRING_TO_CURVES, def_geo_string_to_curves, StringToCurves, "String to Curves", "Generate a paragraph of text with a specific font, using a curve instance to store each character")
DefNode(GeometryNode, GEO_NODE_SUBDIVIDE_CURVE, 0, SubdivideCurve, "Subdivide Curve", "Dividing each curve segment into a specified number of pieces")
DefNode(GeometryNode, GEO_NODE_SUBDIVIDE_MESH, 0, SubdivideMesh, "Subdivide Mesh", "Divide mesh faces into smaller ones without changing the shape or volume, using linear interpolation to place the new vertices")
DefNode(GeometryNode, GEO_NODE_SUBDIVISION_SURFACE, 0,SubdivisionSurface, "Subdivision Surface", "Divide mesh faces to form a smooth surface, using the Catmull-Clark subdivision method")
DefNode(GeometryNode, GEO_NODE_SWITCH, 0, Switch, "Switch", "Switch between two inputs")
DefNode(GeometryNode, GEO_NODE_TOOL_3D_CURSOR, 0, Tool3DCursor, "3D Cursor", "The scene's 3D cursor location and rotation")
DefNode(GeometryNode, GEO_NODE_TOOL_ACTIVE_ELEMENT, 0, ToolActiveElement, "Active Element", "Active element indices of the edited geometry, for tool execution")
DefNode(GeometryNode, GEO_NODE_TOOL_FACE_SET, 0, ToolFaceSet, "Face Set", "Each face's sculpt face set value")
DefNode(GeometryNode, GEO_NODE_TOOL_MOUSE_POSITION, 0, ToolMousePosition, "Mouse Position", "Retrieve the position of the mouse cursor")
DefNode(GeometryNode, GEO_NODE_TOOL_SELECTION, 0, ToolSelection, "Selection", "User selection of the edited geometry, for tool execution")
DefNode(GeometryNode, GEO_NODE_TOOL_SET_FACE_SET, 0, ToolSetFaceSet, "Set Face Set", "Set sculpt face set values for faces")
DefNode(GeometryNode, GEO_NODE_TOOL_SET_SELECTION, 0, ToolSetSelection, "Set Selection", "Set selection of the edited geometry, for tool execution")
DefNode(GeometryNode, GEO_NODE_TOOL_VIEWPORT_TRANSFORM, 0, ViewportTransform, "Viewport Transform", "Retrieve the view direction and location of the 3D viewport")
DefNode(GeometryNode, GEO_NODE_TRANSFORM_GEOMETRY, 0, Transform, "Transform Geometry", "Translate, rotate or scale the geometry")
DefNode(GeometryNode, GEO_NODE_TRANSLATE_INSTANCES, 0,TranslateInstances, "Translate Instances", "Move top-level geometry instances in local or global space")
DefNode(GeometryNode, GEO_NODE_TRIANGULATE, 0, Triangulate, "Triangulate", "Convert all faces in a mesh to triangular faces")
DefNode(GeometryNode, GEO_NODE_TRIM_CURVE, 0, TrimCurve, "Trim Curve", "Shorten curves by removing portions at the start or end")
DefNode(GeometryNode, GEO_NODE_UV_PACK_ISLANDS, 0, UVPackIslands, "Pack UV Islands", "Scale islands of a UV map and move them so they fill the UV space as much as possible")
DefNode(GeometryNode, GEO_NODE_UV_UNWRAP, 0, UVUnwrap, "UV Unwrap", "Generate a UV map based on seam edges")
DefNode(GeometryNode, GEO_NODE_VIEWER, 0, Viewer, "Viewer", "Display the input data in the Spreadsheet Editor")
DefNode(GeometryNode, GEO_NODE_VOLUME_CUBE, 0, VolumeCube, "Volume Cube", "Generate a dense volume with a field that controls the density at each grid voxel based on its position")
DefNode(GeometryNode, GEO_NODE_VOLUME_TO_MESH, 0, VolumeToMesh, "Volume to Mesh", "Generate a mesh on the \"surface\" of a volume")
DefNode(GeometryNode, GEO_NODE_WARNING, 0, Warning, "Warning", "Create custom warnings in node groups")

/* undefine macros */
#undef DefNode

    /* clang-format on */
