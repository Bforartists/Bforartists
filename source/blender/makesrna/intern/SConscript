#!/usr/bin/env python
#
# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The Original Code is Copyright (C) 2006, Blender Foundation
# All rights reserved.
#
# The Original Code is: all of this file.
#
# Contributor(s): Nathan Letwory.
#
# ***** END GPL LICENSE BLOCK *****

import sys
import os

def normpath(path):
    return os.path.abspath(os.path.normpath(path))

Import ('env')
cflags = [] #['-Wall']
defines = []
root_build_dir=normpath(env['BF_BUILDDIR'])

source_files = env.Glob('*.c')
source_files.remove('rna_access.c')

generated_files = source_files[:]
generated_files.remove('rna_define.c')
generated_files.remove('makesrna.c')

api_files = env.Glob('*_api.c')
for api_file in api_files:
    generated_files.remove(api_file)

generated_files = [filename[:-2] + '_gen.c' for filename in generated_files]

makesrna_tool = env.Clone()
rna = env.Clone()
makesrna_tool.Append(CCFLAGS = '-DBASE_HEADER="\\"source/blender/makesrna/\\"" ')

defs = []

incs = [
    '#/intern/guardedalloc',
    '#/extern/glew/include',
    '#/intern/audaspace/intern',
    '#/intern/cycles/blender',
    '#/intern/smoke/extern',
    '../../blenfont',
    '../../blenkernel',
    '../../blenlib',
    '../../bmesh',
    '../../editors/include',
    '../../ikplugin',
    '../../imbuf',
    '../../makesdna',
    '../../makesrna',
    '../../render/extern/include',
    '../../windowmanager',
    ]
incs = ' '.join(incs)

if env['WITH_BF_SMOKE']:
    defs.append('WITH_SMOKE')

if env['WITH_BF_BULLET']:
    defs.append('WITH_BULLET')
    incs += ' #/intern/rigidbody'

if env['WITH_BF_OIIO']:
    defs.append('WITH_OPENIMAGEIO')

if env['WITH_BF_OPENEXR']:
    defs.append('WITH_OPENEXR')

if env['WITH_BF_TIFF']:
    defs.append('WITH_TIFF')

if env['WITH_BF_OPENJPEG']:
    defs.append('WITH_OPENJPEG')

if env['WITH_BF_DDS']:
    defs.append('WITH_DDS')

if env['WITH_BF_CINEON']:
    defs.append('WITH_CINEON')

if env['WITH_BF_HDR']:
    defs.append('WITH_HDR')

if env['WITH_BF_FRAMESERVER']:
    defs.append('WITH_FRAMESERVER')

if env['WITH_BF_FFMPEG']:
    defs.append('WITH_FFMPEG')
    incs += ' ' + env['BF_FFMPEG_INC']

if env['WITH_BF_QUICKTIME']:
    defs.append('WITH_QUICKTIME')
    incs += ' ../../quicktime'

if env['WITH_BF_GAMEENGINE']:
    defs.append('WITH_GAMEENGINE')
    
if env['WITH_BF_FFTW3']:
    defs.append('WITH_FFTW3')

if env['WITH_BF_SDL']:
    defs.append('WITH_SDL')

if env['WITH_BF_OPENAL']:
    defs.append('WITH_OPENAL')

if env['WITH_BF_JACK']:
    defs.append('WITH_JACK')

if env['BF_UNIT_TEST']:
    defs.append('UNIT_TEST')

if env['WITH_BF_PYTHON']:
    defs.append('WITH_PYTHON')

if env['WITH_BF_COLLADA']:
    defs.append('WITH_COLLADA')

if env['WITH_BF_CYCLES']:
    defs.append('WITH_CYCLES')

if env['OURPLATFORM'] == 'linux':
    cflags='-pthread'

if env['OURPLATFORM'] in ('win32-vc', 'win32-mingw', 'linuxcross', 'win64-vc', 'win64-mingw'):
    incs += ' ' + env['BF_PTHREADS_INC']

if env['WITH_BF_INTERNATIONAL']:
    defs.append('WITH_INTERNATIONAL')

if not env['BF_DEBUG']:
    defs.append('NDEBUG')

makesrna_tool.Append(CPPDEFINES=defs)

makesrna_tool.Append (CPPPATH = Split(incs))

if env['OURPLATFORM'] == 'linuxcross':
    USE_WINE = True # when cross compiling on linux 64bit this is useful
else:
    USE_WINE = False

if not USE_WINE:
    if env['OURPLATFORM'] == 'linuxcross':
        makesdna_tool.Replace(CC='gcc')
        makesdna_tool.Replace(AR='ar')
        makesdna_tool.Replace(LINK='gcc')

if sys.platform != 'cygwin':
    makesrna_tool.Append (CCFLAGS = cflags)
makesrna_tool.Append (CPPDEFINES = defines)

libdir = root_build_dir+'/lib'
if not (root_build_dir[0]==os.sep or root_build_dir[1]==':'):
    libdir = '#' + libdir

makesrna_tool.Append (LIBPATH = libdir)

makesrna_tool.Append( CFLAGS = env['CFLAGS'])
makesrna_tool.Append( CCFLAGS = env['CCFLAGS'])
makesrna_tool.Append( LINKFLAGS = env['PLATFORM_LINKFLAGS'])

if env['BF_PROFILE']:
    makesrna_tool.Append (LINKFLAGS = env['BF_PROFILE_FLAGS'])

if env['BF_DEBUG']:
    makesrna_tool.Append(CFLAGS = env['BF_DEBUG_CFLAGS'])
    makesrna_tool.Append(CCFLAGS = env['BF_DEBUG_CCFLAGS'])
    if env['OURPLATFORM'] in ('win32-vc','win64-vc'):
        makesrna_tool.Append(LINKFLAGS = ['/DEBUG','/PDB:makesrna.pdb'])

targetpath = root_build_dir+'/makesrna'
if not (root_build_dir[0]==os.sep or root_build_dir[1]==':'):
    targetpath = '#' + targetpath

if env['OURPLATFORM'] == 'linux' and root_build_dir[0]==os.sep:
    makesrna = makesrna_tool.Program (target = targetpath, source = source_files, LIBS=['bf_intern_guardedalloc', 'bf_dna', 'bf_blenlib'])
else:
    makesrna = makesrna_tool.Program (target = targetpath, source = source_files, LIBS=['bf_intern_guardedalloc', 'bf_dna', 'bf_blenlib'])

rna_dict = rna.Dictionary()
rna.Depends (generated_files, makesrna)

# this seems bad, how to retrieve it from scons?
build_dir = root_build_dir + os.sep +'source' + os.sep + 'blender' + os.sep + 'makesrna' + os.sep + 'intern' + os.sep
    
if env['OURPLATFORM'] != 'linuxcross':
    if env['OURPLATFORM'] in ('win32-vc', 'win64-vc', 'win32-mingw', 'win64-mingw'):
        rna.Command (generated_files, '', "\"" + root_build_dir+os.sep+"makesrna.exe\" \""  + build_dir )
    else:
        rna.Command (generated_files, '', "\"" + root_build_dir+os.sep+"makesrna\" \""  + build_dir + '"' )
else:
    rna.Command (generated_files, '', root_build_dir+os.sep+"makesrna.exe "  + build_dir)
    
    if USE_WINE:
        rna.Command (generated_files, '', 'wine ' + root_build_dir+os.sep+"makesrna.exe "  + build_dir)
    else:
        rna.Command (generated_files, '', root_build_dir+os.sep+"makesrna.exe "  + build_dir)


obj = ['intern/rna_access.c']
for generated_file in generated_files:
    obj += ['intern/' + generated_file]

Return ('obj')

