#!/usr/bin/env python
#
# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The Original Code is Copyright (C) 2006, Blender Foundation
# All rights reserved.
#
# The Original Code is: all of this file.
#
# Contributor(s): Nathan Letwory.
#
# ***** END GPL LICENSE BLOCK *****

Import ('env')
import os

sources = env.Glob('intern/*.c')
sources.remove('intern' + os.sep + 'mask_rasterize.c')
sources.remove('intern' + os.sep + 'mask_evaluate.c')
sources.remove('intern' + os.sep + 'mask.c')

sources_mask = env.Glob('intern/mask*.c')

incs = [
    '.',
    '#/extern/libmv',
    '#/intern/ffmpeg',
    '#/intern/guardedalloc',
    '#/intern/memutil',
    '#/intern/mikktspace',
    '#/intern/raskter',
    '#/intern/rigidbody',
    '#/extern/bullet2/src',
    '#/extern/glew/include',
    '#/intern/audaspace/intern',
    '#/intern/bsp/extern',
    '#/intern/elbeem/extern',
    '#/intern/iksolver/extern',
    '#/intern/opennl/extern',
    '#/intern/smoke/extern',
    '#/intern/atomic',
    '../avi',
    '../blenfont',
    '../blenlib',
    '../blenloader',
    '../bmesh',
    '../gpu',
    '../ikplugin',
    '../imbuf',
    '../makesdna',
    '../makesrna',
    '../modifiers',
    '../nodes',
    '../render/extern/include',
    '../windowmanager',
    env['BF_OPENGL_INC'],
    env['BF_ZLIB_INC'],
    ]
incs = ' '.join(incs)

defs = [
    'GLEW_STATIC',
    ]

if env['WITH_BF_SMOKE']:
    defs.append('WITH_SMOKE')

if env['WITH_BF_FRAMESERVER']:
    defs.append('WITH_FRAMESERVER')

if env['WITH_BF_PYTHON']:
    incs += ' ../python'
    defs.append('WITH_PYTHON')
    if env['BF_DEBUG']:
        defs.append('DEBUG')

'''
if env['WITH_BF_ELTOPO']:
    incs += ' #/extern/eltopo'
    incs += ' #/extern/eltopo/eltopo3d'
    defs.append('WITH_ELTOPO')
'''
if env['WITH_BF_QUICKTIME']:
    incs += ' ../quicktime'

if env['WITH_BF_SDL']:
    incs += ' ' + env['BF_SDL_INC']
    defs.append('WITH_SDL')

if env['WITH_BF_OIIO']:
    defs.append('WITH_OPENIMAGEIO')

if env['WITH_BF_OPENEXR']:
    defs.append('WITH_OPENEXR')

if env['WITH_BF_TIFF']:
    defs.append('WITH_TIFF')

if env['WITH_BF_OPENJPEG']:
    defs.append('WITH_OPENJPEG')

if env['WITH_BF_DDS']:
    defs.append('WITH_DDS')

if env['WITH_BF_CINEON']:
    defs.append('WITH_CINEON')

if env['WITH_BF_HDR']:
    defs.append('WITH_HDR')

if env['WITH_BF_JACK']:
    defs.append('WITH_JACK')

if env['WITH_BF_FFMPEG']:
    defs.append('WITH_FFMPEG')
    incs += ' ' + env['BF_FFMPEG_INC']

if env['WITH_BF_QUICKTIME']:
    defs.append('WITH_QUICKTIME')
    incs += ' ' + env['BF_QUICKTIME_INC']

if env['WITH_BF_BULLET']:
    defs.append('WITH_BULLET')

if env['WITH_BF_FLUID']:
    defs.append('WITH_MOD_FLUID')

if env['WITH_BF_OCEANSIM']:
    defs.append('WITH_OCEANSIM')

if env['WITH_BF_LZO']:
    incs += ' #/extern/lzo/minilzo'
    defs.append('WITH_LZO')

if env['WITH_BF_LZMA']:
    incs += ' #/extern/lzma'
    defs.append('WITH_LZMA')

if env['WITH_BF_GAMEENGINE']:
    incs += ' #/extern/recastnavigation'
    defs.append('WITH_GAMEENGINE')
else:
    sources.remove('intern' + os.sep + 'navmesh_conversion.c')

if env['WITH_BF_LIBMV']:
    defs.append('WITH_LIBMV')

if env['WITH_BF_FFTW3']:
    defs.append('FFTW3=1')
    incs += ' ' + env['BF_FFTW3_INC'] 

if env['WITH_BF_INTERNATIONAL']:
    defs.append('WITH_INTERNATIONAL')

if env['WITH_BF_FREESTYLE']:
    defs.append('WITH_FREESTYLE')

if env['OURPLATFORM'] in ('win32-vc', 'win32-mingw', 'linuxcross', 'win64-vc', 'win64-mingw'):
    incs += ' ' + env['BF_PTHREADS_INC']


if env['OURPLATFORM'] in ('win32-vc', 'win64-vc'):
    env.BlenderLib ( libname = 'bf_blenkernel', sources = sources, includes = Split(incs), defines = defs, libtype=['core','player'], priority = [166,25]) #, cc_compileflags = env['CCFLAGS'].append('/WX') )
else:
    env.BlenderLib ( libname = 'bf_blenkernel', sources = sources, includes = Split(incs), defines = defs, libtype=['core','player', 'player2'], priority = [166,25,0] )

env.BlenderLib ( libname = 'bf_blenkernel_mask', sources = sources_mask, includes = Split(incs), defines = defs, libtype=['core','player', 'player2'], priority = [200,25,0] )
