diff --git a/cmake/defaults/msvcdefaults.cmake b/cmake/defaults/msvcdefaults.cmake
index f5780c0db..9b5d5c68c 100644
--- a/cmake/defaults/msvcdefaults.cmake
+++ b/cmake/defaults/msvcdefaults.cmake
@@ -126,9 +126,6 @@ _add_define("WIN32_LEAN_AND_MEAN")
 # for all translation units.
 set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /bigobj")
 
-# Enable PDB generation.
-set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zi")
-
 # Enable multiprocessor builds.
 set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /MP")
 set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Gm-")
diff --git a/pxr/base/arch/timing.h b/pxr/base/arch/timing.h
index 2907195c0..7f8c6097c 100644
--- a/pxr/base/arch/timing.h
+++ b/pxr/base/arch/timing.h
@@ -77,6 +77,10 @@ ArchGetTickTime()
 inline uint64_t
 ArchGetStartTickTime()
 {
+    // BLENDER: avoid using rdtsc instruction that is not supported on older CPUs.
+    return ArchGetTickTime();
+
+#if 0
     uint64_t t;
 #if defined (ARCH_OS_DARWIN) || defined(ARCH_OS_WASM_VM) || \
     (defined (ARCH_CPU_ARM) && defined (ARCH_COMPILER_MSVC))
@@ -110,6 +114,7 @@ ArchGetStartTickTime()
 #error "Unsupported architecture."
 #endif
   return t;
+#endif
 }
 
 /// Get a "stop" tick time for measuring an interval of time.  See
@@ -119,6 +124,10 @@ ArchGetStartTickTime()
 inline uint64_t
 ArchGetStopTickTime()
 {
+    // BLENDER: avoid using rdtsc instruction that is not supported on older CPUs.
+    return ArchGetTickTime();
+
+#if 0
     uint64_t t;
 #if defined (ARCH_OS_DARWIN) || defined(ARCH_OS_WASM_VM) || \
     (defined (ARCH_CPU_ARM) && defined (ARCH_COMPILER_MSVC))
@@ -150,11 +159,11 @@ ArchGetStopTickTime()
 #error "Unsupported architecture."
 #endif
   return t;
+#endif
 }
 
-#if defined (doxygen) ||                                                       \
-    (!defined(ARCH_OS_DARWIN) && defined(ARCH_CPU_INTEL) &&                    \
-     (defined(ARCH_COMPILER_CLANG) || defined(ARCH_COMPILER_GCC)))
+// BLENDER: avoid using rdtsc instruction that is not supported on older CPUs.
+#if 0
 
 /// A simple timer class for measuring an interval of time using the
 /// ArchTickTimer facilities.
diff --git a/pxr/imaging/hioOpenVDB/CMakeLists.txt b/pxr/imaging/hioOpenVDB/CMakeLists.txt
index c94b63c5a..b3bcae4eb 100644
--- a/pxr/imaging/hioOpenVDB/CMakeLists.txt
+++ b/pxr/imaging/hioOpenVDB/CMakeLists.txt
@@ -20,6 +20,12 @@ else()
     LIST(APPEND __VDB_IMATH_LIBS ${OPENEXR_Half_LIBRARY})
 endif()
 
+if (WIN32)
+    # OpenVDB uses constants from <cmath> that aren't available on
+    # Windows unless this is defined.
+    add_definitions(-D_USE_MATH_DEFINES)
+endif()
+
 pxr_library(hioOpenVDB
     LIBRARIES
         ar
diff --git a/pxr/usdImaging/CMakeLists.txt b/pxr/usdImaging/CMakeLists.txt
index 53c026689..e99a5ac17 100644
--- a/pxr/usdImaging/CMakeLists.txt
+++ b/pxr/usdImaging/CMakeLists.txt
@@ -7,7 +7,7 @@ set(DIRS
     usdVolImaging
     usdAppUtils
     usdviewq
-    bin
+#    bin
     plugin
 )
 
diff --git a/cmake/macros/Private.cmake b/cmake/macros/Private.cmake
index 6fe1134c1..1d6586fff 100644
--- a/cmake/macros/Private.cmake
+++ b/cmake/macros/Private.cmake
@@ -992,7 +992,7 @@ function(_pxr_python_module NAME)
         return()
     endif()

-    if (WIN32 AND PXR_USE_DEBUG_PYTHON)
+    if (WIN32 AND PXR_USE_DEBUG_PYTHON AND NOT "${CMAKE_DEBUG_POSTFIX}" STREQUAL "_d")
         # On Windows when compiling with debug python the library must be named with _d.
         set(LIBRARY_NAME "_${NAME}_d")
     else()
