diff --git a/pxr/imaging/hdSt/indirectDrawBatch.cpp b/pxr/imaging/hdSt/indirectDrawBatch.cpp
index cdf400222f..e780d7343b 100644
--- a/pxr/imaging/hdSt/indirectDrawBatch.cpp
+++ b/pxr/imaging/hdSt/indirectDrawBatch.cpp
@@ -111,11 +111,17 @@ HdSt_IndirectDrawBatch::HdSt_IndirectDrawBatch(
     , _instanceCountOffset(0)
     , _cullInstanceCountOffset(0)
     , _needsTextureResourceRebinding(false)
+    , _vao(0)
 {
     _Init(drawItemInstance);
 }
 
-HdSt_IndirectDrawBatch::~HdSt_IndirectDrawBatch() = default;
+HdSt_IndirectDrawBatch::~HdSt_IndirectDrawBatch()
+{
+    if (_vao) {
+        glDeleteVertexArrays(1, &_vao);
+    }
+}
 
 /*virtual*/
 void
@@ -1199,6 +1205,14 @@ HdSt_IndirectDrawBatch::_ExecuteDraw(
                                state.instancePrimvarBars);
     }
 
+    // OpenGL core profile requries a VAO for binding buffers.
+    if (capabilities->GetCoreProfile()) {
+        if (!_vao) {
+            glCreateVertexArrays(1, &_vao);
+        }
+        glBindVertexArray(_vao);
+    }
+
     state.BindResourcesForDrawing(renderPassState, *capabilities);
 
     HdSt_GeometricShaderSharedPtr geometricShader = state.geometricShader;
@@ -1455,6 +1469,15 @@ HdSt_IndirectDrawBatch::_ExecuteFrustumCull(
             cullingProgram.GetGeometricShader());
 
     Hgi * hgi = resourceRegistry->GetHgi();
+    HgiCapabilities const *capabilities = hgi->GetCapabilities();
+
+    // OpenGL core profile requries a VAO for binding buffers.
+    if (capabilities->GetCoreProfile()) {
+        if (!_vao) {
+            glCreateVertexArrays(1, &_vao);
+        }
+        glBindVertexArray(_vao);
+    }
 
     HgiGraphicsPipelineSharedPtr const & pso =
         _GetCullPipeline(resourceRegistry,
diff --git a/pxr/imaging/hdSt/indirectDrawBatch.h b/pxr/imaging/hdSt/indirectDrawBatch.h
index 13da3917b0..84f013d310 100644
--- a/pxr/imaging/hdSt/indirectDrawBatch.h
+++ b/pxr/imaging/hdSt/indirectDrawBatch.h
@@ -201,6 +201,8 @@ class HdSt_IndirectDrawBatch : public HdSt_DrawBatch
     int _cullInstanceCountOffset;
 
     bool _needsTextureResourceRebinding;
+
+    uint32_t _vao;
 };
 
 
diff --git a/pxr/imaging/hdSt/renderPassState.cpp b/pxr/imaging/hdSt/renderPassState.cpp
index 5c4d2fac07..908a49f310 100644
--- a/pxr/imaging/hdSt/renderPassState.cpp
+++ b/pxr/imaging/hdSt/renderPassState.cpp
@@ -760,7 +760,9 @@ HdStRenderPassState::Bind(HgiCapabilities const &hgiCapabilities)
         // If not using GL_MULTISAMPLE, use GL_POINT_SMOOTH to render points as 
         // circles instead of square.
         // XXX Switch points rendering to emit quad with FS that draws circle.
-        glEnable(GL_POINT_SMOOTH);
+        if (!hgiCapabilities.GetCoreProfile()) {
+            glEnable(GL_POINT_SMOOTH);
+        }
     }
 }
 
@@ -804,7 +806,9 @@ HdStRenderPassState::Unbind(HgiCapabilities const &hgiCapabilities)
     }
 
     glEnable(GL_MULTISAMPLE);
-    glDisable(GL_POINT_SMOOTH);
+    if (!hgiCapabilities.GetCoreProfile()) {
+        glDisable(GL_POINT_SMOOTH);
+    }
 }
 
 void
diff --git a/pxr/imaging/hgi/capabilities.h b/pxr/imaging/hgi/capabilities.h
index ae2ecb4e5b..c86afcb387 100644
--- a/pxr/imaging/hgi/capabilities.h
+++ b/pxr/imaging/hgi/capabilities.h
@@ -52,6 +52,11 @@ class HgiCapabilities
     HGI_API
     virtual int GetShaderVersion() const = 0;
 
+    HGI_API
+    virtual bool GetCoreProfile() const {
+        return false;
+    }
+
     HGI_API
     size_t GetMaxUniformBlockSize() const {
         return _maxUniformBlockSize;
diff --git a/pxr/imaging/hgiGL/blitCmds.cpp b/pxr/imaging/hgiGL/blitCmds.cpp
index ce62f41a51..20888a1109 100644
--- a/pxr/imaging/hgiGL/blitCmds.cpp
+++ b/pxr/imaging/hgiGL/blitCmds.cpp
@@ -136,7 +136,7 @@ HgiGLBlitCmds::_Submit(Hgi* hgi, HgiSubmitWaitType wait)
     // Capture OpenGL state before executing the 'ops' and restore it when this
     // function ends. We do this defensively because parts of our pipeline may
     // not set and restore all relevant gl state.
-    HgiGL_ScopedStateHolder openglStateGuard;
+    HgiGL_ScopedStateHolder openglStateGuard(*hgi->GetCapabilities());
 
     HgiGL* hgiGL = static_cast<HgiGL*>(hgi);
     HgiGLDevice* device = hgiGL->GetPrimaryDevice();
diff --git a/pxr/imaging/hgiGL/capabilities.cpp b/pxr/imaging/hgiGL/capabilities.cpp
index 920f9cdff4..9941bef7b2 100644
--- a/pxr/imaging/hgiGL/capabilities.cpp
+++ b/pxr/imaging/hgiGL/capabilities.cpp
@@ -57,6 +57,7 @@ static const int _DefaultMaxClipDistances             = 8;
 HgiGLCapabilities::HgiGLCapabilities()
     : _glVersion(0)
     , _glslVersion(_DefaultGLSLVersion)
+    , _coreProfile(false)
 {
     _LoadCapabilities();
 }
@@ -131,6 +132,11 @@ HgiGLCapabilities::_LoadCapabilities()
                       &uniformBufferOffsetAlignment);
         _uniformBufferOffsetAlignment = uniformBufferOffsetAlignment;
     }
+    if (_glVersion >= 320) {
+        GLint profileMask = 0;
+        glGetIntegerv(GL_CONTEXT_PROFILE_MASK, &profileMask);
+        _coreProfile = (profileMask & GL_CONTEXT_CORE_PROFILE_BIT);
+    }
     if (_glVersion >= 430) {
         GLint maxShaderStorageBlockSize = 0;
         glGetIntegerv(GL_MAX_SHADER_STORAGE_BLOCK_SIZE,
@@ -259,4 +265,9 @@ HgiGLCapabilities::GetShaderVersion() const {
     return _glslVersion;
 }
 
+bool
+HgiGLCapabilities::GetCoreProfile() const {
+    return _coreProfile;
+}
+
 PXR_NAMESPACE_CLOSE_SCOPE
diff --git a/pxr/imaging/hgiGL/capabilities.h b/pxr/imaging/hgiGL/capabilities.h
index 3c8f026426..2f25b44936 100644
--- a/pxr/imaging/hgiGL/capabilities.h
+++ b/pxr/imaging/hgiGL/capabilities.h
@@ -52,6 +52,9 @@ class HgiGLCapabilities final : public HgiCapabilities
     HGIGL_API
     int GetShaderVersion() const override;
 
+    HGIGL_API
+    bool GetCoreProfile() const override;
+
 private:
     void _LoadCapabilities();
 
@@ -60,6 +63,9 @@ class HgiGLCapabilities final : public HgiCapabilities
     
     // GLSL version 
     int _glslVersion; // 400, 410, ...
+
+    // Core Profile
+    bool _coreProfile;
 };
 
 PXR_NAMESPACE_CLOSE_SCOPE
diff --git a/pxr/imaging/hgiGL/graphicsCmds.cpp b/pxr/imaging/hgiGL/graphicsCmds.cpp
index 5e174165d7..e59ae3502f 100644
--- a/pxr/imaging/hgiGL/graphicsCmds.cpp
+++ b/pxr/imaging/hgiGL/graphicsCmds.cpp
@@ -249,7 +249,7 @@ HgiGLGraphicsCmds::_Submit(Hgi* hgi, HgiSubmitWaitType wait)
     // Capture OpenGL state before executing the 'ops' and restore it when this
     // function ends. We do this defensively because parts of our pipeline may
     // not set and restore all relevant gl state.
-    HgiGL_ScopedStateHolder openglStateGuard;
+    HgiGL_ScopedStateHolder openglStateGuard(*hgi->GetCapabilities());
 
     // Resolve multisample textures
     HgiGL* hgiGL = static_cast<HgiGL*>(hgi);
diff --git a/pxr/imaging/hgiGL/graphicsPipeline.cpp b/pxr/imaging/hgiGL/graphicsPipeline.cpp
index 6983dd11e9..a1c7af754e 100644
--- a/pxr/imaging/hgiGL/graphicsPipeline.cpp
+++ b/pxr/imaging/hgiGL/graphicsPipeline.cpp
@@ -42,7 +42,12 @@ HgiGLGraphicsPipeline::HgiGLGraphicsPipeline(
 {
 }
 
-HgiGLGraphicsPipeline::~HgiGLGraphicsPipeline() = default;
+HgiGLGraphicsPipeline::~HgiGLGraphicsPipeline()
+{
+    if (_vao) {
+        glDeleteVertexArrays(1, &_vao);
+    }
+}
 
 void
 HgiGLGraphicsPipeline::BindPipeline()
@@ -50,6 +55,7 @@ HgiGLGraphicsPipeline::BindPipeline()
     if (_vao) {
         glBindVertexArray(0);
         glDeleteVertexArrays(1, &_vao);
+        _vao = 0;
     }
 
     if (!_descriptor.vertexBuffers.empty()) {
@@ -108,6 +114,8 @@ HgiGLGraphicsPipeline::BindPipeline()
         glBindVertexArray(_vao);
     }
 
+    const bool coreProfile = _hgi->GetCapabilities()->GetCoreProfile();
+
     //
     // Depth Stencil State
     //
@@ -172,7 +180,9 @@ HgiGLGraphicsPipeline::BindPipeline()
         // If not using GL_MULTISAMPLE, use GL_POINT_SMOOTH to render points as 
         // circles instead of square.
         // XXX Switch points rendering to emit quad with FS that draws circle.
-        glEnable(GL_POINT_SMOOTH);
+        if (!coreProfile) {
+            glEnable(GL_POINT_SMOOTH);
+        }
     }
     if (_descriptor.multiSampleState.alphaToCoverageEnable) {
         glEnable(GL_SAMPLE_ALPHA_TO_COVERAGE);
@@ -207,7 +217,7 @@ HgiGLGraphicsPipeline::BindPipeline()
         glFrontFace(GL_CCW);
     }
 
-    if (_descriptor.rasterizationState.lineWidth != 1.0f) {
+    if (!coreProfile && _descriptor.rasterizationState.lineWidth != 1.0f) {
         glLineWidth(_descriptor.rasterizationState.lineWidth);
     }
 
diff --git a/pxr/imaging/hgiGL/scopedStateHolder.cpp b/pxr/imaging/hgiGL/scopedStateHolder.cpp
index 89cd0ac224..5c6575330b 100644
--- a/pxr/imaging/hgiGL/scopedStateHolder.cpp
+++ b/pxr/imaging/hgiGL/scopedStateHolder.cpp
@@ -26,6 +26,7 @@
 #include "pxr/imaging/hgiGL/scopedStateHolder.h"
 #include "pxr/imaging/hgiGL/conversions.h"
 #include "pxr/imaging/hgiGL/diagnostic.h"
+#include "pxr/imaging/hgiGL/hgi.h"
 
 #include "pxr/base/trace/trace.h"
 #include "pxr/base/tf/diagnostic.h"
@@ -33,8 +34,10 @@
 
 PXR_NAMESPACE_OPEN_SCOPE
 
-HgiGL_ScopedStateHolder::HgiGL_ScopedStateHolder()
-    : _restoreRenderBuffer(0)
+HgiGL_ScopedStateHolder::HgiGL_ScopedStateHolder(
+    HgiCapabilities const& capabilities)
+    : _coreProfile(capabilities.GetCoreProfile())
+    , _restoreRenderBuffer(0)
     , _restoreVao(0)
     , _restoreDepthTest(false)
     , _restoreDepthWriteMask(false)
@@ -115,7 +118,9 @@ HgiGL_ScopedStateHolder::HgiGL_ScopedStateHolder()
     glGetBooleanv(
         GL_SAMPLE_ALPHA_TO_ONE,
         (GLboolean*)&_restoreSampleAlphaToOne);
-    glGetFloatv(GL_LINE_WIDTH, &_lineWidth);
+    if (!_coreProfile) {
+        glGetFloatv(GL_LINE_WIDTH, &_lineWidth);
+    }
     glGetBooleanv(GL_CULL_FACE, (GLboolean*)&_cullFace);
     glGetIntegerv(GL_CULL_FACE_MODE, &_cullMode);
     glGetIntegerv(GL_FRONT_FACE, &_frontFace);
@@ -139,7 +144,9 @@ HgiGL_ScopedStateHolder::HgiGL_ScopedStateHolder()
     }
 
     glGetBooleanv(GL_MULTISAMPLE, (GLboolean*)&_restoreMultiSample);
-    glGetBooleanv(GL_POINT_SMOOTH, (GLboolean*)&_restorePointSmooth);
+    if (!_coreProfile) {
+        glGetBooleanv(GL_POINT_SMOOTH, (GLboolean*)&_restorePointSmooth);
+    }
 
     HGIGL_POST_PENDING_GL_ERRORS();
     #if defined(GL_KHR_debug)
@@ -235,7 +242,9 @@ HgiGL_ScopedStateHolder::~HgiGL_ScopedStateHolder()
                _restoreViewport[2], _restoreViewport[3]);
     glBindVertexArray(_restoreVao);
     glBindRenderbuffer(GL_RENDERBUFFER, _restoreRenderBuffer);
-    glLineWidth(_lineWidth);
+    if (!_coreProfile) {
+        glLineWidth(_lineWidth);
+    }
     if (_cullFace) {
         glEnable(GL_CULL_FACE);
     } else {
@@ -285,10 +294,12 @@ HgiGL_ScopedStateHolder::~HgiGL_ScopedStateHolder()
         glDisable(GL_MULTISAMPLE);
     }
 
-    if (_restorePointSmooth) {
-        glEnable(GL_POINT_SMOOTH);
-    } else {
-        glDisable(GL_POINT_SMOOTH);
+    if (!_coreProfile) {
+        if (_restorePointSmooth) {
+            glEnable(GL_POINT_SMOOTH);
+        } else {
+            glDisable(GL_POINT_SMOOTH);
+        }
     }
 
     static const GLuint samplers[8] = {0};
diff --git a/pxr/imaging/hgiGL/scopedStateHolder.h b/pxr/imaging/hgiGL/scopedStateHolder.h
index d006480b9b..be6698e04c 100644
--- a/pxr/imaging/hgiGL/scopedStateHolder.h
+++ b/pxr/imaging/hgiGL/scopedStateHolder.h
@@ -32,6 +32,7 @@
 
 PXR_NAMESPACE_OPEN_SCOPE
 
+class HgiCapabilities;
 
 /// \class HgiGLScopedStateHolder
 ///
@@ -50,7 +51,7 @@ class HgiGL_ScopedStateHolder final
 {
 public:
     HGIGL_API
-    HgiGL_ScopedStateHolder();
+    HgiGL_ScopedStateHolder(HgiCapabilities const& capabilities);
 
     HGIGL_API
     ~HgiGL_ScopedStateHolder();
@@ -59,6 +60,8 @@ class HgiGL_ScopedStateHolder final
     HgiGL_ScopedStateHolder& operator=(const HgiGL_ScopedStateHolder&) = delete;
     HgiGL_ScopedStateHolder(const HgiGL_ScopedStateHolder&) = delete;
 
+    bool _coreProfile;
+
     int32_t _restoreRenderBuffer;
     int32_t _restoreVao;
 
diff --git a/pxr/imaging/hgiInterop/opengl.cpp b/pxr/imaging/hgiInterop/opengl.cpp
index 95736721f1..4f970ed608 100644
--- a/pxr/imaging/hgiInterop/opengl.cpp
+++ b/pxr/imaging/hgiInterop/opengl.cpp
@@ -110,6 +110,7 @@ HgiInteropOpenGL::HgiInteropOpenGL()
     , _fsDepth(0)
     , _prgNoDepth(0)
     , _prgDepth(0)
+    , _vao(0)
     , _vertexBuffer(0)
 {
     _vs = _CompileShader(_vertexFullscreen, GL_VERTEX_SHADER);
@@ -117,6 +118,7 @@ HgiInteropOpenGL::HgiInteropOpenGL()
     _fsDepth = _CompileShader(_fragmentDepthFullscreen, GL_FRAGMENT_SHADER);
     _prgNoDepth = _LinkProgram(_vs, _fsNoDepth);
     _prgDepth = _LinkProgram(_vs, _fsDepth);
+    glCreateVertexArrays(1, &_vao);
     _vertexBuffer = _CreateVertexBuffer();
     TF_VERIFY(glGetError() == GL_NO_ERROR);
 }
@@ -129,6 +131,7 @@ HgiInteropOpenGL::~HgiInteropOpenGL()
     glDeleteProgram(_prgNoDepth);
     glDeleteProgram(_prgDepth);
     glDeleteBuffers(1, &_vertexBuffer);
+    glDeleteVertexArrays(1, &_vao);
     TF_VERIFY(glGetError() == GL_NO_ERROR);
 }
 
@@ -202,10 +205,13 @@ HgiInteropOpenGL::CompositeToInterop(
     }
 
     // Get the current array buffer binding state
+    GLint restoreVao = 0;
+    glGetIntegerv(GL_VERTEX_ARRAY_BINDING, &restoreVao);
     GLint restoreArrayBuffer = 0;
     glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &restoreArrayBuffer);
 
     // Vertex attributes
+    glBindVertexArray(_vao);
     const GLint locPosition = glGetAttribLocation(prg, "position");
     glBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer);
     glVertexAttribPointer(locPosition, 4, GL_FLOAT, GL_FALSE,
@@ -271,6 +277,7 @@ HgiInteropOpenGL::CompositeToInterop(
     glDisableVertexAttribArray(locPosition);
     glDisableVertexAttribArray(locUv);
     glBindBuffer(GL_ARRAY_BUFFER, restoreArrayBuffer);
+    glBindVertexArray(restoreVao);
     
     if (!blendEnabled) {
         glDisable(GL_BLEND);
diff --git a/pxr/imaging/hgiInterop/opengl.h b/pxr/imaging/hgiInterop/opengl.h
index 18840a92bd..27434ac36f 100644
--- a/pxr/imaging/hgiInterop/opengl.h
+++ b/pxr/imaging/hgiInterop/opengl.h
@@ -62,6 +62,7 @@ class HgiInteropOpenGL final
     uint32_t _fsDepth;
     uint32_t _prgNoDepth;
     uint32_t _prgDepth;
+    uint32_t _vao;
     uint32_t _vertexBuffer;
 };
 
