#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def PointInstancer "horizontalpoints" (
    kind = "group"
)
{
    int64[] invisibleIds = []
    quath[] orientations = [(1, 0, 0, 0), (1, 0, 0, 0)]
    point3f[] positions = [(-2, 0, 0), (4, 0, 0)]
    int[] protoIndices = [0, 0]
    rel prototypes = </horizontalpoints/Prototypes/Root>

    def Scope "Prototypes" (
        kind = "group"
    )
    {
        def Xform "Root" (
            kind = "group"
        )
        {
            def PointInstancer "verticalpoints" (
                kind = "group"
            )
            {
                int64[] invisibleIds = []
                quath[] orientations = [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)]
                point3f[] positions = [(0, 0, 0), (0, 2, 0), (0, 4, 0)]
                int[] protoIndices = [0, 0, 0]
                rel prototypes = </horizontalpoints/Prototypes/Root/verticalpoints/Prototypes/Root>

                def Scope "Prototypes" (
                    kind = "group"
                )
                {
                    def Xform "Root" (
                        kind = "group"
                    )
                    {
                        def Xform "grid1" (
                            kind = "component"
                        )
                        {
                            matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform:xform"]

                            def Mesh "mesh_0"
                            {
                                float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
                                int[] faceVertexCounts = [4]
                                int[] faceVertexIndices = [0, 1, 3, 2]
                                uniform token orientation = "leftHanded"
                                point3f[] points = [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)] (
                                    interpolation = "vertex"
                                )
                                uniform token subdivisionScheme = "none"
                            }
                        }
                    }
                }
            }
        }
    }
}

