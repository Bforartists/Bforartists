#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender (hand modified)"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "uvmap_plane"
    {
        def Mesh "uvmap_plane" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1, -1, 0), (3, 1, 0)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [2, 16, 13, 1, 19, 22, 11, 12, 4, 14, 15, 3, 5, 6, 17, 14, 15, 18, 19, 16, 17, 20, 21, 18, 7, 0, 8, 20, 21, 9, 10, 22, 25, 39, 36, 24, 42, 45, 34, 35, 27, 37, 38, 26, 28, 29, 40, 37, 38, 41, 42, 39, 40, 43, 44, 41, 30, 23, 31, 43, 44, 32, 33, 45, 48, 62, 59, 47, 65, 68, 57, 58, 50, 60, 61, 49, 51, 52, 63, 60, 61, 64, 65, 62, 63, 66, 67, 64, 53, 46, 54, 66, 67, 55, 56, 68, 71, 85, 82, 70, 88, 91, 80, 81, 73, 83, 84, 72, 74, 75, 86, 83, 84, 87, 88, 85, 86, 89, 90, 87, 76, 69, 77, 89, 90, 78, 79, 91]
            rel material:binding = </root/_materials/Material_001>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1, -1, 0), (-1, 1, 0), (-1, 0.5, 0), (-1, 0, 0), (-1, -0.5, 0), (-0.5, -1, 0), (0, -1, 0), (0.5, -1, 0), (1, -0.5, 0), (1, 0, 0), (1, 0.5, 0), (0.5, 1, 0), (0, 1, 0), (-0.5, 1, 0), (-0.5, -0.5, 0), (-0.5, 0, 0), (-0.5, 0.5, 0), (0, -0.5, 0), (0, 0, 0), (0, 0.5, 0), (0.5, -0.5, 0), (0.5, 0, 0), (0.5, 0.5, 0), (1, -1, 0), (-1, 1, 0), (-1, 0.5, 0), (-1, 0, 0), (-1, -0.5, 0), (-0.5, -1, 0), (0, -1, 0), (0.5, -1, 0), (1, -0.5, 0), (1, 0, 0), (1, 0.5, 0), (0.5, 1, 0), (0, 1, 0), (-0.5, 1, 0), (-0.5, -0.5, 0), (-0.5, 0, 0), (-0.5, 0.5, 0), (0, -0.5, 0), (0, 0, 0), (0, 0.5, 0), (0.5, -0.5, 0), (0.5, 0, 0), (0.5, 0.5, 0), (3, -1, 0), (1, 1, 0), (1, 0.5, 0), (1, 0, 0), (1, -0.5, 0), (1.5, -1, 0), (2, -1, 0), (2.5, -1, 0), (3, -0.5, 0), (3, 0, 0), (3, 0.5, 0), (2.5, 1, 0), (2, 1, 0), (1.5, 1, 0), (1.5, -0.5, 0), (1.5, 0, 0), (1.5, 0.5, 0), (2, -0.5, 0), (2, 0, 0), (2, 0.5, 0), (2.5, -0.5, 0), (2.5, 0, 0), (2.5, 0.5, 0), (3, -1, 0), (1, 1, 0), (1, 0.5, 0), (1, 0, 0), (1, -0.5, 0), (1.5, -1, 0), (2, -1, 0), (2.5, -1, 0), (3, -0.5, 0), (3, 0, 0), (3, 0.5, 0), (2.5, 1, 0), (2, 1, 0), (1.5, 1, 0), (1.5, -0.5, 0), (1.5, 0, 0), (1.5, 0.5, 0), (2, -0.5, 0), (2, 0, 0), (2, 0.5, 0), (2.5, -0.5, 0), (2.5, 0, 0), (2.5, 0.5, 0)]
            texCoord2f[] primvars:udim_map = [(0, 0.75), (0.24999999, 0.75), (0.24999999, 1), (0, 1), (0.49999997, 0.75), (0.75, 0.75), (0.75, 1), (0.49999997, 1), (0, 0.24999999), (0.25, 0.25), (0.24999999, 0.5), (0, 0.49999997), (0.25, 0), (0.5, 0), (0.5, 0.25), (0.25, 0.25), (0.24999999, 0.5), (0.49999997, 0.5), (0.49999997, 0.75), (0.24999999, 0.75), (0.5, 0.25), (0.75, 0.25), (0.75, 0.5), (0.49999997, 0.5), (0.75, 0), (1, 0), (1, 0.25), (0.75, 0.25), (0.75, 0.5), (1, 0.5), (1, 0.75), (0.75, 0.75), (0, 0.75), (0.24999999, 0.75), (0.24999999, 1), (0, 1), (0.49999997, 0.75), (0.75, 0.75), (0.75, 1), (0.49999997, 1), (0, 0.24999999), (0.25, 0.25), (0.24999999, 0.5), (0, 0.49999997), (0.25, 0), (0.5, 0), (0.5, 0.25), (0.25, 0.25), (0.24999999, 0.5), (0.49999997, 0.5), (0.49999997, 0.75), (0.24999999, 0.75), (0.5, 0.25), (0.75, 0.25), (0.75, 0.5), (0.49999997, 0.5), (0.75, 0), (1, 0), (1, 0.25), (0.75, 0.25), (0.75, 0.5), (1, 0.5), (1, 0.75), (0.75, 0.75), (1, 0.75), (1.25, 0.75), (1.25, 1), (1, 1), (1.5, 0.75), (1.75, 0.75), (1.75, 1), (1.5, 1), (1, 0.24999999), (1.25, 0.25), (1.25, 0.5), (1, 0.49999997), (1.25, 0), (1.5, 0), (1.5, 0.25), (1.25, 0.25), (1.25, 0.5), (1.5, 0.5), (1.5, 0.75), (1.25, 0.75), (1.5, 0.25), (1.75, 0.25), (1.75, 0.5), (1.5, 0.5), (1.75, 0), (2, 0), (2, 0.25), (1.75, 0.25), (1.75, 0.5), (2, 0.5), (2, 0.75), (1.75, 0.75), (1, 0.75), (1.25, 0.75), (1.25, 1), (1, 1), (1.5, 0.75), (1.75, 0.75), (1.75, 1), (1.5, 1), (1, 0.24999999), (1.25, 0.25), (1.25, 0.5), (1, 0.49999997), (1.25, 0), (1.5, 0), (1.5, 0.25), (1.25, 0.25), (1.25, 0.5), (1.5, 0.5), (1.5, 0.75), (1.25, 0.75), (1.5, 0.25), (1.75, 0.25), (1.75, 0.5), (1.5, 0.5), (1.75, 0), (2, 0), (2, 0.25), (1.75, 0.25), (1.75, 0.5), (2, 0.5), (2, 0.75), (1.75, 0.75)] (
                interpolation = "faceVarying"
            )
            texCoord2f[] primvars:uvmap = [(0.33386317, 0.8338633), (0.4994699, 0.8338633), (0.4994699, 0.99947006), (0.33386314, 0.99947006), (0.0005299417, 0.6671967), (0.16613668, 0.6671967), (0.16613668, 0.8328034), (0.0005299658, 0.8328035), (0.83386314, 0.16719665), (0.9994699, 0.16719665), (0.9994699, 0.3328034), (0.83386314, 0.3328034), (0.49947, 0.3328034), (0.33386326, 0.33280346), (0.33386323, 0.16719668), (0.49946994, 0.16719665), (0.16719659, 0.8328034), (0.16719659, 0.6671967), (0.33280334, 0.6671967), (0.33280334, 0.8328034), (0.1661367, 0.33386338), (0.1661367, 0.49947014), (0.0005299417, 0.49947008), (0.00052996125, 0.33386335), (0.1661367, 0.3328034), (0.00052998983, 0.33280346), (0.0005299417, 0.16719668), (0.16613668, 0.16719665), (0.5005299, 0.66613674), (0.5005299, 0.50053), (0.6661366, 0.50053), (0.6661366, 0.66613674), (0.83386314, 0.3338633), (0.9994699, 0.3338633), (0.9994699, 0.49947006), (0.83386314, 0.49947006), (0.6671965, 0.6671967), (0.8328033, 0.6671967), (0.8328033, 0.8328034), (0.6671965, 0.8328034), (0.0005299658, 0.8338633), (0.1661367, 0.8338633), (0.1661367, 0.99947006), (0.0005299417, 0.99947006), (0.49947, 0.1661367), (0.33386326, 0.16613676), (0.33386323, 0.00052997784), (0.49946994, 0.0005299417), (0.6671965, 0.3328034), (0.6671965, 0.16719665), (0.8328033, 0.16719666), (0.8328033, 0.33280343), (0.49947, 0.33386338), (0.49947, 0.49947014), (0.33386323, 0.49947008), (0.33386326, 0.33386335), (0.1661367, 0.1661367), (0.00052998983, 0.16613676), (0.0005299417, 0.00052997784), (0.16613668, 0.0005299417), (0.6671965, 0.49947006), (0.6671965, 0.3338633), (0.8328033, 0.33386332), (0.8328033, 0.49947008), (0.6671965, 0.50052994), (0.8328032, 0.50052994), (0.8328032, 0.6661367), (0.6671965, 0.66613674), (0.50052994, 0.6671967), (0.6661366, 0.6671967), (0.6661366, 0.8328034), (0.50052994, 0.8328035), (0.1661367, 0.50053006), (0.1661367, 0.6661368), (0.0005299417, 0.66613674), (0.00052996125, 0.50053), (0.33280334, 0.1661367), (0.16719663, 0.16613676), (0.16719659, 0.00052997784), (0.3328033, 0.0005299417), (0.33386326, 0.8328034), (0.33386326, 0.6671967), (0.49947, 0.6671967), (0.49947, 0.8328034), (0.33280334, 0.33386338), (0.33280334, 0.49947014), (0.16719659, 0.49947008), (0.1671966, 0.33386335), (0.33280334, 0.3328034), (0.16719663, 0.33280346), (0.16719659, 0.16719668), (0.3328033, 0.16719665), (0.6671965, 0.1661367), (0.6671965, 0.0005299417), (0.8328033, 0.0005299658), (0.8328033, 0.16613671), (0.33386323, 0.50053), (0.49946994, 0.50053), (0.49946994, 0.66613674), (0.33386326, 0.6661368), (0.5005299, 0.33386332), (0.6661366, 0.3338633), (0.6661366, 0.49947006), (0.5005299, 0.49947008), (0.33280334, 0.66613674), (0.16719659, 0.66613674), (0.16719659, 0.50053), (0.3328033, 0.50053), (0.6661366, 0.1661367), (0.50052994, 0.16613673), (0.5005299, 0.0005299658), (0.66613656, 0.0005299417), (0.6661366, 0.3328034), (0.50052994, 0.33280343), (0.5005299, 0.16719666), (0.66613656, 0.16719665), (0.83386314, 0.50052994), (0.99946976, 0.50052994), (0.99946976, 0.6661367), (0.83386314, 0.6661367), (0.3328033, 0.99947006), (0.16719656, 0.99947006), (0.16719656, 0.8338633), (0.3328033, 0.8338633), (0.9994699, 0.1661367), (0.83386314, 0.16613671), (0.83386314, 0.0005299673), (0.9994699, 0.0005299417)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def "_materials"
    {
        def Material "Material_001"
        {
            token outputs:surface.connect = </root/_materials/Material_001/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/Material_001/Image_Texture.outputs:rgb>
                color3f inputs:emissiveColor = (0, 0, 0)
                float inputs:ior = 1.45
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/test_grid_<UDIM>.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/Material_001/UV_Map.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "UV_Map"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname = "_"
                float2 outputs:result
            }
        }
    }
}

