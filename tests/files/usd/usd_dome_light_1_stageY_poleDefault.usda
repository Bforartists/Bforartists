#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.5.0 Alpha"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def DomeLight_1 "env_light"
    {
        float inputs:intensity = 1
        asset inputs:texture:file = @./textures/test_single.png@
        float3 xformOp:rotateXYZ = (90, 0, 90)
        uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
    }

    def Xform "Cube"
    {
        def Mesh "Cube" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 4, 6, 2, 3, 2, 6, 7, 7, 6, 4, 5, 5, 1, 3, 7, 1, 0, 2, 3, 5, 4, 0, 1]
            rel material:binding = </root/_materials/Material>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1, 1, 1), (1, 1, -1), (1, -1, 1), (1, -1, -1), (-1, 1, 1), (-1, 1, -1), (-1, -1, 1), (-1, -1, -1)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:st = [(0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Cube_001"
    {
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (0.2904613, 0.2904613, 0.2904613)
        double3 xformOp:translate = (0, 0, 1.6628384590148926)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "Cube_001" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1, -1, -1), (1, 1, 0.9999993)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 4, 6, 2, 3, 2, 6, 7, 7, 6, 4, 5, 5, 1, 3, 7, 1, 0, 2, 3, 5, 4, 0, 1]
            rel material:binding = </root/_materials/Material>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -0.9351529, 0.3542444), (0, -0.9351529, 0.3542444), (0, -0.9351529, 0.3542444), (0, -0.9351529, 0.3542444), (-0.9351529, 0, 0.35424438), (-0.9351529, 0, 0.35424438), (-0.9351529, 0, 0.35424438), (-0.9351529, 0, 0.35424438), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.9351529, 0, 0.35424438), (0.9351529, 0, 0.35424438), (0.9351529, 0, 0.35424438), (0.9351529, 0, 0.35424438), (0, 0.9351529, 0.3542444), (0, 0.9351529, 0.3542444), (0, 0.9351529, 0.3542444), (0, 0.9351529, 0.3542444)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.24238217, 0.24238217, 0.9999993), (1, 1, -1), (0.24238217, -0.24238217, 0.9999993), (1, -1, -1), (-0.24238217, 0.24238217, 0.9999993), (-1, 1, -1), (-0.24238217, -0.24238217, 0.9999993), (-1, -1, -1)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:st = [(0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Camera"
    {
        custom string userProperties:blender:object_name = "Camera"
        float3 xformOp:rotateXYZ = (77.15932, -0.000010048663, 45.891956)
        float3 xformOp:scale = (0.99999994, 1, 0.99999994)
        double3 xformOp:translate = (7.904968738555908, -7.6511077880859375, 2.4478447437286377)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Camera "Camera"
        {
            float2 clippingRange = (0.1, 100)
            float focalLength = 0.5
            float horizontalAperture = 0.36
            token projection = "perspective"
            custom string userProperties:blender:data_name = "Camera"
            float verticalAperture = 0.2025
        }
    }

    def Scope "_materials"
    {
        def Material "Material"
        {
            token outputs:surface.connect = </root/_materials/Material/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.45
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }
        }
    }
}

