#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.5.0 Alpha"
    endTimeCode = 5
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "viz_targets"
    {
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 12, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Xform "Cube"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-4, -1, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Mesh "Cube" (
                active = true
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
                normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, 0.5), (0.5, -0.5, -0.5), (0.5, -0.5, 0.5), (0.5, 0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796), (0.6728003, 0.078314796, 0.078314796)] (
                    interpolation = "faceVarying"
                )
                texCoord2f[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Xform "Plane"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (4, -1, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Mesh "Plane" (
                active = true
            )
            {
                float3[] extent = [(-0.99999994, 0, -1), (0.99999994, 0, 1)]
                int[] faceVertexCounts = [4]
                int[] faceVertexIndices = [0, 1, 3, 2]
                normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-0.99999994, 0, -1), (0.99999994, 0, -1), (-0.99999994, 0, 1), (0.99999994, 0, 1)]
                color3f[] primvars:displayColor = [(0.078314796, 0.38744727, 0.6728003), (0.078314796, 0.38744727, 0.6728003), (0.078314796, 0.38744727, 0.6728003), (0.078314796, 0.38744727, 0.6728003)] (
                    interpolation = "faceVarying"
                )
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Xform "Cylinder"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (2, -1, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Mesh "Cylinder" (
                active = true
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.25), (0.5, 0.5, 0.25)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 8, 4, 4, 8]
                int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 8, 9, 11, 10, 10, 11, 13, 12, 3, 1, 15, 13, 11, 9, 7, 5, 12, 13, 15, 14, 14, 15, 1, 0, 0, 2, 4, 6, 8, 10, 12, 14]
                normal3f[] normals = [(0.38268346, 0.92387956, 0), (0.38268346, 0.92387956, 0), (0.38268346, 0.92387956, 0), (0.38268346, 0.92387956, 0), (0.92387956, 0.38268346, 0), (0.92387956, 0.38268346, 0), (0.92387956, 0.38268346, 0), (0.92387956, 0.38268346, 0), (0.92387956, -0.38268346, 0), (0.92387956, -0.38268346, 0), (0.92387956, -0.38268346, 0), (0.92387956, -0.38268346, 0), (0.38268346, -0.92387956, 0), (0.38268346, -0.92387956, 0), (0.38268346, -0.92387956, 0), (0.38268346, -0.92387956, 0), (-0.38268346, -0.92387956, 0), (-0.38268346, -0.92387956, 0), (-0.38268346, -0.92387956, 0), (-0.38268346, -0.92387956, 0), (-0.92387956, -0.38268346, 0), (-0.92387956, -0.38268346, 0), (-0.92387956, -0.38268346, 0), (-0.92387956, -0.38268346, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (-0.92387956, 0.38268346, 0), (-0.92387956, 0.38268346, 0), (-0.92387956, 0.38268346, 0), (-0.92387956, 0.38268346, 0), (-0.38268346, 0.92387956, 0), (-0.38268346, 0.92387956, 0), (-0.38268346, 0.92387956, 0), (-0.38268346, 0.92387956, 0), (-2.1073426e-8, 0, -0.99999994), (-2.1073426e-8, 0, -0.99999994), (-2.1073426e-8, 0, -0.99999994), (-2.1073426e-8, 0, -0.99999994), (-2.1073426e-8, 0, -0.99999994), (-2.1073426e-8, 0, -0.99999994), (-2.1073426e-8, 0, -0.99999994), (-2.1073426e-8, 0, -0.99999994)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(0, 0.5, -0.25), (0, 0.5, 0.25), (0.35355338, 0.35355338, -0.25), (0.35355338, 0.35355338, 0.25), (0.5, 0, -0.25), (0.5, 0, 0.25), (0.35355338, -0.35355338, -0.25), (0.35355338, -0.35355338, 0.25), (0, -0.5, -0.25), (0, -0.5, 0.25), (-0.35355338, -0.35355338, -0.25), (-0.35355338, -0.35355338, 0.25), (-0.5, 0, -0.25), (-0.5, 0, 0.25), (-0.35355338, 0.35355338, -0.25), (-0.35355338, 0.35355338, 0.25)]
                color3f[] primvars:displayColor = [(0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564), (0.07831477, 0.6728003, 0.21395564)] (
                    interpolation = "faceVarying"
                )
                texCoord2f[] primvars:st = [(1, 0.5), (1, 1), (0.875, 1), (0.875, 0.5), (0.875, 0.5), (0.875, 1), (0.75, 1), (0.75, 0.5), (0.75, 0.5), (0.75, 1), (0.625, 1), (0.625, 0.5), (0.625, 0.5), (0.625, 1), (0.5, 1), (0.5, 0.5), (0.5, 0.5), (0.5, 1), (0.375, 1), (0.375, 0.5), (0.375, 0.5), (0.375, 1), (0.25, 1), (0.25, 0.5), (0.41970563, 0.41970563), (0.25, 0.49), (0.080294386, 0.41970563), (0.010000005, 0.25), (0.080294386, 0.080294386), (0.25, 0.010000005), (0.41970563, 0.080294386), (0.49, 0.25), (0.25, 0.5), (0.25, 1), (0.125, 1), (0.125, 0.5), (0.125, 0.5), (0.125, 1), (0, 1), (0, 0.5), (0.75, 0.49), (0.9197056, 0.41970563), (0.99, 0.25), (0.9197056, 0.080294386), (0.75, 0.010000005), (0.5802944, 0.080294386), (0.51, 0.25), (0.5802944, 0.41970563)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Xform "Sphere"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-2, -1, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Mesh "Sphere" (
                active = true
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 3, 3, 4, 4, 4, 4, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 3, 4, 4]
                int[] faceVertexIndices = [61, 1, 5, 6, 60, 0, 3, 4, 59, 32, 2, 38, 61, 6, 1, 60, 4, 5, 0, 59, 2, 3, 6, 5, 10, 11, 4, 3, 8, 9, 2, 32, 7, 38, 6, 11, 5, 4, 9, 10, 3, 2, 7, 8, 9, 8, 13, 14, 7, 32, 12, 38, 11, 16, 10, 9, 14, 15, 8, 7, 12, 13, 11, 10, 15, 16, 12, 32, 17, 38, 16, 21, 15, 14, 19, 20, 13, 12, 17, 18, 16, 15, 20, 21, 14, 13, 18, 19, 38, 21, 26, 20, 19, 24, 25, 18, 17, 22, 23, 21, 20, 25, 26, 19, 18, 23, 24, 17, 32, 22, 38, 26, 31, 25, 24, 29, 30, 23, 22, 27, 28, 26, 25, 30, 31, 24, 23, 28, 29, 22, 32, 27, 38, 31, 37, 30, 29, 35, 36, 28, 27, 33, 34, 31, 30, 36, 37, 29, 28, 34, 35, 27, 32, 33, 36, 35, 41, 42, 34, 33, 39, 40, 37, 36, 42, 43, 35, 34, 40, 41, 33, 32, 39, 38, 37, 43, 40, 39, 44, 45, 43, 42, 47, 48, 41, 40, 45, 46, 39, 32, 44, 38, 43, 48, 42, 41, 46, 47, 48, 47, 52, 53, 46, 45, 50, 51, 44, 32, 49, 38, 48, 53, 47, 46, 51, 52, 45, 44, 49, 50, 53, 52, 57, 58, 51, 50, 55, 56, 49, 32, 54, 38, 53, 58, 52, 51, 56, 57, 50, 49, 54, 55, 58, 57, 1, 61, 56, 55, 0, 60, 54, 32, 59, 38, 58, 61, 57, 56, 60, 1, 55, 54, 59, 0]
                normal3f[] normals = [(0.1861569, 0.6947466, -0.6947466), (0.1861569, 0.6947466, -0.6947466), (0.1861569, 0.6947466, -0.6947466), (0.1861569, 0.6947466, -0.6947466), (0.2505628, 0.9351131, 0.25056276), (0.2505628, 0.9351131, 0.25056276), (0.2505628, 0.9351131, 0.25056276), (0.2505628, 0.9351131, 0.25056276), (0.06918384, 0.25819892, 0.96361136), (0.06918384, 0.25819892, 0.96361136), (0.06918384, 0.25819892, 0.96361136), (0.06918407, 0.25819892, -0.96361136), (0.06918407, 0.25819892, -0.96361136), (0.06918407, 0.25819892, -0.96361136), (0.2505628, 0.9351131, -0.25056276), (0.2505628, 0.9351131, -0.25056276), (0.2505628, 0.9351131, -0.25056276), (0.2505628, 0.9351131, -0.25056276), (0.18615673, 0.6947466, 0.6947466), (0.18615673, 0.6947466, 0.6947466), (0.18615673, 0.6947466, 0.6947466), (0.18615673, 0.6947466, 0.6947466), (0.50858986, 0.5085898, -0.6947466), (0.50858986, 0.5085898, -0.6947466), (0.50858986, 0.5085898, -0.6947466), (0.50858986, 0.5085898, -0.6947466), (0.6845503, 0.6845503, 0.25056276), (0.6845503, 0.6845503, 0.25056276), (0.6845503, 0.6845503, 0.25056276), (0.6845503, 0.6845503, 0.25056276), (0.18901496, 0.18901473, 0.96361136), (0.18901496, 0.18901473, 0.96361136), (0.18901496, 0.18901473, 0.96361136), (0.18901496, 0.18901473, -0.96361136), (0.18901496, 0.18901473, -0.96361136), (0.18901496, 0.18901473, -0.96361136), (0.6845503, 0.6845503, -0.25056276), (0.6845503, 0.6845503, -0.25056276), (0.6845503, 0.6845503, -0.25056276), (0.6845503, 0.6845503, -0.25056276), (0.50858986, 0.5085898, 0.6947466), (0.50858986, 0.5085898, 0.6947466), (0.50858986, 0.5085898, 0.6947466), (0.50858986, 0.5085898, 0.6947466), (0.9351131, 0.25056267, 0.25056285), (0.9351131, 0.25056267, 0.25056285), (0.9351131, 0.25056267, 0.25056285), (0.9351131, 0.25056267, 0.25056285), (0.25819904, 0.06918419, 0.96361136), (0.25819904, 0.06918419, 0.96361136), (0.25819904, 0.06918419, 0.96361136), (0.25819904, 0.06918419, -0.96361136), (0.25819904, 0.06918419, -0.96361136), (0.25819904, 0.06918419, -0.96361136), (0.9351131, 0.25056267, -0.25056285), (0.9351131, 0.25056267, -0.25056285), (0.9351131, 0.25056267, -0.25056285), (0.9351131, 0.25056267, -0.25056285), (0.6947467, 0.18615666, 0.6947466), (0.6947467, 0.18615666, 0.6947466), (0.6947467, 0.18615666, 0.6947466), (0.6947467, 0.18615666, 0.6947466), (0.6947467, 0.18615666, -0.69474655), (0.6947467, 0.18615666, -0.69474655), (0.6947467, 0.18615666, -0.69474655), (0.6947467, 0.18615666, -0.69474655), (0.25819904, -0.06918419, 0.96361136), (0.25819904, -0.06918419, 0.96361136), (0.25819904, -0.06918419, 0.96361136), (0.25819904, -0.06918419, -0.96361136), (0.25819904, -0.06918419, -0.96361136), (0.25819904, -0.06918419, -0.96361136), (0.9351131, -0.25056282, -0.25056294), (0.9351131, -0.25056282, -0.25056294), (0.9351131, -0.25056282, -0.25056294), (0.9351131, -0.25056282, -0.25056294), (0.6947467, -0.18615682, 0.6947465), (0.6947467, -0.18615682, 0.6947465), (0.6947467, -0.18615682, 0.6947465), (0.6947467, -0.18615682, 0.6947465), (0.6947467, -0.18615682, -0.6947465), (0.6947467, -0.18615682, -0.6947465), (0.6947467, -0.18615682, -0.6947465), (0.6947467, -0.18615682, -0.6947465), (0.9351131, -0.25056282, 0.2505629), (0.9351131, -0.25056282, 0.2505629), (0.9351131, -0.25056282, 0.2505629), (0.9351131, -0.25056282, 0.2505629), (0.18901496, -0.18901473, -0.96361136), (0.18901496, -0.18901473, -0.96361136), (0.18901496, -0.18901473, -0.96361136), (0.6845502, -0.6845503, -0.2505629), (0.6845502, -0.6845503, -0.2505629), (0.6845502, -0.6845503, -0.2505629), (0.6845502, -0.6845503, -0.2505629), (0.50858986, -0.50858974, 0.69474655), (0.50858986, -0.50858974, 0.69474655), (0.50858986, -0.50858974, 0.69474655), (0.50858986, -0.50858974, 0.69474655), (0.5085898, -0.50858974, -0.6947466), (0.5085898, -0.50858974, -0.6947466), (0.5085898, -0.50858974, -0.6947466), (0.5085898, -0.50858974, -0.6947466), (0.6845502, -0.6845503, 0.2505629), (0.6845502, -0.6845503, 0.2505629), (0.6845502, -0.6845503, 0.2505629), (0.6845502, -0.6845503, 0.2505629), (0.18901496, -0.18901473, 0.96361136), (0.18901496, -0.18901473, 0.96361136), (0.18901496, -0.18901473, 0.96361136), (0.06918407, -0.25819892, -0.96361136), (0.06918407, -0.25819892, -0.96361136), (0.06918407, -0.25819892, -0.96361136), (0.25056273, -0.9351131, -0.25056288), (0.25056273, -0.9351131, -0.25056288), (0.25056273, -0.9351131, -0.25056288), (0.25056273, -0.9351131, -0.25056288), (0.18615676, -0.6947467, 0.69474655), (0.18615676, -0.6947467, 0.69474655), (0.18615676, -0.6947467, 0.69474655), (0.18615676, -0.6947467, 0.69474655), (0.18615676, -0.6947467, -0.69474655), (0.18615676, -0.6947467, -0.69474655), (0.18615676, -0.6947467, -0.69474655), (0.18615676, -0.6947467, -0.69474655), (0.25056273, -0.9351131, 0.25056288), (0.25056273, -0.9351131, 0.25056288), (0.25056273, -0.9351131, 0.25056288), (0.25056273, -0.9351131, 0.25056288), (0.06918384, -0.25819892, 0.96361136), (0.06918384, -0.25819892, 0.96361136), (0.06918384, -0.25819892, 0.96361136), (-0.06918407, -0.25819892, -0.96361136), (-0.06918407, -0.25819892, -0.96361136), (-0.06918407, -0.25819892, -0.96361136), (-0.25056285, -0.93511295, -0.250563), (-0.25056285, -0.93511295, -0.250563), (-0.25056285, -0.93511295, -0.250563), (-0.25056285, -0.93511295, -0.250563), (-0.18615685, -0.6947467, 0.6947465), (-0.18615685, -0.6947467, 0.6947465), (-0.18615685, -0.6947467, 0.6947465), (-0.18615685, -0.6947467, 0.6947465), (-0.18615685, -0.6947467, -0.6947465), (-0.18615685, -0.6947467, -0.6947465), (-0.18615685, -0.6947467, -0.6947465), (-0.18615685, -0.6947467, -0.6947465), (-0.25056285, -0.93511295, 0.250563), (-0.25056285, -0.93511295, 0.250563), (-0.25056285, -0.93511295, 0.250563), (-0.25056285, -0.93511295, 0.250563), (-0.06918384, -0.25819892, 0.96361136), (-0.06918384, -0.25819892, 0.96361136), (-0.06918384, -0.25819892, 0.96361136), (-0.6845502, -0.6845503, -0.25056285), (-0.6845502, -0.6845503, -0.25056285), (-0.6845502, -0.6845503, -0.25056285), (-0.6845502, -0.6845503, -0.25056285), (-0.50858986, -0.50858986, 0.6947465), (-0.50858986, -0.50858986, 0.6947465), (-0.50858986, -0.50858986, 0.6947465), (-0.50858986, -0.50858986, 0.6947465), (-0.5085899, -0.50858986, -0.6947465), (-0.5085899, -0.50858986, -0.6947465), (-0.5085899, -0.50858986, -0.6947465), (-0.5085899, -0.50858986, -0.6947465), (-0.6845502, -0.6845503, 0.25056285), (-0.6845502, -0.6845503, 0.25056285), (-0.6845502, -0.6845503, 0.25056285), (-0.6845502, -0.6845503, 0.25056285), (-0.18901496, -0.18901473, 0.96361136), (-0.18901496, -0.18901473, 0.96361136), (-0.18901496, -0.18901473, 0.96361136), (-0.18901496, -0.18901473, -0.96361136), (-0.18901496, -0.18901473, -0.96361136), (-0.18901496, -0.18901473, -0.96361136), (-0.6947467, -0.18615666, 0.6947466), (-0.6947467, -0.18615666, 0.6947466), (-0.6947467, -0.18615666, 0.6947466), (-0.6947467, -0.18615666, 0.6947466), (-0.6947467, -0.18615665, -0.69474655), (-0.6947467, -0.18615665, -0.69474655), (-0.6947467, -0.18615665, -0.69474655), (-0.6947467, -0.18615665, -0.69474655), (-0.9351131, -0.25056267, 0.25056288), (-0.9351131, -0.25056267, 0.25056288), (-0.9351131, -0.25056267, 0.25056288), (-0.9351131, -0.25056267, 0.25056288), (-0.25819904, -0.06918419, 0.96361136), (-0.25819904, -0.06918419, 0.96361136), (-0.25819904, -0.06918419, 0.96361136), (-0.25819904, -0.06918419, -0.96361136), (-0.25819904, -0.06918419, -0.96361136), (-0.25819904, -0.06918419, -0.96361136), (-0.9351131, -0.25056267, -0.25056288), (-0.9351131, -0.25056267, -0.25056288), (-0.9351131, -0.25056267, -0.25056288), (-0.9351131, -0.25056267, -0.25056288), (-0.6947467, 0.18615682, -0.6947465), (-0.6947467, 0.18615682, -0.6947465), (-0.6947467, 0.18615682, -0.6947465), (-0.6947467, 0.18615682, -0.6947465), (-0.9351131, 0.2505629, 0.2505629), (-0.9351131, 0.2505629, 0.2505629), (-0.9351131, 0.2505629, 0.2505629), (-0.9351131, 0.2505629, 0.2505629), (-0.25819904, 0.06918419, 0.96361136), (-0.25819904, 0.06918419, 0.96361136), (-0.25819904, 0.06918419, 0.96361136), (-0.25819904, 0.06918419, -0.96361136), (-0.25819904, 0.06918419, -0.96361136), (-0.25819904, 0.06918419, -0.96361136), (-0.9351131, 0.2505629, -0.2505629), (-0.9351131, 0.2505629, -0.2505629), (-0.9351131, 0.2505629, -0.2505629), (-0.9351131, 0.2505629, -0.2505629), (-0.6947467, 0.18615682, 0.6947465), (-0.6947467, 0.18615682, 0.6947465), (-0.6947467, 0.18615682, 0.6947465), (-0.6947467, 0.18615682, 0.6947465), (-0.50858986, 0.50858986, -0.69474655), (-0.50858986, 0.50858986, -0.69474655), (-0.50858986, 0.50858986, -0.69474655), (-0.50858986, 0.50858986, -0.69474655), (-0.6845503, 0.6845502, 0.250563), (-0.6845503, 0.6845502, 0.250563), (-0.6845503, 0.6845502, 0.250563), (-0.6845503, 0.6845502, 0.250563), (-0.18901496, 0.18901473, 0.96361136), (-0.18901496, 0.18901473, 0.96361136), (-0.18901496, 0.18901473, 0.96361136), (-0.18901496, 0.18901473, -0.96361136), (-0.18901496, 0.18901473, -0.96361136), (-0.18901496, 0.18901473, -0.96361136), (-0.6845503, 0.6845502, -0.250563), (-0.6845503, 0.6845502, -0.250563), (-0.6845503, 0.6845502, -0.250563), (-0.6845503, 0.6845502, -0.250563), (-0.5085898, 0.50858986, 0.69474655), (-0.5085898, 0.50858986, 0.69474655), (-0.5085898, 0.50858986, 0.69474655), (-0.5085898, 0.50858986, 0.69474655), (-0.18615685, 0.6947466, -0.69474655), (-0.18615685, 0.6947466, -0.69474655), (-0.18615685, 0.6947466, -0.69474655), (-0.18615685, 0.6947466, -0.69474655), (-0.25056282, 0.9351131, 0.25056282), (-0.25056282, 0.9351131, 0.25056282), (-0.25056282, 0.9351131, 0.25056282), (-0.25056282, 0.9351131, 0.25056282), (-0.06918384, 0.25819892, 0.96361136), (-0.06918384, 0.25819892, 0.96361136), (-0.06918384, 0.25819892, 0.96361136), (-0.06918407, 0.25819892, -0.96361136), (-0.06918407, 0.25819892, -0.96361136), (-0.06918407, 0.25819892, -0.96361136), (-0.25056282, 0.9351131, -0.25056282), (-0.25056282, 0.9351131, -0.25056282), (-0.25056282, 0.9351131, -0.25056282), (-0.25056282, 0.9351131, -0.25056282), (-0.18615685, 0.6947466, 0.69474655), (-0.18615685, 0.6947466, 0.69474655), (-0.18615685, 0.6947466, 0.69474655), (-0.18615685, 0.6947466, 0.69474655)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(0, 0.4330127, 0.25), (0, 0.4330127, -0.25), (0.125, 0.21650635, 0.4330127), (0.21650635, 0.375, 0.25), (0.25, 0.4330127, 0), (0.21650635, 0.375, -0.25), (0.125, 0.21650635, -0.4330127), (0.21650635, 0.125, 0.4330127), (0.375, 0.21650633, 0.25), (0.4330127, 0.25, 0), (0.375, 0.21650633, -0.25), (0.21650635, 0.125, -0.4330127), (0.25, 0, 0.4330127), (0.43301266, -1.4901161e-8, 0.25), (0.5, 0, 0), (0.43301266, -1.4901161e-8, -0.25), (0.25, 0, -0.4330127), (0.21650635, -0.125, 0.4330127), (0.37499997, -0.21650635, 0.25), (0.4330127, -0.25, 0), (0.37499997, -0.21650635, -0.25), (0.21650635, -0.125, -0.4330127), (0.125, -0.21650635, 0.4330127), (0.2165063, -0.375, 0.25), (0.25, -0.4330127, 0), (0.2165063, -0.375, -0.25), (0.125, -0.21650635, -0.4330127), (0, -0.25, 0.4330127), (-4.4703484e-8, -0.43301266, 0.25), (0, -0.5, 0), (-4.4703484e-8, -0.43301266, -0.25), (0, -0.25, -0.4330127), (0, 0, 0.5), (-0.125, -0.21650635, 0.4330127), (-0.21650638, -0.37499994, 0.25), (-0.25, -0.4330127, 0), (-0.21650638, -0.37499994, -0.25), (-0.125, -0.21650635, -0.4330127), (0, 0, -0.5), (-0.21650635, -0.125, 0.4330127), (-0.375, -0.2165063, 0.25), (-0.4330127, -0.25, 0), (-0.375, -0.2165063, -0.25), (-0.21650635, -0.125, -0.4330127), (-0.25, 0, 0.4330127), (-0.43301266, 4.4703484e-8, 0.25), (-0.5, 0, 0), (-0.43301266, 4.4703484e-8, -0.25), (-0.25, 0, -0.4330127), (-0.21650635, 0.125, 0.4330127), (-0.37499994, 0.21650638, 0.25), (-0.4330127, 0.25, 0), (-0.37499994, 0.21650638, -0.25), (-0.21650635, 0.125, -0.4330127), (-0.125, 0.21650635, 0.4330127), (-0.2165063, 0.375, 0.25), (-0.25, 0.4330127, 0), (-0.2165063, 0.375, -0.25), (-0.125, 0.21650635, -0.4330127), (0, 0.25, 0.4330127), (0, 0.5, 0), (0, 0.25, -0.4330127)]
                color3f[] primvars:displayColor = [(0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796), (0.6728003, 0.43500614, 0.078314796)] (
                    interpolation = "faceVarying"
                )
                texCoord2f[] primvars:st = [(0.75, 0.16666669), (0.75, 0.3333333), (0.6666667, 0.3333333), (0.6666667, 0.16666669), (0.75, 0.5), (0.75, 0.6666666), (0.6666667, 0.6666666), (0.6666667, 0.5), (0.75, 0.8333333), (0.7083333, 1), (0.6666667, 0.8333333), (0.7083333, 0), (0.75, 0.16666669), (0.6666667, 0.16666669), (0.75, 0.3333333), (0.75, 0.5), (0.6666667, 0.5), (0.6666667, 0.3333333), (0.75, 0.6666666), (0.75, 0.8333333), (0.6666667, 0.8333333), (0.6666667, 0.6666666), (0.6666667, 0.16666669), (0.6666667, 0.3333333), (0.5833333, 0.3333333), (0.5833333, 0.16666669), (0.6666667, 0.5), (0.6666667, 0.6666666), (0.5833333, 0.6666666), (0.5833333, 0.5), (0.6666667, 0.8333333), (0.625, 1), (0.5833333, 0.8333333), (0.625, 0), (0.6666667, 0.16666669), (0.5833333, 0.16666669), (0.6666667, 0.3333333), (0.6666667, 0.5), (0.5833333, 0.5), (0.5833333, 0.3333333), (0.6666667, 0.6666666), (0.6666667, 0.8333333), (0.5833333, 0.8333333), (0.5833333, 0.6666666), (0.5833333, 0.5), (0.5833333, 0.6666666), (0.5, 0.66666675), (0.5, 0.5), (0.5833333, 0.8333333), (0.5416667, 1), (0.5, 0.8333333), (0.5416667, 0), (0.5833333, 0.16666669), (0.5, 0.16666669), (0.5833333, 0.3333333), (0.5833333, 0.5), (0.5, 0.5), (0.5, 0.3333333), (0.5833333, 0.6666666), (0.5833333, 0.8333333), (0.5, 0.8333333), (0.5, 0.66666675), (0.5833333, 0.16666669), (0.5833333, 0.3333333), (0.5, 0.3333333), (0.5, 0.16666669), (0.5, 0.8333333), (0.45833334, 1), (0.41666666, 0.8333333), (0.45833334, 0), (0.5, 0.16666669), (0.41666666, 0.16666669), (0.5, 0.3333333), (0.5, 0.5), (0.41666666, 0.5), (0.41666666, 0.3333333), (0.5, 0.66666675), (0.5, 0.8333333), (0.41666666, 0.8333333), (0.41666666, 0.66666675), (0.5, 0.16666669), (0.5, 0.3333333), (0.41666666, 0.3333333), (0.41666666, 0.16666669), (0.5, 0.5), (0.5, 0.66666675), (0.41666666, 0.66666675), (0.41666666, 0.5), (0.375, 0), (0.41666666, 0.16666669), (0.3333333, 0.16666669), (0.41666666, 0.3333333), (0.41666666, 0.5), (0.3333333, 0.5), (0.3333333, 0.3333333), (0.41666666, 0.66666675), (0.41666666, 0.8333333), (0.3333333, 0.8333333), (0.3333333, 0.66666675), (0.41666666, 0.16666669), (0.41666666, 0.3333333), (0.3333333, 0.3333333), (0.3333333, 0.16666669), (0.41666666, 0.5), (0.41666666, 0.66666675), (0.3333333, 0.66666675), (0.3333333, 0.5), (0.41666666, 0.8333333), (0.375, 1), (0.3333333, 0.8333333), (0.2916667, 0), (0.3333333, 0.16666669), (0.25, 0.16666669), (0.3333333, 0.3333333), (0.3333333, 0.5), (0.25, 0.5), (0.25, 0.3333333), (0.3333333, 0.66666675), (0.3333333, 0.8333333), (0.25, 0.8333333), (0.25, 0.66666675), (0.3333333, 0.16666669), (0.3333333, 0.3333333), (0.25, 0.3333333), (0.25, 0.16666669), (0.3333333, 0.5), (0.3333333, 0.66666675), (0.25, 0.66666675), (0.25, 0.5), (0.3333333, 0.8333333), (0.2916667, 1), (0.25, 0.8333333), (0.20833334, 0), (0.25, 0.16666669), (0.16666666, 0.16666669), (0.25, 0.3333333), (0.25, 0.5), (0.16666666, 0.5), (0.16666666, 0.3333333), (0.25, 0.66666675), (0.25, 0.8333333), (0.16666666, 0.8333333), (0.16666666, 0.66666675), (0.25, 0.16666669), (0.25, 0.3333333), (0.16666666, 0.3333333), (0.16666666, 0.16666669), (0.25, 0.5), (0.25, 0.66666675), (0.16666666, 0.66666675), (0.16666666, 0.5), (0.25, 0.8333333), (0.20833334, 1), (0.16666666, 0.8333333), (0.16666666, 0.3333333), (0.16666666, 0.5), (0.08333334, 0.5), (0.08333331, 0.3333333), (0.16666666, 0.66666675), (0.16666666, 0.8333333), (0.08333334, 0.8333333), (0.08333331, 0.66666675), (0.16666666, 0.16666669), (0.16666666, 0.3333333), (0.08333331, 0.3333333), (0.08333334, 0.16666669), (0.16666666, 0.5), (0.16666666, 0.66666675), (0.08333331, 0.66666675), (0.08333334, 0.5), (0.16666666, 0.8333333), (0.125, 1), (0.08333334, 0.8333333), (0.125, 0), (0.16666666, 0.16666669), (0.08333334, 0.16666669), (0.08333331, 0.66666675), (0.08333334, 0.8333333), (0, 0.8333333), (0, 0.66666675), (0.08333334, 0.16666669), (0.08333331, 0.3333333), (0, 0.3333333), (0, 0.16666669), (0.08333334, 0.5), (0.08333331, 0.66666675), (0, 0.66666675), (0, 0.5), (0.08333334, 0.8333333), (0.041666687, 1), (0, 0.8333333), (0.041666687, 0), (0.08333334, 0.16666669), (0, 0.16666669), (0.08333331, 0.3333333), (0.08333334, 0.5), (0, 0.5), (0, 0.3333333), (1, 0.16666669), (1, 0.3333333), (0.9166666, 0.3333333), (0.9166666, 0.16666669), (1, 0.5), (1, 0.66666675), (0.9166666, 0.66666675), (0.9166666, 0.5), (1, 0.8333333), (0.9583333, 1), (0.9166666, 0.8333333), (0.9583333, 0), (1, 0.16666669), (0.9166666, 0.16666669), (1, 0.3333333), (1, 0.5), (0.9166666, 0.5), (0.9166666, 0.3333333), (1, 0.66666675), (1, 0.8333333), (0.9166666, 0.8333333), (0.9166666, 0.66666675), (0.9166666, 0.16666669), (0.9166666, 0.3333333), (0.83333325, 0.3333333), (0.8333334, 0.16666669), (0.9166666, 0.5), (0.9166666, 0.66666675), (0.83333325, 0.66666675), (0.8333334, 0.5), (0.9166666, 0.8333333), (0.875, 1), (0.8333334, 0.8333333), (0.875, 0), (0.9166666, 0.16666669), (0.8333334, 0.16666669), (0.9166666, 0.3333333), (0.9166666, 0.5), (0.8333334, 0.5), (0.83333325, 0.3333333), (0.9166666, 0.66666675), (0.9166666, 0.8333333), (0.8333334, 0.8333333), (0.83333325, 0.66666675), (0.8333334, 0.16666669), (0.83333325, 0.3333333), (0.75, 0.3333333), (0.75, 0.16666669), (0.8333334, 0.5), (0.83333325, 0.66666675), (0.75, 0.6666666), (0.75, 0.5), (0.8333334, 0.8333333), (0.7916666, 1), (0.75, 0.8333333), (0.7916666, 0), (0.8333334, 0.16666669), (0.75, 0.16666669), (0.83333325, 0.3333333), (0.8333334, 0.5), (0.75, 0.5), (0.75, 0.3333333), (0.83333325, 0.66666675), (0.8333334, 0.8333333), (0.75, 0.8333333), (0.75, 0.6666666)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Xform "Cone"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, -1, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Mesh "Cone" (
                active = true
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 8, 3, 3]
                int[] faceVertexIndices = [0, 8, 1, 1, 8, 2, 2, 8, 3, 3, 8, 4, 4, 8, 5, 5, 8, 6, 0, 1, 2, 3, 4, 5, 6, 7, 6, 8, 7, 7, 8, 0]
                normal3f[] normals = [(0.347408, 0.83871704, 0.41935855), (0.347408, 0.83871704, 0.41935855), (0.347408, 0.83871704, 0.41935855), (0.83871704, 0.347408, 0.41935852), (0.83871704, 0.347408, 0.41935852), (0.83871704, 0.347408, 0.41935852), (0.83871704, -0.347408, 0.41935852), (0.83871704, -0.347408, 0.41935852), (0.83871704, -0.347408, 0.41935852), (0.347408, -0.83871704, 0.41935855), (0.347408, -0.83871704, 0.41935855), (0.347408, -0.83871704, 0.41935855), (-0.347408, -0.83871704, 0.41935855), (-0.347408, -0.83871704, 0.41935855), (-0.347408, -0.83871704, 0.41935855), (-0.83871704, -0.347408, 0.41935852), (-0.83871704, -0.347408, 0.41935852), (-0.83871704, -0.347408, 0.41935852), (-4.214685e-8, 0, -0.99999994), (-4.214685e-8, 0, -0.99999994), (-4.214685e-8, 0, -0.99999994), (-4.214685e-8, 0, -0.99999994), (-4.214685e-8, 0, -0.99999994), (-4.214685e-8, 0, -0.99999994), (-4.214685e-8, 0, -0.99999994), (-4.214685e-8, 0, -0.99999994), (-0.83871704, 0.347408, 0.41935852), (-0.83871704, 0.347408, 0.41935852), (-0.83871704, 0.347408, 0.41935852), (-0.347408, 0.83871704, 0.41935855), (-0.347408, 0.83871704, 0.41935855), (-0.347408, 0.83871704, 0.41935855)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(0, 0.5, -0.5), (0.35355338, 0.35355338, -0.5), (0.5, 0, -0.5), (0.35355338, -0.35355338, -0.5), (0, -0.5, -0.5), (-0.35355338, -0.35355338, -0.5), (-0.5, 0, -0.5), (-0.35355338, 0.35355338, -0.5), (0, 0, 0.5)]
                color3f[] primvars:displayColor = [(0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796), (0.55390316, 0.6728003, 0.078314796)] (
                    interpolation = "faceVarying"
                )
                texCoord2f[] primvars:st = [(0.25, 0.49), (0.25, 0.25), (0.41970563, 0.41970563), (0.41970563, 0.41970563), (0.25, 0.25), (0.49, 0.25), (0.49, 0.25), (0.25, 0.25), (0.41970563, 0.080294386), (0.41970563, 0.080294386), (0.25, 0.25), (0.25, 0.010000005), (0.25, 0.010000005), (0.25, 0.25), (0.080294386, 0.080294386), (0.080294386, 0.080294386), (0.25, 0.25), (0.010000005, 0.25), (0.75, 0.49), (0.9197056, 0.41970563), (0.99, 0.25), (0.9197056, 0.080294386), (0.75, 0.010000005), (0.5802944, 0.080294386), (0.51, 0.25), (0.5802944, 0.41970563), (0.010000005, 0.25), (0.25, 0.25), (0.080294386, 0.41970563), (0.080294386, 0.41970563), (0.25, 0.25), (0.25, 0.49)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Xform "background"
        {
            def Mesh "background" (
                active = true
            )
            {
                float3[] extent = [(-6, -8.146034e-8, -2), (6, 8.146034e-8, 2)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [64, 29, 7, 37, 63, 30, 6, 38, 62, 25, 4, 31, 61, 41, 8, 21, 60, 42, 18, 43, 59, 35, 12, 44, 58, 45, 15, 28, 57, 46, 19, 47, 56, 40, 17, 48, 55, 49, 14, 27, 54, 50, 20, 51, 53, 39, 16, 52, 50, 53, 52, 20, 11, 24, 53, 50, 24, 2, 39, 53, 23, 54, 51, 10, 3, 34, 54, 23, 34, 11, 50, 54, 33, 55, 27, 1, 10, 51, 55, 33, 51, 20, 49, 55, 46, 56, 48, 19, 9, 22, 56, 46, 22, 0, 40, 56, 39, 57, 47, 16, 2, 32, 57, 39, 32, 9, 46, 57, 29, 58, 28, 7, 16, 47, 58, 29, 47, 19, 45, 58, 42, 59, 44, 18, 13, 26, 59, 42, 26, 5, 35, 59, 40, 60, 43, 17, 0, 36, 60, 40, 36, 13, 42, 60, 30, 61, 21, 6, 17, 43, 61, 30, 43, 18, 41, 61, 41, 62, 31, 8, 18, 44, 62, 41, 44, 12, 25, 62, 45, 63, 38, 15, 19, 48, 63, 45, 48, 17, 30, 63, 49, 64, 37, 14, 20, 52, 64, 49, 52, 16, 29, 64]
                normal3f[] normals = [(0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8), (0, -1, -4.073017e-8)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-2, -8.146034e-8, 2), (6, 8.146034e-8, -2), (2, -8.146034e-8, 2), (6, -8.146034e-8, 2), (-6, 8.146034e-8, -2), (-6, -8.146034e-8, 2), (-2, 8.146034e-8, -2), (2, 8.146034e-8, -2), (-4, 8.146034e-8, -2), (0, -8.146034e-8, 2), (6, 0, 0), (4, -8.146034e-8, 2), (-6, 0, 0), (-4, -8.146034e-8, 2), (4, 8.146034e-8, -2), (0, 8.146034e-8, -2), (2, 0, 0), (-2, 0, 0), (-4, 0, 0), (0, 0, 0), (4, 0, 0), (-3, 8.146034e-8, -2), (-1, -8.146034e-8, 2), (6, -4.073017e-8, 1), (3, -8.146034e-8, 2), (-6, 4.073017e-8, -1), (-5, -8.146034e-8, 2), (5, 8.146034e-8, -2), (1, 8.146034e-8, -2), (2, 4.073017e-8, -1), (-2, 4.073017e-8, -1), (-5, 8.146034e-8, -2), (1, -8.146034e-8, 2), (6, 4.073017e-8, -1), (5, -8.146034e-8, 2), (-6, -4.073017e-8, 1), (-3, -8.146034e-8, 2), (3, 8.146034e-8, -2), (-1, 8.146034e-8, -2), (2, -4.073017e-8, 1), (-2, -4.073017e-8, 1), (-4, 4.073017e-8, -1), (-4, -4.073017e-8, 1), (-3, 0, 0), (-5, 0, 0), (0, 4.073017e-8, -1), (0, -4.073017e-8, 1), (1, 0, 0), (-1, 0, 0), (4, 4.073017e-8, -1), (4, -4.073017e-8, 1), (5, 0, 0), (3, 0, 0), (3, -4.073017e-8, 1), (5, -4.073017e-8, 1), (5, 4.073017e-8, -1), (-1, -4.073017e-8, 1), (1, -4.073017e-8, 1), (1, 4.073017e-8, -1), (-5, -4.073017e-8, 1), (-3, -4.073017e-8, 1), (-3, 4.073017e-8, -1), (-5, 4.073017e-8, -1), (-1, 4.073017e-8, -1), (3, 4.073017e-8, -1)]
                texCoord2f[] primvars:st = [(0.75, 0.25), (0.6666666, 0.25), (0.6666667, 0), (0.75, 0), (0.4166667, 0.25), (0.3333333, 0.25), (0.33333334, 0), (0.4166667, 0), (0.08333333, 0.25), (0, 0.25), (0, 0), (0.083333336, 0), (0.25, 0.25), (0.16666666, 0.25), (0.16666667, 0), (0.25, 0), (0.24999999, 0.75), (0.16666666, 0.75), (0.16666666, 0.5), (0.24999999, 0.5), (0.08333333, 0.75), (0, 0.75), (0, 0.5), (0.08333333, 0.5), (0.5833334, 0.25), (0.5, 0.25), (0.5, 0), (0.5833334, 0), (0.5833333, 0.75), (0.5, 0.75), (0.5, 0.5), (0.5833333, 0.5), (0.41666663, 0.75), (0.3333333, 0.75), (0.3333333, 0.5), (0.41666666, 0.5), (0.9166667, 0.25), (0.8333334, 0.25), (0.8333334, 0), (0.9166667, 0), (0.9166666, 0.75), (0.8333334, 0.75), (0.8333334, 0.5), (0.9166667, 0.5), (0.75, 0.75), (0.6666666, 0.75), (0.6666666, 0.5), (0.75, 0.5), (0.8333334, 0.75), (0.75, 0.75), (0.75, 0.5), (0.8333334, 0.5), (0.8333333, 1), (0.75, 1), (0.75, 0.75), (0.8333334, 0.75), (0.75, 1), (0.6666666, 1), (0.6666666, 0.75), (0.75, 0.75), (1, 0.75), (0.9166666, 0.75), (0.9166667, 0.5), (1, 0.5), (1, 1), (0.9166666, 1), (0.9166666, 0.75), (1, 0.75), (0.9166666, 1), (0.8333333, 1), (0.8333334, 0.75), (0.9166666, 0.75), (1, 0.25), (0.9166667, 0.25), (0.9166667, 0), (1, 0), (1, 0.5), (0.9166667, 0.5), (0.9166667, 0.25), (1, 0.25), (0.9166667, 0.5), (0.8333334, 0.5), (0.8333334, 0.25), (0.9166667, 0.25), (0.5, 0.75), (0.41666663, 0.75), (0.41666666, 0.5), (0.5, 0.5), (0.49999997, 1), (0.41666663, 1), (0.41666663, 0.75), (0.5, 0.75), (0.41666663, 1), (0.3333333, 1), (0.3333333, 0.75), (0.41666663, 0.75), (0.6666666, 0.75), (0.5833333, 0.75), (0.5833333, 0.5), (0.6666666, 0.5), (0.6666666, 1), (0.5833333, 1), (0.5833333, 0.75), (0.6666666, 0.75), (0.5833333, 1), (0.49999997, 1), (0.5, 0.75), (0.5833333, 0.75), (0.6666666, 0.25), (0.5833334, 0.25), (0.5833334, 0), (0.6666667, 0), (0.6666666, 0.5), (0.5833333, 0.5), (0.5833334, 0.25), (0.6666666, 0.25), (0.5833333, 0.5), (0.5, 0.5), (0.5, 0.25), (0.5833334, 0.25), (0.16666666, 0.75), (0.08333333, 0.75), (0.08333333, 0.5), (0.16666666, 0.5), (0.16666666, 1), (0.08333333, 1), (0.08333333, 0.75), (0.16666666, 0.75), (0.08333333, 1), (0, 1), (0, 0.75), (0.08333333, 0.75), (0.3333333, 0.75), (0.24999999, 0.75), (0.24999999, 0.5), (0.3333333, 0.5), (0.3333333, 1), (0.24999999, 1), (0.24999999, 0.75), (0.3333333, 0.75), (0.24999999, 1), (0.16666666, 1), (0.16666666, 0.75), (0.24999999, 0.75), (0.3333333, 0.25), (0.25, 0.25), (0.25, 0), (0.33333334, 0), (0.3333333, 0.5), (0.24999999, 0.5), (0.25, 0.25), (0.3333333, 0.25), (0.24999999, 0.5), (0.16666666, 0.5), (0.16666666, 0.25), (0.25, 0.25), (0.16666666, 0.25), (0.08333333, 0.25), (0.083333336, 0), (0.16666667, 0), (0.16666666, 0.5), (0.08333333, 0.5), (0.08333333, 0.25), (0.16666666, 0.25), (0.08333333, 0.5), (0, 0.5), (0, 0.25), (0.08333333, 0.25), (0.5, 0.25), (0.4166667, 0.25), (0.4166667, 0), (0.5, 0), (0.5, 0.5), (0.41666666, 0.5), (0.4166667, 0.25), (0.5, 0.25), (0.41666666, 0.5), (0.3333333, 0.5), (0.3333333, 0.25), (0.4166667, 0.25), (0.8333334, 0.25), (0.75, 0.25), (0.75, 0), (0.8333334, 0), (0.8333334, 0.5), (0.75, 0.5), (0.75, 0.25), (0.8333334, 0.25), (0.75, 0.5), (0.6666666, 0.5), (0.6666666, 0.25), (0.75, 0.25)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }
        }
    }

    def Xform "CamE"
    {
        float3 xformOp:rotateXYZ = (89.99999, 2.2808305e-7, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Camera "CamE"
        {
            float2 clippingRange.timeSamples = {
                1: (0.1, 1000),
            }
            float focalLength.timeSamples = {
                1: 0.5,
            }
            float horizontalAperture.timeSamples = {
                1: 0.36,
            }
            token projection = "perspective"
            float verticalAperture.timeSamples = {
                1: 0.2025,
            }
        }
    }

    def Xform "CamA"
    {
        float3 xformOp:rotateXYZ = (89.99999, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (2.384185791015625e-7, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Camera "CamA"
        {
            float2 clippingRange.timeSamples = {
                1: (0.1, 1000),
            }
            float focalLength.timeSamples = {
                1: 0.5,
                2: 0.6,
                3: 0.7,
                4: 0.8,
            }
            float focusDistance.timeSamples = {
                1: 10,
                3: 10,
                4: 15,
                5: 20,
            }
            float fStop.timeSamples = {
                1: 2.8,
                3: 2.8,
                4: 5,
                5: 8,
            }
            float horizontalAperture.timeSamples = {
                1: 0.36,
            }
            token projection = "perspective"
            float verticalAperture.timeSamples = {
                1: 0.2025,
            }
        }
    }

    def Xform "CamC"
    {
        float3 xformOp:rotateXYZ = (89.99999, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Camera "CamC"
        {
            float2 clippingRange.timeSamples = {
                1: (0.1, 1000),
            }
            float focalLength.timeSamples = {
                1: 0.5,
            }
            float horizontalAperture.timeSamples = {
                1: 0.36,
            }
            float horizontalApertureOffset.timeSamples = {
                1: -0.072000004,
                2: 0,
                3: 0.072000004,
            }
            token projection = "perspective"
            float verticalAperture.timeSamples = {
                1: 0.2025,
            }
            float verticalApertureOffset.timeSamples = {
                3: 0,
                4: 0.053999998,
                5: -0.053999998,
            }
        }
    }

    def Xform "CamD"
    {
        float3 xformOp:rotateXYZ = (89.99999, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Camera "CamD"
        {
            float2 clippingRange.timeSamples = {
                1: (0.1, 1000),
            }
            float focalLength.timeSamples = {
                1: 0.5,
            }
            float horizontalAperture.timeSamples = {
                1: 0.36,
                2: 0.43,
                3: 0.5,
                4: 0.42666668,
                5: 0.64,
            }
            float horizontalApertureOffset.timeSamples = {
                1: -0.072,
                2: 0,
                3: 0.1,
                4: 0.048,
                5: 0.072000004,
            }
            token projection = "perspective"
            float verticalAperture.timeSamples = {
                1: 0.2025,
                2: 0.241875,
                3: 0.28125,
                4: 0.24,
                5: 0.36,
            }
            float verticalApertureOffset.timeSamples = {
                1: 0.05399999,
                2: 0.06449999,
                3: 0.07499999,
                4: 0.035999995,
                5: 0.05399999,
            }
        }
    }

    def Xform "CamB"
    {
        float3 xformOp:rotateXYZ = (89.99999, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Camera "CamB"
        {
            float2 clippingRange.timeSamples = {
                1: (0.1, 10),
                2: (0.1, 11),
                3: (0.1, 13),
                4: (10.55, 13),
                5: (11, 13),
            }
            float focalLength.timeSamples = {
                1: 0.5,
            }
            float horizontalAperture.timeSamples = {
                1: 0.36,
            }
            token projection = "perspective"
            float verticalAperture.timeSamples = {
                1: 0.2025,
            }
        }
    }
}

