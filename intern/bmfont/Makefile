# Makefile.in generated by automake 1.7.6 from Makefile.am.
# intern/bmfont/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/blender
pkglibdir = $(libdir)/blender
pkgincludedir = $(includedir)/blender
top_builddir = ../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoconf
AUTOHEADER = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoheader
AUTOMAKE = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run automake-1.7
AWK = mawk
BLIB_JPEG = 
BLIB_PNG = 
BLIB_SDL = 
BlenderFMOD_FALSE = 
BlenderFMOD_TRUE = #
BlenderGAME_FALSE = 
BlenderGAME_TRUE = #
BlenderOPENAL_FALSE = 
BlenderOPENAL_TRUE = #
BlenderPLUGIN_FALSE = 
BlenderPLUGIN_TRUE = #
BlenderQUICKTIME_FALSE = 
BlenderQUICKTIME_TRUE = #
BlenderSTATIC_FALSE = 
BlenderSTATIC_TRUE = #
CARBON_FALSE = 
CARBON_TRUE = #
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS =  -funsigned-char
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -funsigned-char
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = 
FFLAGS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBM = -lm
LIBOBJS = 

LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKE = /usr/bin/make
MAKEINFO = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run makeinfo
OBJEXT = o
PACKAGE = blender
PACKAGE_BUGREPORT = 
PACKAGE_NAME = blender
PACKAGE_STRING = blender 2.29
PACKAGE_TARNAME = blender
PACKAGE_VERSION = 2.29
PATH_SEPARATOR = :
PBBUILD = 
PYTHON = /usr/bin/python
PYTHONSYSPREFIX = /usr
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_LDFLAGS = -Xlinker -export-dynamic
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.2
RANLIB = ranlib
SDL_CFLAGS = -I/usr/include/SDL -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib -lSDL -lpthread
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USE_OPENAL_FALSE = 
USE_OPENAL_TRUE = #
VERSION = 2.29
WIN32_FALSE = 
WIN32_TRUE = #
X11_FALSE = #
X11_TRUE = 
X_CFLAGS =  -I/usr/X11R6/include
X_EXTRA_LIBS = 
X_LIBS =  -L/usr/X11R6/lib
X_PRE_LIBS =  -lSM -lICE
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
b_jpeg_FALSE = 
b_jpeg_TRUE = #
b_png_FALSE = 
b_png_TRUE = #
b_sdl_FALSE = 
b_sdl_TRUE = #
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/qword/nuevo/fuentes/trabajo/blender/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
pkgpyexecdir = ${pyexecdir}/blender
pkgpythondir = ${pythondir}/blender
prefix = /usr/local
program_transform_name = s,x,x,
pyexecdir = ${exec_prefix}/lib/python2.2/site-packages
pythondir = ${prefix}/lib/python2.2/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
noinst_LTLIBRARIES = libblender_BMF.la

libblender_BMF_la_SOURCES = \
	BMF_Api.h \
	BMF_Fonts.h \
	BMF_Settings.h \
	intern/BMF_Api.cpp \
	intern/BMF_BitmapFont.cpp \
	intern/BMF_BitmapFont.h \
	intern/BMF_FontData.h \
	intern/BMF_font_helv10.cpp \
	intern/BMF_font_helv12.cpp \
	intern/BMF_font_helvb10.cpp \
	intern/BMF_font_helvb12.cpp \
	intern/BMF_font_helvb14.cpp \
	intern/BMF_font_helvb8.cpp \
	intern/BMF_font_scr12.cpp \
	intern/BMF_font_scr14.cpp \
	intern/BMF_font_scr15.cpp


EXTRA_DIST = \
	make/msvc_6_0/bmfont.dsp \
	make/msvc_6_0/bmfont.dsw

subdir = intern/bmfont
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)

libblender_BMF_la_LDFLAGS =
libblender_BMF_la_LIBADD =
am_libblender_BMF_la_OBJECTS = BMF_Api.lo BMF_BitmapFont.lo \
	BMF_font_helv10.lo BMF_font_helv12.lo BMF_font_helvb10.lo \
	BMF_font_helvb12.lo BMF_font_helvb14.lo BMF_font_helvb8.lo \
	BMF_font_scr12.lo BMF_font_scr14.lo BMF_font_scr15.lo
libblender_BMF_la_OBJECTS = $(am_libblender_BMF_la_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/BMF_Api.Plo \
	./$(DEPDIR)/BMF_BitmapFont.Plo \
	./$(DEPDIR)/BMF_font_helv10.Plo \
	./$(DEPDIR)/BMF_font_helv12.Plo \
	./$(DEPDIR)/BMF_font_helvb10.Plo \
	./$(DEPDIR)/BMF_font_helvb12.Plo \
	./$(DEPDIR)/BMF_font_helvb14.Plo \
	./$(DEPDIR)/BMF_font_helvb8.Plo \
	./$(DEPDIR)/BMF_font_scr12.Plo \
	./$(DEPDIR)/BMF_font_scr14.Plo \
	./$(DEPDIR)/BMF_font_scr15.Plo
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libblender_BMF_la_SOURCES)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(libblender_BMF_la_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  intern/bmfont/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libblender_BMF.la: $(libblender_BMF_la_OBJECTS) $(libblender_BMF_la_DEPENDENCIES) 
	$(CXXLINK)  $(libblender_BMF_la_LDFLAGS) $(libblender_BMF_la_OBJECTS) $(libblender_BMF_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/BMF_Api.Plo
include ./$(DEPDIR)/BMF_BitmapFont.Plo
include ./$(DEPDIR)/BMF_font_helv10.Plo
include ./$(DEPDIR)/BMF_font_helv12.Plo
include ./$(DEPDIR)/BMF_font_helvb10.Plo
include ./$(DEPDIR)/BMF_font_helvb12.Plo
include ./$(DEPDIR)/BMF_font_helvb14.Plo
include ./$(DEPDIR)/BMF_font_helvb8.Plo
include ./$(DEPDIR)/BMF_font_scr12.Plo
include ./$(DEPDIR)/BMF_font_scr14.Plo
include ./$(DEPDIR)/BMF_font_scr15.Plo

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

BMF_Api.o: intern/BMF_Api.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_Api.o -MD -MP -MF "$(DEPDIR)/BMF_Api.Tpo" \
	  -c -o BMF_Api.o `test -f 'intern/BMF_Api.cpp' || echo '$(srcdir)/'`intern/BMF_Api.cpp; \
	then mv -f "$(DEPDIR)/BMF_Api.Tpo" "$(DEPDIR)/BMF_Api.Po"; \
	else rm -f "$(DEPDIR)/BMF_Api.Tpo"; exit 1; \
	fi
#	source='intern/BMF_Api.cpp' object='BMF_Api.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_Api.Po' tmpdepfile='$(DEPDIR)/BMF_Api.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_Api.o `test -f 'intern/BMF_Api.cpp' || echo '$(srcdir)/'`intern/BMF_Api.cpp

BMF_Api.obj: intern/BMF_Api.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_Api.obj -MD -MP -MF "$(DEPDIR)/BMF_Api.Tpo" \
	  -c -o BMF_Api.obj `if test -f 'intern/BMF_Api.cpp'; then $(CYGPATH_W) 'intern/BMF_Api.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_Api.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_Api.Tpo" "$(DEPDIR)/BMF_Api.Po"; \
	else rm -f "$(DEPDIR)/BMF_Api.Tpo"; exit 1; \
	fi
#	source='intern/BMF_Api.cpp' object='BMF_Api.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_Api.Po' tmpdepfile='$(DEPDIR)/BMF_Api.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_Api.obj `if test -f 'intern/BMF_Api.cpp'; then $(CYGPATH_W) 'intern/BMF_Api.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_Api.cpp'; fi`

BMF_Api.lo: intern/BMF_Api.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_Api.lo -MD -MP -MF "$(DEPDIR)/BMF_Api.Tpo" \
	  -c -o BMF_Api.lo `test -f 'intern/BMF_Api.cpp' || echo '$(srcdir)/'`intern/BMF_Api.cpp; \
	then mv -f "$(DEPDIR)/BMF_Api.Tpo" "$(DEPDIR)/BMF_Api.Plo"; \
	else rm -f "$(DEPDIR)/BMF_Api.Tpo"; exit 1; \
	fi
#	source='intern/BMF_Api.cpp' object='BMF_Api.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_Api.Plo' tmpdepfile='$(DEPDIR)/BMF_Api.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_Api.lo `test -f 'intern/BMF_Api.cpp' || echo '$(srcdir)/'`intern/BMF_Api.cpp

BMF_BitmapFont.o: intern/BMF_BitmapFont.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_BitmapFont.o -MD -MP -MF "$(DEPDIR)/BMF_BitmapFont.Tpo" \
	  -c -o BMF_BitmapFont.o `test -f 'intern/BMF_BitmapFont.cpp' || echo '$(srcdir)/'`intern/BMF_BitmapFont.cpp; \
	then mv -f "$(DEPDIR)/BMF_BitmapFont.Tpo" "$(DEPDIR)/BMF_BitmapFont.Po"; \
	else rm -f "$(DEPDIR)/BMF_BitmapFont.Tpo"; exit 1; \
	fi
#	source='intern/BMF_BitmapFont.cpp' object='BMF_BitmapFont.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_BitmapFont.Po' tmpdepfile='$(DEPDIR)/BMF_BitmapFont.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_BitmapFont.o `test -f 'intern/BMF_BitmapFont.cpp' || echo '$(srcdir)/'`intern/BMF_BitmapFont.cpp

BMF_BitmapFont.obj: intern/BMF_BitmapFont.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_BitmapFont.obj -MD -MP -MF "$(DEPDIR)/BMF_BitmapFont.Tpo" \
	  -c -o BMF_BitmapFont.obj `if test -f 'intern/BMF_BitmapFont.cpp'; then $(CYGPATH_W) 'intern/BMF_BitmapFont.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_BitmapFont.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_BitmapFont.Tpo" "$(DEPDIR)/BMF_BitmapFont.Po"; \
	else rm -f "$(DEPDIR)/BMF_BitmapFont.Tpo"; exit 1; \
	fi
#	source='intern/BMF_BitmapFont.cpp' object='BMF_BitmapFont.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_BitmapFont.Po' tmpdepfile='$(DEPDIR)/BMF_BitmapFont.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_BitmapFont.obj `if test -f 'intern/BMF_BitmapFont.cpp'; then $(CYGPATH_W) 'intern/BMF_BitmapFont.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_BitmapFont.cpp'; fi`

BMF_BitmapFont.lo: intern/BMF_BitmapFont.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_BitmapFont.lo -MD -MP -MF "$(DEPDIR)/BMF_BitmapFont.Tpo" \
	  -c -o BMF_BitmapFont.lo `test -f 'intern/BMF_BitmapFont.cpp' || echo '$(srcdir)/'`intern/BMF_BitmapFont.cpp; \
	then mv -f "$(DEPDIR)/BMF_BitmapFont.Tpo" "$(DEPDIR)/BMF_BitmapFont.Plo"; \
	else rm -f "$(DEPDIR)/BMF_BitmapFont.Tpo"; exit 1; \
	fi
#	source='intern/BMF_BitmapFont.cpp' object='BMF_BitmapFont.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_BitmapFont.Plo' tmpdepfile='$(DEPDIR)/BMF_BitmapFont.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_BitmapFont.lo `test -f 'intern/BMF_BitmapFont.cpp' || echo '$(srcdir)/'`intern/BMF_BitmapFont.cpp

BMF_font_helv10.o: intern/BMF_font_helv10.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helv10.o -MD -MP -MF "$(DEPDIR)/BMF_font_helv10.Tpo" \
	  -c -o BMF_font_helv10.o `test -f 'intern/BMF_font_helv10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv10.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helv10.Tpo" "$(DEPDIR)/BMF_font_helv10.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helv10.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helv10.cpp' object='BMF_font_helv10.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helv10.Po' tmpdepfile='$(DEPDIR)/BMF_font_helv10.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helv10.o `test -f 'intern/BMF_font_helv10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv10.cpp

BMF_font_helv10.obj: intern/BMF_font_helv10.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helv10.obj -MD -MP -MF "$(DEPDIR)/BMF_font_helv10.Tpo" \
	  -c -o BMF_font_helv10.obj `if test -f 'intern/BMF_font_helv10.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helv10.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helv10.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_helv10.Tpo" "$(DEPDIR)/BMF_font_helv10.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helv10.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helv10.cpp' object='BMF_font_helv10.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helv10.Po' tmpdepfile='$(DEPDIR)/BMF_font_helv10.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helv10.obj `if test -f 'intern/BMF_font_helv10.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helv10.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helv10.cpp'; fi`

BMF_font_helv10.lo: intern/BMF_font_helv10.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helv10.lo -MD -MP -MF "$(DEPDIR)/BMF_font_helv10.Tpo" \
	  -c -o BMF_font_helv10.lo `test -f 'intern/BMF_font_helv10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv10.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helv10.Tpo" "$(DEPDIR)/BMF_font_helv10.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_helv10.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helv10.cpp' object='BMF_font_helv10.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_helv10.Plo' tmpdepfile='$(DEPDIR)/BMF_font_helv10.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helv10.lo `test -f 'intern/BMF_font_helv10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv10.cpp

BMF_font_helv12.o: intern/BMF_font_helv12.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helv12.o -MD -MP -MF "$(DEPDIR)/BMF_font_helv12.Tpo" \
	  -c -o BMF_font_helv12.o `test -f 'intern/BMF_font_helv12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv12.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helv12.Tpo" "$(DEPDIR)/BMF_font_helv12.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helv12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helv12.cpp' object='BMF_font_helv12.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helv12.Po' tmpdepfile='$(DEPDIR)/BMF_font_helv12.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helv12.o `test -f 'intern/BMF_font_helv12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv12.cpp

BMF_font_helv12.obj: intern/BMF_font_helv12.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helv12.obj -MD -MP -MF "$(DEPDIR)/BMF_font_helv12.Tpo" \
	  -c -o BMF_font_helv12.obj `if test -f 'intern/BMF_font_helv12.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helv12.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helv12.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_helv12.Tpo" "$(DEPDIR)/BMF_font_helv12.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helv12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helv12.cpp' object='BMF_font_helv12.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helv12.Po' tmpdepfile='$(DEPDIR)/BMF_font_helv12.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helv12.obj `if test -f 'intern/BMF_font_helv12.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helv12.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helv12.cpp'; fi`

BMF_font_helv12.lo: intern/BMF_font_helv12.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helv12.lo -MD -MP -MF "$(DEPDIR)/BMF_font_helv12.Tpo" \
	  -c -o BMF_font_helv12.lo `test -f 'intern/BMF_font_helv12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv12.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helv12.Tpo" "$(DEPDIR)/BMF_font_helv12.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_helv12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helv12.cpp' object='BMF_font_helv12.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_helv12.Plo' tmpdepfile='$(DEPDIR)/BMF_font_helv12.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helv12.lo `test -f 'intern/BMF_font_helv12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helv12.cpp

BMF_font_helvb10.o: intern/BMF_font_helvb10.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb10.o -MD -MP -MF "$(DEPDIR)/BMF_font_helvb10.Tpo" \
	  -c -o BMF_font_helvb10.o `test -f 'intern/BMF_font_helvb10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb10.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb10.Tpo" "$(DEPDIR)/BMF_font_helvb10.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb10.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb10.cpp' object='BMF_font_helvb10.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb10.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb10.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb10.o `test -f 'intern/BMF_font_helvb10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb10.cpp

BMF_font_helvb10.obj: intern/BMF_font_helvb10.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb10.obj -MD -MP -MF "$(DEPDIR)/BMF_font_helvb10.Tpo" \
	  -c -o BMF_font_helvb10.obj `if test -f 'intern/BMF_font_helvb10.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb10.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb10.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_helvb10.Tpo" "$(DEPDIR)/BMF_font_helvb10.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb10.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb10.cpp' object='BMF_font_helvb10.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb10.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb10.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb10.obj `if test -f 'intern/BMF_font_helvb10.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb10.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb10.cpp'; fi`

BMF_font_helvb10.lo: intern/BMF_font_helvb10.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb10.lo -MD -MP -MF "$(DEPDIR)/BMF_font_helvb10.Tpo" \
	  -c -o BMF_font_helvb10.lo `test -f 'intern/BMF_font_helvb10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb10.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb10.Tpo" "$(DEPDIR)/BMF_font_helvb10.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb10.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb10.cpp' object='BMF_font_helvb10.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_helvb10.Plo' tmpdepfile='$(DEPDIR)/BMF_font_helvb10.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb10.lo `test -f 'intern/BMF_font_helvb10.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb10.cpp

BMF_font_helvb12.o: intern/BMF_font_helvb12.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb12.o -MD -MP -MF "$(DEPDIR)/BMF_font_helvb12.Tpo" \
	  -c -o BMF_font_helvb12.o `test -f 'intern/BMF_font_helvb12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb12.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb12.Tpo" "$(DEPDIR)/BMF_font_helvb12.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb12.cpp' object='BMF_font_helvb12.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb12.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb12.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb12.o `test -f 'intern/BMF_font_helvb12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb12.cpp

BMF_font_helvb12.obj: intern/BMF_font_helvb12.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb12.obj -MD -MP -MF "$(DEPDIR)/BMF_font_helvb12.Tpo" \
	  -c -o BMF_font_helvb12.obj `if test -f 'intern/BMF_font_helvb12.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb12.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb12.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_helvb12.Tpo" "$(DEPDIR)/BMF_font_helvb12.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb12.cpp' object='BMF_font_helvb12.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb12.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb12.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb12.obj `if test -f 'intern/BMF_font_helvb12.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb12.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb12.cpp'; fi`

BMF_font_helvb12.lo: intern/BMF_font_helvb12.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb12.lo -MD -MP -MF "$(DEPDIR)/BMF_font_helvb12.Tpo" \
	  -c -o BMF_font_helvb12.lo `test -f 'intern/BMF_font_helvb12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb12.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb12.Tpo" "$(DEPDIR)/BMF_font_helvb12.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb12.cpp' object='BMF_font_helvb12.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_helvb12.Plo' tmpdepfile='$(DEPDIR)/BMF_font_helvb12.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb12.lo `test -f 'intern/BMF_font_helvb12.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb12.cpp

BMF_font_helvb14.o: intern/BMF_font_helvb14.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb14.o -MD -MP -MF "$(DEPDIR)/BMF_font_helvb14.Tpo" \
	  -c -o BMF_font_helvb14.o `test -f 'intern/BMF_font_helvb14.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb14.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb14.Tpo" "$(DEPDIR)/BMF_font_helvb14.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb14.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb14.cpp' object='BMF_font_helvb14.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb14.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb14.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb14.o `test -f 'intern/BMF_font_helvb14.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb14.cpp

BMF_font_helvb14.obj: intern/BMF_font_helvb14.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb14.obj -MD -MP -MF "$(DEPDIR)/BMF_font_helvb14.Tpo" \
	  -c -o BMF_font_helvb14.obj `if test -f 'intern/BMF_font_helvb14.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb14.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb14.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_helvb14.Tpo" "$(DEPDIR)/BMF_font_helvb14.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb14.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb14.cpp' object='BMF_font_helvb14.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb14.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb14.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb14.obj `if test -f 'intern/BMF_font_helvb14.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb14.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb14.cpp'; fi`

BMF_font_helvb14.lo: intern/BMF_font_helvb14.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb14.lo -MD -MP -MF "$(DEPDIR)/BMF_font_helvb14.Tpo" \
	  -c -o BMF_font_helvb14.lo `test -f 'intern/BMF_font_helvb14.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb14.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb14.Tpo" "$(DEPDIR)/BMF_font_helvb14.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb14.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb14.cpp' object='BMF_font_helvb14.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_helvb14.Plo' tmpdepfile='$(DEPDIR)/BMF_font_helvb14.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb14.lo `test -f 'intern/BMF_font_helvb14.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb14.cpp

BMF_font_helvb8.o: intern/BMF_font_helvb8.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb8.o -MD -MP -MF "$(DEPDIR)/BMF_font_helvb8.Tpo" \
	  -c -o BMF_font_helvb8.o `test -f 'intern/BMF_font_helvb8.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb8.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb8.Tpo" "$(DEPDIR)/BMF_font_helvb8.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb8.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb8.cpp' object='BMF_font_helvb8.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb8.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb8.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb8.o `test -f 'intern/BMF_font_helvb8.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb8.cpp

BMF_font_helvb8.obj: intern/BMF_font_helvb8.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb8.obj -MD -MP -MF "$(DEPDIR)/BMF_font_helvb8.Tpo" \
	  -c -o BMF_font_helvb8.obj `if test -f 'intern/BMF_font_helvb8.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb8.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb8.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_helvb8.Tpo" "$(DEPDIR)/BMF_font_helvb8.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb8.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb8.cpp' object='BMF_font_helvb8.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_helvb8.Po' tmpdepfile='$(DEPDIR)/BMF_font_helvb8.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb8.obj `if test -f 'intern/BMF_font_helvb8.cpp'; then $(CYGPATH_W) 'intern/BMF_font_helvb8.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_helvb8.cpp'; fi`

BMF_font_helvb8.lo: intern/BMF_font_helvb8.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_helvb8.lo -MD -MP -MF "$(DEPDIR)/BMF_font_helvb8.Tpo" \
	  -c -o BMF_font_helvb8.lo `test -f 'intern/BMF_font_helvb8.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb8.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_helvb8.Tpo" "$(DEPDIR)/BMF_font_helvb8.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_helvb8.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_helvb8.cpp' object='BMF_font_helvb8.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_helvb8.Plo' tmpdepfile='$(DEPDIR)/BMF_font_helvb8.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_helvb8.lo `test -f 'intern/BMF_font_helvb8.cpp' || echo '$(srcdir)/'`intern/BMF_font_helvb8.cpp

BMF_font_scr12.o: intern/BMF_font_scr12.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr12.o -MD -MP -MF "$(DEPDIR)/BMF_font_scr12.Tpo" \
	  -c -o BMF_font_scr12.o `test -f 'intern/BMF_font_scr12.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr12.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_scr12.Tpo" "$(DEPDIR)/BMF_font_scr12.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_scr12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr12.cpp' object='BMF_font_scr12.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_scr12.Po' tmpdepfile='$(DEPDIR)/BMF_font_scr12.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr12.o `test -f 'intern/BMF_font_scr12.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr12.cpp

BMF_font_scr12.obj: intern/BMF_font_scr12.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr12.obj -MD -MP -MF "$(DEPDIR)/BMF_font_scr12.Tpo" \
	  -c -o BMF_font_scr12.obj `if test -f 'intern/BMF_font_scr12.cpp'; then $(CYGPATH_W) 'intern/BMF_font_scr12.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_scr12.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_scr12.Tpo" "$(DEPDIR)/BMF_font_scr12.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_scr12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr12.cpp' object='BMF_font_scr12.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_scr12.Po' tmpdepfile='$(DEPDIR)/BMF_font_scr12.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr12.obj `if test -f 'intern/BMF_font_scr12.cpp'; then $(CYGPATH_W) 'intern/BMF_font_scr12.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_scr12.cpp'; fi`

BMF_font_scr12.lo: intern/BMF_font_scr12.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr12.lo -MD -MP -MF "$(DEPDIR)/BMF_font_scr12.Tpo" \
	  -c -o BMF_font_scr12.lo `test -f 'intern/BMF_font_scr12.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr12.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_scr12.Tpo" "$(DEPDIR)/BMF_font_scr12.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_scr12.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr12.cpp' object='BMF_font_scr12.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_scr12.Plo' tmpdepfile='$(DEPDIR)/BMF_font_scr12.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr12.lo `test -f 'intern/BMF_font_scr12.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr12.cpp

BMF_font_scr14.o: intern/BMF_font_scr14.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr14.o -MD -MP -MF "$(DEPDIR)/BMF_font_scr14.Tpo" \
	  -c -o BMF_font_scr14.o `test -f 'intern/BMF_font_scr14.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr14.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_scr14.Tpo" "$(DEPDIR)/BMF_font_scr14.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_scr14.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr14.cpp' object='BMF_font_scr14.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_scr14.Po' tmpdepfile='$(DEPDIR)/BMF_font_scr14.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr14.o `test -f 'intern/BMF_font_scr14.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr14.cpp

BMF_font_scr14.obj: intern/BMF_font_scr14.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr14.obj -MD -MP -MF "$(DEPDIR)/BMF_font_scr14.Tpo" \
	  -c -o BMF_font_scr14.obj `if test -f 'intern/BMF_font_scr14.cpp'; then $(CYGPATH_W) 'intern/BMF_font_scr14.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_scr14.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_scr14.Tpo" "$(DEPDIR)/BMF_font_scr14.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_scr14.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr14.cpp' object='BMF_font_scr14.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_scr14.Po' tmpdepfile='$(DEPDIR)/BMF_font_scr14.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr14.obj `if test -f 'intern/BMF_font_scr14.cpp'; then $(CYGPATH_W) 'intern/BMF_font_scr14.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_scr14.cpp'; fi`

BMF_font_scr14.lo: intern/BMF_font_scr14.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr14.lo -MD -MP -MF "$(DEPDIR)/BMF_font_scr14.Tpo" \
	  -c -o BMF_font_scr14.lo `test -f 'intern/BMF_font_scr14.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr14.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_scr14.Tpo" "$(DEPDIR)/BMF_font_scr14.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_scr14.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr14.cpp' object='BMF_font_scr14.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_scr14.Plo' tmpdepfile='$(DEPDIR)/BMF_font_scr14.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr14.lo `test -f 'intern/BMF_font_scr14.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr14.cpp

BMF_font_scr15.o: intern/BMF_font_scr15.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr15.o -MD -MP -MF "$(DEPDIR)/BMF_font_scr15.Tpo" \
	  -c -o BMF_font_scr15.o `test -f 'intern/BMF_font_scr15.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr15.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_scr15.Tpo" "$(DEPDIR)/BMF_font_scr15.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_scr15.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr15.cpp' object='BMF_font_scr15.o' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_scr15.Po' tmpdepfile='$(DEPDIR)/BMF_font_scr15.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr15.o `test -f 'intern/BMF_font_scr15.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr15.cpp

BMF_font_scr15.obj: intern/BMF_font_scr15.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr15.obj -MD -MP -MF "$(DEPDIR)/BMF_font_scr15.Tpo" \
	  -c -o BMF_font_scr15.obj `if test -f 'intern/BMF_font_scr15.cpp'; then $(CYGPATH_W) 'intern/BMF_font_scr15.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_scr15.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BMF_font_scr15.Tpo" "$(DEPDIR)/BMF_font_scr15.Po"; \
	else rm -f "$(DEPDIR)/BMF_font_scr15.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr15.cpp' object='BMF_font_scr15.obj' libtool=no \
#	depfile='$(DEPDIR)/BMF_font_scr15.Po' tmpdepfile='$(DEPDIR)/BMF_font_scr15.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr15.obj `if test -f 'intern/BMF_font_scr15.cpp'; then $(CYGPATH_W) 'intern/BMF_font_scr15.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/BMF_font_scr15.cpp'; fi`

BMF_font_scr15.lo: intern/BMF_font_scr15.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BMF_font_scr15.lo -MD -MP -MF "$(DEPDIR)/BMF_font_scr15.Tpo" \
	  -c -o BMF_font_scr15.lo `test -f 'intern/BMF_font_scr15.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr15.cpp; \
	then mv -f "$(DEPDIR)/BMF_font_scr15.Tpo" "$(DEPDIR)/BMF_font_scr15.Plo"; \
	else rm -f "$(DEPDIR)/BMF_font_scr15.Tpo"; exit 1; \
	fi
#	source='intern/BMF_font_scr15.cpp' object='BMF_font_scr15.lo' libtool=yes \
#	depfile='$(DEPDIR)/BMF_font_scr15.Plo' tmpdepfile='$(DEPDIR)/BMF_font_scr15.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BMF_font_scr15.lo `test -f 'intern/BMF_font_scr15.cpp' || echo '$(srcdir)/'`intern/BMF_font_scr15.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	$(mkinstalldirs) $(distdir)/make/msvc_6_0
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES)

installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-depend distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-data install-data-am \
	install-exec install-exec-am install-info install-info-am \
	install-man install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
