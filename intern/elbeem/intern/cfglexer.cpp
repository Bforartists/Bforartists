
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yy_restart(yy_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yy_leng;

extern FILE *yy_in, *yy_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yy_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yy_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yy_restart()), so that the user can continue scanning by
	 * just pointing yy_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yy_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yy_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yy_wrap()'s to do buffer switches
 * instead of setting up a fresh yy_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yy_restart (FILE *input_file  );
void yy__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy__create_buffer (FILE *file,int size  );
void yy__delete_buffer (YY_BUFFER_STATE b  );
void yy__flush_buffer (YY_BUFFER_STATE b  );
void yy_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void yy_pop_buffer_state (void );

static void yy_ensure_buffer_stack (void );
static void yy__load_buffer_state (void );
static void yy__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy__scan_bytes (yyconst char *bytes,int len  );

void *yy_alloc (yy_size_t  );
void *yy_realloc (void *,yy_size_t  );
void yy_free (void *  );

#define yy_new_buffer yy__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yy_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy__create_buffer(yy_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yy_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy__create_buffer(yy_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef unsigned char YY_CHAR;

FILE *yy_in = (FILE *) 0, *yy_out = (FILE *) 0;

typedef int yy_state_type;

extern int yy_lineno;

int yy_lineno = 1;

extern char *yy_text;
#define yytext_ptr yy_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yy_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yy_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 98
#define YY_END_OF_BUFFER 99
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[567] =
    {   0,
        0,    0,    0,    0,    6,    6,   99,   97,   97,   95,
       96,   97,   93,   97,   97,   97,   89,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,    1,    2,   97,   96,    4,
        3,    6,    7,    6,    6,    6,    7,    1,    2,    0,
        1,    2,    0,   93,    0,   89,   90,   94,   92,   89,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   85,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    1,    2,    0,    3,
        4,    3,    6,    6,    5,    6,    6,    6,   91,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   45,
        0,    0,    0,    0,    0,    0,    0,    0,   52,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   18,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   64,    0,    0,    0,   76,    0,
        0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   87,   44,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
        0,    0,   79,    0,    0,    0,    0,    0,    0,    0,
       88,    0,    0,    0,    0,    0,    0,    0,    0,   75,
        0,    0,    0,    0,    0,    0,    0,    0,   62,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
        0,    0,    0,   17,    0,    0,   77,    0,    0,    0,

        0,   19,    0,    0,    0,    0,    0,   78,    0,    0,
        0,    0,   40,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,    0,   16,    0,    0,   68,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   46,    0,    0,    0,    0,   56,    0,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   66,    0,    0,    0,    0,    0,   73,
        0,    0,    0,    0,    0,    0,    0,    0,   54,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   50,    0,    0,   22,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       15,   59,   26,    8,    0,   43,    0,   61,    0,    0,
        0,   47,    0,   80,    0,    0,    0,    0,    0,    0,
       67,   35,    0,    0,    0,    0,    0,    0,   23,    0,
       14,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   10,    0,    0,    0,   25,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,    0,    0,    0,
        0,    0,    0,    0,   38,   21,    0,    0,    0,    0,
        0,    0,    9,   11,   34,    0,   74,   58,    0,    0,
        0,   36,   12,    0,    0,    0,   13,    0,    0,    0,

        0,    0,    0,    0,    0,   37,   48,    0,    0,   84,
        0,   41,   31,   57,   55,    0,   70,    0,    0,    0,
       72,    0,    0,    0,   20,   24,    0,    0,    0,    0,
        0,    0,    0,    0,   69,   32,    0,    0,    0,    0,
        0,    0,    0,    0,   30,   71,    0,    0,    0,   81,
        0,    0,   49,   27,    0,    0,    0,   82,    0,    0,
       28,   29,    0,   33,   42,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   13,    1,
       14,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   33,
        1,   15,    1,    1,   16,    1,   17,   18,   19,   20,

       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   33,   42,    1,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    5,    6,    5,
        6,    5,    2,    1,    5,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[577] =
    {   0,
        0,    0,   43,   86,  128,  170,  704,  705,   60,  705,
       63,    0,    0,   43,  692,   53,   50,   47,   53,   78,
       47,   39,   87,  681,   43,   82,   54,   80,  117,   92,
       93,  112,  116,  669,   99,  123,  138,  149,  152,    0,
      141,    0,  705,  695,  156,  101,  705,  157,  160,  163,
      175,  180,  694,    0,  687,  176,  686,  705,    0,  177,
      660,  677,  153,  662,  657,  673,  101,  651,  161,   46,
      175,  178,  670,  668,  660,  659,  649,  647,  186,  653,
      645,  651,  658,  649,  168,  645,  649,  648,  650,  653,
      644,  705,  652,  641,  174,  630,  192,  653,  131,  652,

      633,  198,  635,  628,  631,  629,  214,  219,  222,  226,
        0,  227,    0,  658,  657,  230,    0,  235,  705,    0,
      636,  635,  146,  634,  637,  623,  629,  625,  624,  705,
      617,  617,  620,  618,  612,  623,  619,  624,  705,  613,
      609,  622,  617,  600,  611,  604,  609,  616,  601,  611,
      607,  612,  598,  597,  609,  206,  600,  705,  603,  597,
      596,  584,  599,  587,  601,  587,  600,  588,  598,  598,
      595,  581,  578,  583,  591,  590,  589,  588,  572,  582,
      238,  568,  584,  570,  567,  585,  582,  575,  576,  578,
      567,  561,  559,  183,  577,  570,  562,  570,  553,  558,

      567,  216,  567,  705,  565,  555,  563,  549,  545,  545,
      563,  545,  561,  546,  705,  545,  554,  543,  705,  550,
      549,  548,  534,  535,  543,  550,  545,  537,  533,  526,
      528,  525,  531,  524,  529,  705,  705,  538,  535,  537,
      533,  523,  535,  534,  522,  513,  530,  513,  525,  705,
      521,  519,  705,  509,  508,  221,  520,  521,  504,  513,
      705,  506,  519,  507,  499,  512,  496,  495,  496,  705,
      493,  503,  486,  492,  497,  490,  503,  494,  705,  490,
      495,  502,  480,  498,  482,  478,  475,  485,  491,  705,
      480,  193,  493,  705,  469,  480,  705,  471,  477,  471,

      479,  705,  466,  471,  467,  483,  480,  705,  477,  476,
      465,  470,  478,  457,  471,  461,  470,  460,  470,  460,
      458,  451,  705,  462,  705,  466,  462,  705,  440,  444,
      458,  461,  447,  445,  456,  453,  448,  453,  435,  441,
      452,  705,  448,  221,  450,  426,  705,  444,  436,  442,
      426,  444,  424,  422,  441,  437,  227,  428,  417,  434,
      413,  435,  417,  705,  414,  428,  427,  418,  421,  705,
      404,  427,  415,  421,  418,  415,  411,  402,  705,  407,
      411,  400,  404,  416,  407,  414,  396,  408,  408,  391,
      392,  227,  705,  400,  219,  705,  389,  402,  392,  385,

      389,  385,  394,  231,  399,  395,  394,  393,  377,  387,
      705,  705,  705,  705,  379,  705,  391,  705,  377,  377,
      388,  705,  370,  705,  375,  380,  383,  365,  370,  368,
      705,  705,  374,  379,  376,  375,  361,  371,  705,  368,
      705,  357,  371,  354,  350,  354,  356,  369,  351,  355,
      355,  705,  354,  345,  361,  705,  358,  342,  347,  355,
      341,  351,  356,  351,  336,  340,  351,  332,  336,  336,
      333,  339,  339,  333,  705,  705,  327,  325,  342,  322,
      325,  335,  705,  705,  705,  321,  705,  705,  330,  318,
      317,  705,  705,  331,  310,  313,  705,  323,  322,  318,

      326,  308,  326,  306,  320,  705,  705,  320,  308,  705,
      308,  312,  705,  705,  705,  305,  705,  310,  317,  295,
      705,  311,  307,  300,  705,  705,  236,  299,  305,  309,
      287,  306,  289,  302,  705,  705,  299,  296,  296,  281,
      274,  267,  264,  263,  705,  705,  269,  258,  261,  705,
      267,  250,  705,  705,  245,  225,  222,  705,  212,  166,
      705,  705,  155,  705,  705,  705,  268,  274,  277,  283,
      113,  289,  295,  301,  307,  313
    } ;

static yyconst flex_int16_t yy_def[577] =
    {   0,
      566,    1,  567,  567,  568,  568,  566,  566,  566,  566,
      566,  569,  570,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  571,
      566,  572,  566,  573,  574,  572,  566,  572,  572,  566,
      566,  566,  569,  570,  566,  566,  566,  566,  575,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      571,  566,  572,  573,  573,  574,  572,  576,  566,  575,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      576,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,    0,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566
    } ;

static yyconst flex_int16_t yy_nxt[749] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       17,    8,    8,    8,    8,    8,   18,   19,   20,   21,
       22,   23,   24,    8,   25,    8,    8,   26,   27,   28,
       29,   30,    8,   31,   32,   33,   34,   35,    8,    8,
        8,   36,   37,    8,   38,   10,   39,    8,   13,    8,
        8,   55,   16,   56,    8,    8,   41,    8,   55,   58,
       60,   50,   59,   50,   50,   61,   50,   71,   73,   66,
       85,   72,   81,  133,  134,   62,   63,   82,   86,   74,
       67,   64,   65,   68,   36,   37,    8,   38,   10,   39,
        8,   13,    8,    8,   69,   16,   87,    8,    8,   41,

        8,   51,   52,   75,   51,   52,   83,  117,   70,   96,
      118,   76,   84,   97,   77,   94,   88,   78,  111,  105,
       79,  128,   95,  106,  107,  129,  107,   36,   37,    9,
       43,   11,   44,   45,   89,   98,  101,   46,   90,  108,
       47,  108,  112,   99,  112,   91,   92,  100,   93,  102,
      109,  170,  109,  109,  171,  109,  103,   54,  107,   54,
      107,  108,  110,  108,   50,  110,   50,  184,   54,   48,
       49,    9,   43,   11,   44,   45,  107,  123,  107,   46,
      185,  108,   47,  108,   55,   55,   56,   60,  124,  565,
       51,   52,  135,   51,   52,  131,  136,  132,  137,  138,

      564,  162,  145,  152,   51,   52,  146,  153,  163,  344,
      165,   48,   49,  166,  174,  107,  253,  107,  175,  254,
      108,  167,  108,  109,  345,  109,  168,  112,  112,  112,
      112,   54,  563,   54,  176,  110,  120,  216,  120,  120,
      389,  120,   54,  217,  262,  263,  436,  120,  310,  311,
      120,  402,  312,  439,  440,  538,  390,  562,  403,  448,
      561,  404,  437,   51,   52,  560,  449,  539,   40,   40,
       40,   40,   40,   40,   42,   42,   42,   42,   42,   42,
       53,   53,   53,   54,   54,  559,   54,   54,   54,  113,
      558,  557,  556,  113,  113,  114,  555,  554,  553,  114,

      114,  116,  116,  552,  116,  116,  116,  120,  120,  551,
      120,  120,  120,  181,  181,  550,  181,  181,  181,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,

      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  447,  446,  445,
      444,  443,  442,  441,  438,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,

      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  261,  260,  259,
      258,  257,  256,  255,  252,  251,  250,  249,  248,  247,

      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  183,
      182,  115,  115,  180,  179,  178,  177,  173,  172,  169,
      164,  161,  160,  159,  158,  157,  156,  155,  154,  151,
      150,  149,  148,  147,  144,  143,  142,  141,  140,  139,
      130,  127,  126,  125,  122,  121,   57,   57,  119,  115,

      104,   80,   57,  566,    7,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566
    } ;

static yyconst flex_int16_t yy_chk[749] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,   14,    3,   14,    3,    3,    3,    3,   17,   16,
       17,    9,   16,    9,   11,   18,   11,   21,   22,   19,
       27,   21,   25,   70,   70,   18,   18,   25,   27,   22,
       19,   18,   18,   19,    3,    3,    4,    4,    4,    4,
        4,    4,    4,    4,   20,    4,   28,    4,    4,    4,

        4,    9,    9,   23,   11,   11,   26,   46,   20,   31,
       46,   23,   26,   31,   23,   30,   28,   23,  571,   35,
       23,   67,   30,   35,   36,   67,   36,    4,    4,    5,
        5,    5,    5,    5,   29,   32,   33,    5,   29,   37,
        5,   37,   41,   32,   41,   29,   29,   32,   29,   33,
       38,   99,   38,   39,   99,   39,   33,   45,   48,   45,
       48,   49,   38,   49,   50,   39,   50,  123,   45,    5,
        5,    6,    6,    6,    6,    6,   51,   63,   51,    6,
      123,   52,    6,   52,   56,   60,   56,   60,   63,  563,
       38,   38,   71,   39,   39,   69,   71,   69,   72,   72,

      560,   95,   79,   85,   50,   50,   79,   85,   95,  292,
       97,    6,    6,   97,  102,  107,  194,  107,  102,  194,
      108,   97,  108,  109,  292,  109,   97,  110,  112,  110,
      112,  116,  559,  116,  102,  109,  118,  156,  118,  181,
      344,  181,  116,  156,  202,  202,  392,  118,  256,  256,
      181,  357,  256,  395,  395,  527,  344,  557,  357,  404,
      556,  357,  392,  109,  109,  555,  404,  527,  567,  567,
      567,  567,  567,  567,  568,  568,  568,  568,  568,  568,
      569,  569,  569,  570,  570,  552,  570,  570,  570,  572,
      551,  549,  548,  572,  572,  573,  547,  544,  543,  573,

      573,  574,  574,  542,  574,  574,  574,  575,  575,  541,
      575,  575,  575,  576,  576,  540,  576,  576,  576,  539,
      538,  537,  534,  533,  532,  531,  530,  529,  528,  524,
      523,  522,  520,  519,  518,  516,  512,  511,  509,  508,
      505,  504,  503,  502,  501,  500,  499,  498,  496,  495,
      494,  491,  490,  489,  486,  482,  481,  480,  479,  478,
      477,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  455,
      454,  453,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  440,  438,  437,  436,  435,  434,  433,  430,

      429,  428,  427,  426,  425,  423,  421,  420,  419,  417,
      415,  410,  409,  408,  407,  406,  405,  403,  402,  401,
      400,  399,  398,  397,  394,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  378,  377,  376,
      375,  374,  373,  372,  371,  369,  368,  367,  366,  365,
      363,  362,  361,  360,  359,  358,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  346,  345,  343,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  327,  326,  324,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  307,  306,

      305,  304,  303,  301,  300,  299,  298,  296,  295,  293,
      291,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  278,  277,  276,  275,  274,  273,  272,  271,  269,
      268,  267,  266,  265,  264,  263,  262,  260,  259,  258,
      257,  255,  254,  252,  251,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  218,  217,  216,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  203,  201,  200,  199,
      198,  197,  196,  195,  193,  192,  191,  190,  189,  188,

      187,  186,  185,  184,  183,  182,  180,  179,  178,  177,
      176,  175,  174,  173,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  157,  155,
      154,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  143,  142,  141,  140,  138,  137,  136,  135,  134,
      133,  132,  131,  129,  128,  127,  126,  125,  124,  122,
      121,  115,  114,  106,  105,  104,  103,  101,  100,   98,
       96,   94,   93,   91,   90,   89,   88,   87,   86,   84,
       83,   82,   81,   80,   78,   77,   76,   75,   74,   73,
       68,   66,   65,   64,   62,   61,   57,   55,   53,   44,

       34,   24,   15,    7,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy__flex_debug;
int yy__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yy_text;
#line 1 "src/cfglexer.ll"
/*---------------------------------------------------------------------------*/
/*                    */
/* Minimal Flex Lexer */
/*                    */
/*---------------------------------------------------------------------------*/
#line 11 "src/cfglexer.ll"

/*---------------------------------------------------------------------------*/
/* bison grammar tokens */
/*---------------------------------------------------------------------------*/

/* this header file is automatically generated by bison 
 * and includes all token definitions, as well as yy_lval */
#if ELBEEM_BLENDER==1
#include "cfgparser.h"
#else // ELBEEM_BLENDER==1
#include "cfgparser.hpp"
#endif // ELBEEM_BLENDER==1
#include "utilities.h"

#include <string.h>
#define CHAR_BUFFER_SIZE 8000
char charBuffer[ CHAR_BUFFER_SIZE ];

int lineCount = 1;

extern "C" int yy_wrap (void ) { return 1; }
#define YY_NO_UNISTD_H
	
/*----------------------------------------------------------------------------*/
/* definitions */
/*----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------*/
/* 
 * rules start 
 */
/*----------------------------------------------------------------------------*/
#line 829 "<stdout>"

#define INITIAL 0
#define ATTR 1
#define ATTRVALUE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yy_wrap (void );
#else
extern int yy_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yy_text, yy_leng, 1, yy_out )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yy_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yy_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yy_in))==0 && ferror(yy_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yy_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yy_lex (void);

#define YY_DECL int yy_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yy_text and yy_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 54 "src/cfglexer.ll"



#line 986 "<stdout>"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yy_in )
			yy_in = stdin;

		if ( ! yy_out )
			yy_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yy_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy__create_buffer(yy_in,YY_BUF_SIZE );
		}

		yy__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yy_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 567 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 566 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 57 "src/cfglexer.ll"
{ return KW_PAROPEN; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "src/cfglexer.ll"
{ BEGIN(INITIAL); // '}' always closes scopes
			return KW_PARCLOSE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "src/cfglexer.ll"
{ 
			BEGIN(ATTRVALUE);
			return KW_EQUALS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "src/cfglexer.ll"
{ /* attribute name = normal string */
  		strncpy( charBuffer, yy_text, CHAR_BUFFER_SIZE-2 );
  		yy_lval.charValue = charBuffer;
  		return DT_ATTRNAME; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 68 "src/cfglexer.ll"
{ /* quoted string! attribute name = normal string */
  		strncpy( charBuffer, yy_text, CHAR_BUFFER_SIZE-2 );
			/* get rid of " " */
			for(unsigned int j=0;j<strlen(charBuffer);j++) charBuffer[j]=charBuffer[j+1];
			charBuffer[ strlen(charBuffer)-1 ] = 0;
  		yy_lval.charValue = charBuffer;
  		return DT_ATTRVALUE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "src/cfglexer.ll"
{ /* ends at newline or ';' */
  		strncpy( charBuffer, yy_text, CHAR_BUFFER_SIZE-2 );
  		yy_lval.charValue = charBuffer;
  		return DT_ATTRVALUE; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 79 "src/cfglexer.ll"
{ /* return end token... */
			BEGIN(ATTR); 
			return KW_ATTREND; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 84 "src/cfglexer.ll"
{ return KW_LBMSIM; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 85 "src/cfglexer.ll"
{ return KW_COMPARELBM; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "src/cfglexer.ll"
{ return KW_DEBUGMODE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 87 "src/cfglexer.ll"
{ return KW_DEBUGLEVEL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 88 "src/cfglexer.ll"
{ return KW_RAYTRACING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 91 "src/cfglexer.ll"
{ return KW_RESOLUTION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 92 "src/cfglexer.ll"
{ return KW_ANTIALIAS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 93 "src/cfglexer.ll"
{ return KW_EYEPOINT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 94 "src/cfglexer.ll"
{ return KW_LOOKAT ; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 95 "src/cfglexer.ll"
{ return KW_UPVEC ; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 96 "src/cfglexer.ll"
{ return KW_FOVY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 97 "src/cfglexer.ll"
{ return KW_ASPECT ; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 98 "src/cfglexer.ll"
{ return KW_AMBIENCE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 99 "src/cfglexer.ll"
{ return KW_BACKGROUND; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 100 "src/cfglexer.ll"
{ return KW_ANISTART; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 101 "src/cfglexer.ll"
{ return KW_ANIFRAMES; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 102 "src/cfglexer.ll"
{ return KW_ANIFRAMETIME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 103 "src/cfglexer.ll"
{ return KW_FRAMESKIP; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 104 "src/cfglexer.ll"
{ return KW_FILENAME; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 105 "src/cfglexer.ll"
{ return KW_PMCAUSTICS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 106 "src/cfglexer.ll"
{ return KW_CAUSTICDIST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 107 "src/cfglexer.ll"
{ return KW_CAUSTICPHOT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 108 "src/cfglexer.ll"
{ return KW_SHADOWMAPBIAS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 109 "src/cfglexer.ll"
{ return KW_MAXRAYDEPTH; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 110 "src/cfglexer.ll"
{ return KW_TREEMAXDEPTH; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 111 "src/cfglexer.ll"
{ return KW_TREEMAXTRIANGLES; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 112 "src/cfglexer.ll"
{ return KW_DEBUGPIXEL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 113 "src/cfglexer.ll"
{ return KW_TESTMODE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 114 "src/cfglexer.ll"
{ return KW_OPENGLATTR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 115 "src/cfglexer.ll"
{ return KW_BLENDERATTR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "src/cfglexer.ll"
{ return KW_OBJATTR; /* assign attr to obj */ }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "src/cfglexer.ll"
{ BEGIN(ATTR); return KW_ATTRIBUTE;  /* global attr list */ }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 119 "src/cfglexer.ll"
{ BEGIN(ATTR); return KW_DEFINEATTR; /* obj defines new attrs */ }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "src/cfglexer.ll"
{ BEGIN(ATTR); return KW_DEFINEATTR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "src/cfglexer.ll"
{ BEGIN(ATTR); return KW_DEFINEATTR; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 123 "src/cfglexer.ll"
{ return KW_GEOMETRY; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 124 "src/cfglexer.ll"
{ return KW_TYPE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 125 "src/cfglexer.ll"
{ return KW_GEOTYPE_BOX; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 126 "src/cfglexer.ll"
{ return KW_GEOTYPE_SPHERE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 127 "src/cfglexer.ll"
{ return KW_GEOTYPE_OBJMODEL; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 128 "src/cfglexer.ll"
{ return KW_CASTSHADOWS; }  
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 129 "src/cfglexer.ll"
{ return KW_RECEIVESHADOWS ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 130 "src/cfglexer.ll"
{ return KW_VISIBLE; }  
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 131 "src/cfglexer.ll"
{ return KW_BOX_START; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 132 "src/cfglexer.ll"
{ return KW_BOX_END; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 133 "src/cfglexer.ll"
{ return KW_POLY ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 134 "src/cfglexer.ll"
{ return KW_POLY ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 135 "src/cfglexer.ll"
{ return KW_NUMVERTICES; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 136 "src/cfglexer.ll"
{ return KW_VERTEX; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 137 "src/cfglexer.ll"
{ return KW_NUMPOLYGONS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 138 "src/cfglexer.ll"
{ return KW_ISOSURF; }  
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 139 "src/cfglexer.ll"
{ return KW_FILEMODE; }  
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 140 "src/cfglexer.ll"
{ return KW_INVERT; }  
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 142 "src/cfglexer.ll"
{ return KW_MATERIAL; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 143 "src/cfglexer.ll"
{ return KW_MATTYPE_PHONG; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 144 "src/cfglexer.ll"
{ return KW_MATTYPE_BLINN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 145 "src/cfglexer.ll"
{ return KW_NAME; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 146 "src/cfglexer.ll"
{ return KW_AMBIENT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 147 "src/cfglexer.ll"
{ return KW_DIFFUSE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 148 "src/cfglexer.ll"
{ return KW_SPECULAR; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 149 "src/cfglexer.ll"
{ return KW_MIRROR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 150 "src/cfglexer.ll"
{ return KW_TRANSPARENCE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 151 "src/cfglexer.ll"
{ return KW_REFRACINDEX; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 152 "src/cfglexer.ll"
{ return KW_TRANSADDITIVE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 153 "src/cfglexer.ll"
{ return KW_TRANSATTCOL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 154 "src/cfglexer.ll"
{ return KW_FRESNEL; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 155 "src/cfglexer.ll"
{ return KW_FRESNEL; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 157 "src/cfglexer.ll"
{ return KW_LIGHT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 158 "src/cfglexer.ll"
{ return KW_LIGHT_OMNI; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 159 "src/cfglexer.ll"
{ return KW_ACTIVE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 160 "src/cfglexer.ll"
{ return KW_COLOUR; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 161 "src/cfglexer.ll"
{ return KW_COLOUR; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 162 "src/cfglexer.ll"
{ return KW_POSITION; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 163 "src/cfglexer.ll"
{ return KW_CAUSTICPHOTONS; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 164 "src/cfglexer.ll"
{ return KW_CAUSTICSTRENGTH; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 165 "src/cfglexer.ll"
{ return KW_SHADOWMAP; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 166 "src/cfglexer.ll"
{ return KW_CAUSTICSMAP; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 168 "src/cfglexer.ll"
{ yy_lval.intValue = 1; return DT_INTEGER; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 169 "src/cfglexer.ll"
{ yy_lval.intValue = 0; return DT_INTEGER; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 170 "src/cfglexer.ll"
{ yy_lval.intValue = 1; return DT_INTEGER; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 171 "src/cfglexer.ll"
{ yy_lval.intValue = 0; return DT_INTEGER; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 174 "src/cfglexer.ll"
{ // integer number
  yy_lval.intValue = atoi( yy_text );
  return DT_INTEGER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 178 "src/cfglexer.ll"
{ // floating point number
  yy_lval.floatValue = atof( yy_text );
  return DT_FLOAT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 182 "src/cfglexer.ll"
{ /* normal character strings, now also for paths/filenames */
  strncpy( charBuffer, yy_text, CHAR_BUFFER_SIZE-2 );
	/* get rid of " " */
	for(unsigned int j=0;j<strlen(charBuffer);j++) charBuffer[j]=charBuffer[j+1];
	charBuffer[ strlen(charBuffer)-1 ] = 0;
  yy_lval.charValue = charBuffer;
  return DT_STRING; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 190 "src/cfglexer.ll"
{ /* one line comment */  }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 191 "src/cfglexer.ll"
{ /* one line comment */  }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 192 "src/cfglexer.ll"
{ /* multiline comment */
	register int c;	
	for ( ; ; )	{
			while ( (c = yyinput()) != '*' &&
							c != EOF ) {
				/* eat up text of comment, count lines */
				if(c == '\n') lineCount++;
			}
			
			if ( c == '*' )	{
					while ( (c = yyinput()) == '*' ); /* search '*' */
					if ( c == '/' )	break;    /* found the end */
					if ( c == '\n' )	lineCount++;
				}
			
			if ( c == EOF )	{
					errorOut( "cfgLexer, Line "<<lineCount<<" :End of file found in comment..." );
					break;
				}
  	} /* multline comment done */
  }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 216 "src/cfglexer.ll"
{ // count line numbers
  lineCount++; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 219 "src/cfglexer.ll"
{ /* do nothing by default... */ }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 221 "src/cfglexer.ll"
{ /*errorOut( "cfgLexer, Line "<<lineCount<<" : Unknown character '"<<(char)yyinput()<<"' " ); xit(1); */ }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 224 "src/cfglexer.ll"
ECHO;
	YY_BREAK
#line 1605 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ATTR):
case YY_STATE_EOF(ATTRVALUE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yy_in at a new source and called
			 * yy_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yy_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yy_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yy_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yy_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yy_restart(yy_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 567 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 567 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 566);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yy_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yy_restart(yy_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yy_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yy_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yy_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yy_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy__create_buffer(yy_in,YY_BUF_SIZE );
	}

	yy__init_buffer(YY_CURRENT_BUFFER,input_file );
	yy__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yy_pop_buffer_state();
	 *		yy_push_buffer_state(new_buffer);
     */
	yy_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yy_wrap()) processing, but the only time this flag
	 * is looked at is after yy_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yy_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yy_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy__create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy__create_buffer()
 * 
 */
    void yy__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_free((void *) b->yy_ch_buf  );

	yy_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yy_restart() or at EOF.
 */
    static void yy__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy__init_buffer was _probably_
     * called from yy_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yy_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yy_ensure_buffer_stack();

	/* This block is copied from yy__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy__switch_to_buffer. */
	yy__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yy_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yy_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yy_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yy_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yy_lex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy__scan_bytes() instead.
 */
YY_BUFFER_STATE yy__scan_string (yyconst char * yy_str )
{
    
	return yy__scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yy_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy__scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy__scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yy_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yy_text[yy_leng] = (yy_hold_char); \
		(yy_c_buf_p) = yy_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yy_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yy_get_lineno  (void)
{
        
    return yy_lineno;
}

/** Get the input stream.
 * 
 */
FILE *yy_get_in  (void)
{
        return yy_in;
}

/** Get the output stream.
 * 
 */
FILE *yy_get_out  (void)
{
        return yy_out;
}

/** Get the length of the current token.
 * 
 */
int yy_get_leng  (void)
{
        return yy_leng;
}

/** Get the current token.
 * 
 */

char *yy_get_text  (void)
{
        return yy_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yy_set_lineno (int  line_number )
{
    
    yy_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy__switch_to_buffer
 */
void yy_set_in (FILE *  in_str )
{
        yy_in = in_str ;
}

void yy_set_out (FILE *  out_str )
{
        yy_out = out_str ;
}

int yy_get_debug  (void)
{
        return yy__flex_debug;
}

void yy_set_debug (int  bdebug )
{
        yy__flex_debug = bdebug ;
}

/* yy_lex_destroy is for both reentrant and non-reentrant scanners. */
int yy_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yy_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	yy_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yy_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yy_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yy_free (void * ptr )
{
	free( (char *) ptr );	/* see yy_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 224 "src/cfglexer.ll"
