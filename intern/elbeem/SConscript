#!/usr/bin/python
Import ('library_env')
Import('user_options_dict');

print "Including El'Beem Fluid Simulation..."
elbeem_env = library_env.Copy();
elbeem_env.Append(CXXFLAGS= ' -DNOGUI -DELBEEM_BLENDER=1  ');
elbeem_env.Append(CCFLAGS=  ' -DNOGUI -DELBEEM_BLENDER=1  ');
#elbeem_env.Append(CPPPATH= '../src');
#elbeem_env.Append(CCPATH=  '../src');
  
elbeem_env.Append (CPPPATH = user_options_dict['PNG_INCLUDE'])
elbeem_env.Append (CPPPATH = user_options_dict['Z_INCLUDE'])
elbeem_env.Append (CPPPATH = user_options_dict['SDL_INCLUDE'])
elbeem_env.Append (CCPATH = user_options_dict['PNG_INCLUDE'])
elbeem_env.Append (CCPATH = user_options_dict['Z_INCLUDE'])
elbeem_env.Append (CCPATH = user_options_dict['SDL_INCLUDE'])

#Export('elbeem_env');
#SConscript(['src/SConscript'])

# main build----------------------------------------
#Import('elbeem_env');
#srcenv = elbeem_env.Copy();

Sources = [ 

	"intern/cfgparser.cpp",
	"intern/cfglexer.cpp",

	"intern/attributes.cpp",
	"intern/elbeem.cpp",
	"intern/factory_fsgr.cpp",
	"intern/isosurface.cpp",
	"intern/lbminterface.cpp",
	"intern/ntl_blenderdumper.cpp",
	"intern/ntl_bsptree.cpp",
	"intern/ntl_geometrybox.cpp",
	"intern/ntl_geometrymodel.cpp",
	"intern/ntl_geometryobject.cpp",
	"intern/ntl_geometrysphere.cpp",
	"intern/ntl_image.cpp",
	"intern/ntl_lightobject.cpp",
	"intern/ntl_ray.cpp",
	"intern/ntl_raytracer.cpp",
	"intern/ntl_scene.cpp",
	"intern/parametrizer.cpp",
	"intern/particletracer.cpp",
	"intern/simulation_object.cpp",
	"intern/utilities.cpp",
	"intern/blendercall.cpp"

		]; # sources

elbeem_env.Library (target='#'+user_options_dict['BUILD_DIR']+'/lib/blender_elbeem', source=Sources)

