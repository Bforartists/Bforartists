# Makefile.in generated by automake 1.7.6 from Makefile.am.
# intern/SoundSystem/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/blender
pkglibdir = $(libdir)/blender
pkgincludedir = $(includedir)/blender
top_builddir = ../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoconf
AUTOHEADER = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run autoheader
AUTOMAKE = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run automake-1.7
AWK = mawk
BLIB_JPEG = 
BLIB_PNG = 
BLIB_SDL = 
BlenderFMOD_FALSE = 
BlenderFMOD_TRUE = #
BlenderGAME_FALSE = 
BlenderGAME_TRUE = #
BlenderOPENAL_FALSE = 
BlenderOPENAL_TRUE = #
BlenderPLUGIN_FALSE = 
BlenderPLUGIN_TRUE = #
BlenderQUICKTIME_FALSE = 
BlenderQUICKTIME_TRUE = #
BlenderSTATIC_FALSE = 
BlenderSTATIC_TRUE = #
CARBON_FALSE = 
CARBON_TRUE = #
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS =  -funsigned-char
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -funsigned-char
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = 
FFLAGS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBM = -lm
LIBOBJS = 
LIBS = -lGLU -lGL -lX11 -lXext -lutil -ldl -lstdc++ -lSDL -lpng -ljpeg -lpthread -lz  -L/usr/lib -lSDL -lpthread
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKE = /usr/bin/make
MAKEINFO = ${SHELL} /home/qword/nuevo/fuentes/trabajo/blender/missing --run makeinfo
OBJEXT = o
PACKAGE = blender
PACKAGE_BUGREPORT = 
PACKAGE_NAME = blender
PACKAGE_STRING = blender 2.29
PACKAGE_TARNAME = blender
PACKAGE_VERSION = 2.29
PATH_SEPARATOR = :
PBBUILD = 
PYTHON = /usr/bin/python
PYTHONSYSPREFIX = /usr
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_LDFLAGS = -Xlinker -export-dynamic
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.2
RANLIB = ranlib
SDL_CFLAGS = -I/usr/include/SDL -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib -lSDL -lpthread
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USE_OPENAL_FALSE = 
USE_OPENAL_TRUE = #
VERSION = 2.29
WIN32_FALSE = 
WIN32_TRUE = #
X11_FALSE = #
X11_TRUE = 
X_CFLAGS =  -I/usr/X11R6/include
X_EXTRA_LIBS = 
X_LIBS =  -L/usr/X11R6/lib
X_PRE_LIBS =  -lSM -lICE
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
b_jpeg_FALSE = 
b_jpeg_TRUE = #
b_png_FALSE = 
b_png_TRUE = #
b_sdl_FALSE = 
b_sdl_TRUE = #
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/qword/nuevo/fuentes/trabajo/blender/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
pkgpyexecdir = ${pyexecdir}/blender
pkgpythondir = ${pythondir}/blender
prefix = /usr/local
program_transform_name = s,x,x,
pyexecdir = ${exec_prefix}/lib/python2.2/site-packages
pythondir = ${prefix}/lib/python2.2/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
noinst_LTLIBRARIES = libsoundsystem.la
FMOD_DEVICE = 

#FMOD_DEVICE = \
#	fmod/SND_FmodDevice.cpp \
#	fmod/SND_FmodDevice.h

FMOD_DIST = \
	fmod/SND_FmodDevice.cpp \
	fmod/SND_FmodDevice.h

#FMOD_DIST = 
OPENAL_DEVICE = 

#OPENAL_DEVICE = \
#	openal/SND_OpenALDevice.cpp \
#	openal/SND_OpenALDevice.h \
#	openal/pthread_cancel.cpp

OPENAL_DIST = \
	openal/SND_OpenALDevice.cpp \
	openal/SND_OpenALDevice.h \
	openal/pthread_cancel.cpp

#OPENAL_DIST = 


#there is a test file for those who want to build it... as long as you edit this file

#note fmod might be a windows only file as it includes from the windows library
libsoundsystem_la_SOURCES = \
	SND_C-api.h \
	SND_CDObject.h \
	SND_DependKludge.h \
	SND_DeviceManager.h \
	SND_IAudioDevice.h \
	SND_Object.h \
	SND_Scene.h \
	SND_SoundListener.h \
	SND_SoundObject.h \
	SND_Utils.h \
	SND_WaveCache.h \
	SND_WaveSlot.h \
	SoundDefines.h \
	dummy/SND_DummyDevice.cpp \
	dummy/SND_DummyDevice.h \
	$(FMOD_DEVICE) \
	intern/SND_AudioDevice.cpp \
	intern/SND_AudioDevice.h \
	intern/SND_C-api.cpp \
	intern/SND_CDObject.cpp \
	intern/SND_DeviceManager.cpp \
	intern/SND_IdObject.cpp \
	intern/SND_IdObject.h \
	intern/SND_Scene.cpp \
	intern/SND_SoundListener.cpp \
	intern/SND_SoundObject.cpp \
	intern/SND_Utils.cpp \
	intern/SND_WaveCache.cpp \
	intern/SND_WaveSlot.cpp \
    $(OPENAL_DEVICE)


INCLUDES = -I$(top_srcdir)/lib/windows/fmod/include \
	-I$(top_srcdir)/intern/SoundSystem/intern \
	-I$(top_srcdir)/intern/moto/include \
	-I$(top_srcdir)/intern/string \
	-I$(top_srcdir)/intern/SoundSystem/dummy \
	-I$(top_srcdir)/intern/SoundSystem/openal


EXTRA_DIST = \
	Makefile \
	dummy/Makefile \
	fmod/Makefile \
	intern/Makefile \
	openal/Makefile \
	$(FMOD_DIST) \
    $(OPENAL_DIST)

subdir = intern/SoundSystem
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)

libsoundsystem_la_LDFLAGS =
libsoundsystem_la_LIBADD =
am__libsoundsystem_la_SOURCES_DIST = SND_C-api.h SND_CDObject.h \
	SND_DependKludge.h SND_DeviceManager.h SND_IAudioDevice.h \
	SND_Object.h SND_Scene.h SND_SoundListener.h SND_SoundObject.h \
	SND_Utils.h SND_WaveCache.h SND_WaveSlot.h SoundDefines.h \
	dummy/SND_DummyDevice.cpp dummy/SND_DummyDevice.h \
	fmod/SND_FmodDevice.cpp fmod/SND_FmodDevice.h \
	intern/SND_AudioDevice.cpp intern/SND_AudioDevice.h \
	intern/SND_C-api.cpp intern/SND_CDObject.cpp \
	intern/SND_DeviceManager.cpp intern/SND_IdObject.cpp \
	intern/SND_IdObject.h intern/SND_Scene.cpp \
	intern/SND_SoundListener.cpp intern/SND_SoundObject.cpp \
	intern/SND_Utils.cpp intern/SND_WaveCache.cpp \
	intern/SND_WaveSlot.cpp openal/SND_OpenALDevice.cpp \
	openal/SND_OpenALDevice.h openal/pthread_cancel.cpp
#am__objects_1 = SND_FmodDevice.lo
am__objects_1 =
#am__objects_2 = SND_OpenALDevice.lo \
#	pthread_cancel.lo
am__objects_2 =
am_libsoundsystem_la_OBJECTS = SND_DummyDevice.lo $(am__objects_1) \
	SND_AudioDevice.lo SND_C-api.lo SND_CDObject.lo \
	SND_DeviceManager.lo SND_IdObject.lo SND_Scene.lo \
	SND_SoundListener.lo SND_SoundObject.lo SND_Utils.lo \
	SND_WaveCache.lo SND_WaveSlot.lo $(am__objects_2)
libsoundsystem_la_OBJECTS = $(am_libsoundsystem_la_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/SND_AudioDevice.Plo \
	./$(DEPDIR)/SND_C-api.Plo \
	./$(DEPDIR)/SND_CDObject.Plo \
	./$(DEPDIR)/SND_DeviceManager.Plo \
	./$(DEPDIR)/SND_DummyDevice.Plo \
	./$(DEPDIR)/SND_FmodDevice.Plo \
	./$(DEPDIR)/SND_IdObject.Plo \
	./$(DEPDIR)/SND_OpenALDevice.Plo \
	./$(DEPDIR)/SND_Scene.Plo \
	./$(DEPDIR)/SND_SoundListener.Plo \
	./$(DEPDIR)/SND_SoundObject.Plo \
	./$(DEPDIR)/SND_Utils.Plo \
	./$(DEPDIR)/SND_WaveCache.Plo \
	./$(DEPDIR)/SND_WaveSlot.Plo \
	./$(DEPDIR)/pthread_cancel.Plo
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(am__libsoundsystem_la_SOURCES_DIST)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(libsoundsystem_la_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  intern/SoundSystem/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libsoundsystem.la: $(libsoundsystem_la_OBJECTS) $(libsoundsystem_la_DEPENDENCIES) 
	$(CXXLINK)  $(libsoundsystem_la_LDFLAGS) $(libsoundsystem_la_OBJECTS) $(libsoundsystem_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/SND_AudioDevice.Plo
include ./$(DEPDIR)/SND_C-api.Plo
include ./$(DEPDIR)/SND_CDObject.Plo
include ./$(DEPDIR)/SND_DeviceManager.Plo
include ./$(DEPDIR)/SND_DummyDevice.Plo
include ./$(DEPDIR)/SND_FmodDevice.Plo
include ./$(DEPDIR)/SND_IdObject.Plo
include ./$(DEPDIR)/SND_OpenALDevice.Plo
include ./$(DEPDIR)/SND_Scene.Plo
include ./$(DEPDIR)/SND_SoundListener.Plo
include ./$(DEPDIR)/SND_SoundObject.Plo
include ./$(DEPDIR)/SND_Utils.Plo
include ./$(DEPDIR)/SND_WaveCache.Plo
include ./$(DEPDIR)/SND_WaveSlot.Plo
include ./$(DEPDIR)/pthread_cancel.Plo

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

SND_DummyDevice.o: dummy/SND_DummyDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_DummyDevice.o -MD -MP -MF "$(DEPDIR)/SND_DummyDevice.Tpo" \
	  -c -o SND_DummyDevice.o `test -f 'dummy/SND_DummyDevice.cpp' || echo '$(srcdir)/'`dummy/SND_DummyDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_DummyDevice.Tpo" "$(DEPDIR)/SND_DummyDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_DummyDevice.Tpo"; exit 1; \
	fi
#	source='dummy/SND_DummyDevice.cpp' object='SND_DummyDevice.o' libtool=no \
#	depfile='$(DEPDIR)/SND_DummyDevice.Po' tmpdepfile='$(DEPDIR)/SND_DummyDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_DummyDevice.o `test -f 'dummy/SND_DummyDevice.cpp' || echo '$(srcdir)/'`dummy/SND_DummyDevice.cpp

SND_DummyDevice.obj: dummy/SND_DummyDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_DummyDevice.obj -MD -MP -MF "$(DEPDIR)/SND_DummyDevice.Tpo" \
	  -c -o SND_DummyDevice.obj `if test -f 'dummy/SND_DummyDevice.cpp'; then $(CYGPATH_W) 'dummy/SND_DummyDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/dummy/SND_DummyDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_DummyDevice.Tpo" "$(DEPDIR)/SND_DummyDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_DummyDevice.Tpo"; exit 1; \
	fi
#	source='dummy/SND_DummyDevice.cpp' object='SND_DummyDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_DummyDevice.Po' tmpdepfile='$(DEPDIR)/SND_DummyDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_DummyDevice.obj `if test -f 'dummy/SND_DummyDevice.cpp'; then $(CYGPATH_W) 'dummy/SND_DummyDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/dummy/SND_DummyDevice.cpp'; fi`

SND_DummyDevice.lo: dummy/SND_DummyDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_DummyDevice.lo -MD -MP -MF "$(DEPDIR)/SND_DummyDevice.Tpo" \
	  -c -o SND_DummyDevice.lo `test -f 'dummy/SND_DummyDevice.cpp' || echo '$(srcdir)/'`dummy/SND_DummyDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_DummyDevice.Tpo" "$(DEPDIR)/SND_DummyDevice.Plo"; \
	else rm -f "$(DEPDIR)/SND_DummyDevice.Tpo"; exit 1; \
	fi
#	source='dummy/SND_DummyDevice.cpp' object='SND_DummyDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_DummyDevice.Plo' tmpdepfile='$(DEPDIR)/SND_DummyDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_DummyDevice.lo `test -f 'dummy/SND_DummyDevice.cpp' || echo '$(srcdir)/'`dummy/SND_DummyDevice.cpp

SND_FmodDevice.o: fmod/SND_FmodDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_FmodDevice.o -MD -MP -MF "$(DEPDIR)/SND_FmodDevice.Tpo" \
	  -c -o SND_FmodDevice.o `test -f 'fmod/SND_FmodDevice.cpp' || echo '$(srcdir)/'`fmod/SND_FmodDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_FmodDevice.Tpo" "$(DEPDIR)/SND_FmodDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_FmodDevice.Tpo"; exit 1; \
	fi
#	source='fmod/SND_FmodDevice.cpp' object='SND_FmodDevice.o' libtool=no \
#	depfile='$(DEPDIR)/SND_FmodDevice.Po' tmpdepfile='$(DEPDIR)/SND_FmodDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_FmodDevice.o `test -f 'fmod/SND_FmodDevice.cpp' || echo '$(srcdir)/'`fmod/SND_FmodDevice.cpp

SND_FmodDevice.obj: fmod/SND_FmodDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_FmodDevice.obj -MD -MP -MF "$(DEPDIR)/SND_FmodDevice.Tpo" \
	  -c -o SND_FmodDevice.obj `if test -f 'fmod/SND_FmodDevice.cpp'; then $(CYGPATH_W) 'fmod/SND_FmodDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/fmod/SND_FmodDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_FmodDevice.Tpo" "$(DEPDIR)/SND_FmodDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_FmodDevice.Tpo"; exit 1; \
	fi
#	source='fmod/SND_FmodDevice.cpp' object='SND_FmodDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_FmodDevice.Po' tmpdepfile='$(DEPDIR)/SND_FmodDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_FmodDevice.obj `if test -f 'fmod/SND_FmodDevice.cpp'; then $(CYGPATH_W) 'fmod/SND_FmodDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/fmod/SND_FmodDevice.cpp'; fi`

SND_FmodDevice.lo: fmod/SND_FmodDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_FmodDevice.lo -MD -MP -MF "$(DEPDIR)/SND_FmodDevice.Tpo" \
	  -c -o SND_FmodDevice.lo `test -f 'fmod/SND_FmodDevice.cpp' || echo '$(srcdir)/'`fmod/SND_FmodDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_FmodDevice.Tpo" "$(DEPDIR)/SND_FmodDevice.Plo"; \
	else rm -f "$(DEPDIR)/SND_FmodDevice.Tpo"; exit 1; \
	fi
#	source='fmod/SND_FmodDevice.cpp' object='SND_FmodDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_FmodDevice.Plo' tmpdepfile='$(DEPDIR)/SND_FmodDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_FmodDevice.lo `test -f 'fmod/SND_FmodDevice.cpp' || echo '$(srcdir)/'`fmod/SND_FmodDevice.cpp

SND_AudioDevice.o: intern/SND_AudioDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_AudioDevice.o -MD -MP -MF "$(DEPDIR)/SND_AudioDevice.Tpo" \
	  -c -o SND_AudioDevice.o `test -f 'intern/SND_AudioDevice.cpp' || echo '$(srcdir)/'`intern/SND_AudioDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_AudioDevice.Tpo" "$(DEPDIR)/SND_AudioDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_AudioDevice.Tpo"; exit 1; \
	fi
#	source='intern/SND_AudioDevice.cpp' object='SND_AudioDevice.o' libtool=no \
#	depfile='$(DEPDIR)/SND_AudioDevice.Po' tmpdepfile='$(DEPDIR)/SND_AudioDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_AudioDevice.o `test -f 'intern/SND_AudioDevice.cpp' || echo '$(srcdir)/'`intern/SND_AudioDevice.cpp

SND_AudioDevice.obj: intern/SND_AudioDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_AudioDevice.obj -MD -MP -MF "$(DEPDIR)/SND_AudioDevice.Tpo" \
	  -c -o SND_AudioDevice.obj `if test -f 'intern/SND_AudioDevice.cpp'; then $(CYGPATH_W) 'intern/SND_AudioDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_AudioDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_AudioDevice.Tpo" "$(DEPDIR)/SND_AudioDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_AudioDevice.Tpo"; exit 1; \
	fi
#	source='intern/SND_AudioDevice.cpp' object='SND_AudioDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_AudioDevice.Po' tmpdepfile='$(DEPDIR)/SND_AudioDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_AudioDevice.obj `if test -f 'intern/SND_AudioDevice.cpp'; then $(CYGPATH_W) 'intern/SND_AudioDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_AudioDevice.cpp'; fi`

SND_AudioDevice.lo: intern/SND_AudioDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_AudioDevice.lo -MD -MP -MF "$(DEPDIR)/SND_AudioDevice.Tpo" \
	  -c -o SND_AudioDevice.lo `test -f 'intern/SND_AudioDevice.cpp' || echo '$(srcdir)/'`intern/SND_AudioDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_AudioDevice.Tpo" "$(DEPDIR)/SND_AudioDevice.Plo"; \
	else rm -f "$(DEPDIR)/SND_AudioDevice.Tpo"; exit 1; \
	fi
#	source='intern/SND_AudioDevice.cpp' object='SND_AudioDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_AudioDevice.Plo' tmpdepfile='$(DEPDIR)/SND_AudioDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_AudioDevice.lo `test -f 'intern/SND_AudioDevice.cpp' || echo '$(srcdir)/'`intern/SND_AudioDevice.cpp

SND_C-api.o: intern/SND_C-api.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_C-api.o -MD -MP -MF "$(DEPDIR)/SND_C-api.Tpo" \
	  -c -o SND_C-api.o `test -f 'intern/SND_C-api.cpp' || echo '$(srcdir)/'`intern/SND_C-api.cpp; \
	then mv -f "$(DEPDIR)/SND_C-api.Tpo" "$(DEPDIR)/SND_C-api.Po"; \
	else rm -f "$(DEPDIR)/SND_C-api.Tpo"; exit 1; \
	fi
#	source='intern/SND_C-api.cpp' object='SND_C-api.o' libtool=no \
#	depfile='$(DEPDIR)/SND_C-api.Po' tmpdepfile='$(DEPDIR)/SND_C-api.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_C-api.o `test -f 'intern/SND_C-api.cpp' || echo '$(srcdir)/'`intern/SND_C-api.cpp

SND_C-api.obj: intern/SND_C-api.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_C-api.obj -MD -MP -MF "$(DEPDIR)/SND_C-api.Tpo" \
	  -c -o SND_C-api.obj `if test -f 'intern/SND_C-api.cpp'; then $(CYGPATH_W) 'intern/SND_C-api.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_C-api.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_C-api.Tpo" "$(DEPDIR)/SND_C-api.Po"; \
	else rm -f "$(DEPDIR)/SND_C-api.Tpo"; exit 1; \
	fi
#	source='intern/SND_C-api.cpp' object='SND_C-api.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_C-api.Po' tmpdepfile='$(DEPDIR)/SND_C-api.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_C-api.obj `if test -f 'intern/SND_C-api.cpp'; then $(CYGPATH_W) 'intern/SND_C-api.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_C-api.cpp'; fi`

SND_C-api.lo: intern/SND_C-api.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_C-api.lo -MD -MP -MF "$(DEPDIR)/SND_C-api.Tpo" \
	  -c -o SND_C-api.lo `test -f 'intern/SND_C-api.cpp' || echo '$(srcdir)/'`intern/SND_C-api.cpp; \
	then mv -f "$(DEPDIR)/SND_C-api.Tpo" "$(DEPDIR)/SND_C-api.Plo"; \
	else rm -f "$(DEPDIR)/SND_C-api.Tpo"; exit 1; \
	fi
#	source='intern/SND_C-api.cpp' object='SND_C-api.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_C-api.Plo' tmpdepfile='$(DEPDIR)/SND_C-api.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_C-api.lo `test -f 'intern/SND_C-api.cpp' || echo '$(srcdir)/'`intern/SND_C-api.cpp

SND_CDObject.o: intern/SND_CDObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_CDObject.o -MD -MP -MF "$(DEPDIR)/SND_CDObject.Tpo" \
	  -c -o SND_CDObject.o `test -f 'intern/SND_CDObject.cpp' || echo '$(srcdir)/'`intern/SND_CDObject.cpp; \
	then mv -f "$(DEPDIR)/SND_CDObject.Tpo" "$(DEPDIR)/SND_CDObject.Po"; \
	else rm -f "$(DEPDIR)/SND_CDObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_CDObject.cpp' object='SND_CDObject.o' libtool=no \
#	depfile='$(DEPDIR)/SND_CDObject.Po' tmpdepfile='$(DEPDIR)/SND_CDObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_CDObject.o `test -f 'intern/SND_CDObject.cpp' || echo '$(srcdir)/'`intern/SND_CDObject.cpp

SND_CDObject.obj: intern/SND_CDObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_CDObject.obj -MD -MP -MF "$(DEPDIR)/SND_CDObject.Tpo" \
	  -c -o SND_CDObject.obj `if test -f 'intern/SND_CDObject.cpp'; then $(CYGPATH_W) 'intern/SND_CDObject.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_CDObject.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_CDObject.Tpo" "$(DEPDIR)/SND_CDObject.Po"; \
	else rm -f "$(DEPDIR)/SND_CDObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_CDObject.cpp' object='SND_CDObject.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_CDObject.Po' tmpdepfile='$(DEPDIR)/SND_CDObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_CDObject.obj `if test -f 'intern/SND_CDObject.cpp'; then $(CYGPATH_W) 'intern/SND_CDObject.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_CDObject.cpp'; fi`

SND_CDObject.lo: intern/SND_CDObject.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_CDObject.lo -MD -MP -MF "$(DEPDIR)/SND_CDObject.Tpo" \
	  -c -o SND_CDObject.lo `test -f 'intern/SND_CDObject.cpp' || echo '$(srcdir)/'`intern/SND_CDObject.cpp; \
	then mv -f "$(DEPDIR)/SND_CDObject.Tpo" "$(DEPDIR)/SND_CDObject.Plo"; \
	else rm -f "$(DEPDIR)/SND_CDObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_CDObject.cpp' object='SND_CDObject.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_CDObject.Plo' tmpdepfile='$(DEPDIR)/SND_CDObject.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_CDObject.lo `test -f 'intern/SND_CDObject.cpp' || echo '$(srcdir)/'`intern/SND_CDObject.cpp

SND_DeviceManager.o: intern/SND_DeviceManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_DeviceManager.o -MD -MP -MF "$(DEPDIR)/SND_DeviceManager.Tpo" \
	  -c -o SND_DeviceManager.o `test -f 'intern/SND_DeviceManager.cpp' || echo '$(srcdir)/'`intern/SND_DeviceManager.cpp; \
	then mv -f "$(DEPDIR)/SND_DeviceManager.Tpo" "$(DEPDIR)/SND_DeviceManager.Po"; \
	else rm -f "$(DEPDIR)/SND_DeviceManager.Tpo"; exit 1; \
	fi
#	source='intern/SND_DeviceManager.cpp' object='SND_DeviceManager.o' libtool=no \
#	depfile='$(DEPDIR)/SND_DeviceManager.Po' tmpdepfile='$(DEPDIR)/SND_DeviceManager.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_DeviceManager.o `test -f 'intern/SND_DeviceManager.cpp' || echo '$(srcdir)/'`intern/SND_DeviceManager.cpp

SND_DeviceManager.obj: intern/SND_DeviceManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_DeviceManager.obj -MD -MP -MF "$(DEPDIR)/SND_DeviceManager.Tpo" \
	  -c -o SND_DeviceManager.obj `if test -f 'intern/SND_DeviceManager.cpp'; then $(CYGPATH_W) 'intern/SND_DeviceManager.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_DeviceManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_DeviceManager.Tpo" "$(DEPDIR)/SND_DeviceManager.Po"; \
	else rm -f "$(DEPDIR)/SND_DeviceManager.Tpo"; exit 1; \
	fi
#	source='intern/SND_DeviceManager.cpp' object='SND_DeviceManager.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_DeviceManager.Po' tmpdepfile='$(DEPDIR)/SND_DeviceManager.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_DeviceManager.obj `if test -f 'intern/SND_DeviceManager.cpp'; then $(CYGPATH_W) 'intern/SND_DeviceManager.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_DeviceManager.cpp'; fi`

SND_DeviceManager.lo: intern/SND_DeviceManager.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_DeviceManager.lo -MD -MP -MF "$(DEPDIR)/SND_DeviceManager.Tpo" \
	  -c -o SND_DeviceManager.lo `test -f 'intern/SND_DeviceManager.cpp' || echo '$(srcdir)/'`intern/SND_DeviceManager.cpp; \
	then mv -f "$(DEPDIR)/SND_DeviceManager.Tpo" "$(DEPDIR)/SND_DeviceManager.Plo"; \
	else rm -f "$(DEPDIR)/SND_DeviceManager.Tpo"; exit 1; \
	fi
#	source='intern/SND_DeviceManager.cpp' object='SND_DeviceManager.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_DeviceManager.Plo' tmpdepfile='$(DEPDIR)/SND_DeviceManager.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_DeviceManager.lo `test -f 'intern/SND_DeviceManager.cpp' || echo '$(srcdir)/'`intern/SND_DeviceManager.cpp

SND_IdObject.o: intern/SND_IdObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_IdObject.o -MD -MP -MF "$(DEPDIR)/SND_IdObject.Tpo" \
	  -c -o SND_IdObject.o `test -f 'intern/SND_IdObject.cpp' || echo '$(srcdir)/'`intern/SND_IdObject.cpp; \
	then mv -f "$(DEPDIR)/SND_IdObject.Tpo" "$(DEPDIR)/SND_IdObject.Po"; \
	else rm -f "$(DEPDIR)/SND_IdObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_IdObject.cpp' object='SND_IdObject.o' libtool=no \
#	depfile='$(DEPDIR)/SND_IdObject.Po' tmpdepfile='$(DEPDIR)/SND_IdObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_IdObject.o `test -f 'intern/SND_IdObject.cpp' || echo '$(srcdir)/'`intern/SND_IdObject.cpp

SND_IdObject.obj: intern/SND_IdObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_IdObject.obj -MD -MP -MF "$(DEPDIR)/SND_IdObject.Tpo" \
	  -c -o SND_IdObject.obj `if test -f 'intern/SND_IdObject.cpp'; then $(CYGPATH_W) 'intern/SND_IdObject.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_IdObject.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_IdObject.Tpo" "$(DEPDIR)/SND_IdObject.Po"; \
	else rm -f "$(DEPDIR)/SND_IdObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_IdObject.cpp' object='SND_IdObject.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_IdObject.Po' tmpdepfile='$(DEPDIR)/SND_IdObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_IdObject.obj `if test -f 'intern/SND_IdObject.cpp'; then $(CYGPATH_W) 'intern/SND_IdObject.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_IdObject.cpp'; fi`

SND_IdObject.lo: intern/SND_IdObject.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_IdObject.lo -MD -MP -MF "$(DEPDIR)/SND_IdObject.Tpo" \
	  -c -o SND_IdObject.lo `test -f 'intern/SND_IdObject.cpp' || echo '$(srcdir)/'`intern/SND_IdObject.cpp; \
	then mv -f "$(DEPDIR)/SND_IdObject.Tpo" "$(DEPDIR)/SND_IdObject.Plo"; \
	else rm -f "$(DEPDIR)/SND_IdObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_IdObject.cpp' object='SND_IdObject.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_IdObject.Plo' tmpdepfile='$(DEPDIR)/SND_IdObject.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_IdObject.lo `test -f 'intern/SND_IdObject.cpp' || echo '$(srcdir)/'`intern/SND_IdObject.cpp

SND_Scene.o: intern/SND_Scene.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_Scene.o -MD -MP -MF "$(DEPDIR)/SND_Scene.Tpo" \
	  -c -o SND_Scene.o `test -f 'intern/SND_Scene.cpp' || echo '$(srcdir)/'`intern/SND_Scene.cpp; \
	then mv -f "$(DEPDIR)/SND_Scene.Tpo" "$(DEPDIR)/SND_Scene.Po"; \
	else rm -f "$(DEPDIR)/SND_Scene.Tpo"; exit 1; \
	fi
#	source='intern/SND_Scene.cpp' object='SND_Scene.o' libtool=no \
#	depfile='$(DEPDIR)/SND_Scene.Po' tmpdepfile='$(DEPDIR)/SND_Scene.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_Scene.o `test -f 'intern/SND_Scene.cpp' || echo '$(srcdir)/'`intern/SND_Scene.cpp

SND_Scene.obj: intern/SND_Scene.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_Scene.obj -MD -MP -MF "$(DEPDIR)/SND_Scene.Tpo" \
	  -c -o SND_Scene.obj `if test -f 'intern/SND_Scene.cpp'; then $(CYGPATH_W) 'intern/SND_Scene.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_Scene.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_Scene.Tpo" "$(DEPDIR)/SND_Scene.Po"; \
	else rm -f "$(DEPDIR)/SND_Scene.Tpo"; exit 1; \
	fi
#	source='intern/SND_Scene.cpp' object='SND_Scene.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_Scene.Po' tmpdepfile='$(DEPDIR)/SND_Scene.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_Scene.obj `if test -f 'intern/SND_Scene.cpp'; then $(CYGPATH_W) 'intern/SND_Scene.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_Scene.cpp'; fi`

SND_Scene.lo: intern/SND_Scene.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_Scene.lo -MD -MP -MF "$(DEPDIR)/SND_Scene.Tpo" \
	  -c -o SND_Scene.lo `test -f 'intern/SND_Scene.cpp' || echo '$(srcdir)/'`intern/SND_Scene.cpp; \
	then mv -f "$(DEPDIR)/SND_Scene.Tpo" "$(DEPDIR)/SND_Scene.Plo"; \
	else rm -f "$(DEPDIR)/SND_Scene.Tpo"; exit 1; \
	fi
#	source='intern/SND_Scene.cpp' object='SND_Scene.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_Scene.Plo' tmpdepfile='$(DEPDIR)/SND_Scene.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_Scene.lo `test -f 'intern/SND_Scene.cpp' || echo '$(srcdir)/'`intern/SND_Scene.cpp

SND_SoundListener.o: intern/SND_SoundListener.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_SoundListener.o -MD -MP -MF "$(DEPDIR)/SND_SoundListener.Tpo" \
	  -c -o SND_SoundListener.o `test -f 'intern/SND_SoundListener.cpp' || echo '$(srcdir)/'`intern/SND_SoundListener.cpp; \
	then mv -f "$(DEPDIR)/SND_SoundListener.Tpo" "$(DEPDIR)/SND_SoundListener.Po"; \
	else rm -f "$(DEPDIR)/SND_SoundListener.Tpo"; exit 1; \
	fi
#	source='intern/SND_SoundListener.cpp' object='SND_SoundListener.o' libtool=no \
#	depfile='$(DEPDIR)/SND_SoundListener.Po' tmpdepfile='$(DEPDIR)/SND_SoundListener.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_SoundListener.o `test -f 'intern/SND_SoundListener.cpp' || echo '$(srcdir)/'`intern/SND_SoundListener.cpp

SND_SoundListener.obj: intern/SND_SoundListener.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_SoundListener.obj -MD -MP -MF "$(DEPDIR)/SND_SoundListener.Tpo" \
	  -c -o SND_SoundListener.obj `if test -f 'intern/SND_SoundListener.cpp'; then $(CYGPATH_W) 'intern/SND_SoundListener.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_SoundListener.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_SoundListener.Tpo" "$(DEPDIR)/SND_SoundListener.Po"; \
	else rm -f "$(DEPDIR)/SND_SoundListener.Tpo"; exit 1; \
	fi
#	source='intern/SND_SoundListener.cpp' object='SND_SoundListener.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_SoundListener.Po' tmpdepfile='$(DEPDIR)/SND_SoundListener.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_SoundListener.obj `if test -f 'intern/SND_SoundListener.cpp'; then $(CYGPATH_W) 'intern/SND_SoundListener.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_SoundListener.cpp'; fi`

SND_SoundListener.lo: intern/SND_SoundListener.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_SoundListener.lo -MD -MP -MF "$(DEPDIR)/SND_SoundListener.Tpo" \
	  -c -o SND_SoundListener.lo `test -f 'intern/SND_SoundListener.cpp' || echo '$(srcdir)/'`intern/SND_SoundListener.cpp; \
	then mv -f "$(DEPDIR)/SND_SoundListener.Tpo" "$(DEPDIR)/SND_SoundListener.Plo"; \
	else rm -f "$(DEPDIR)/SND_SoundListener.Tpo"; exit 1; \
	fi
#	source='intern/SND_SoundListener.cpp' object='SND_SoundListener.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_SoundListener.Plo' tmpdepfile='$(DEPDIR)/SND_SoundListener.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_SoundListener.lo `test -f 'intern/SND_SoundListener.cpp' || echo '$(srcdir)/'`intern/SND_SoundListener.cpp

SND_SoundObject.o: intern/SND_SoundObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_SoundObject.o -MD -MP -MF "$(DEPDIR)/SND_SoundObject.Tpo" \
	  -c -o SND_SoundObject.o `test -f 'intern/SND_SoundObject.cpp' || echo '$(srcdir)/'`intern/SND_SoundObject.cpp; \
	then mv -f "$(DEPDIR)/SND_SoundObject.Tpo" "$(DEPDIR)/SND_SoundObject.Po"; \
	else rm -f "$(DEPDIR)/SND_SoundObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_SoundObject.cpp' object='SND_SoundObject.o' libtool=no \
#	depfile='$(DEPDIR)/SND_SoundObject.Po' tmpdepfile='$(DEPDIR)/SND_SoundObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_SoundObject.o `test -f 'intern/SND_SoundObject.cpp' || echo '$(srcdir)/'`intern/SND_SoundObject.cpp

SND_SoundObject.obj: intern/SND_SoundObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_SoundObject.obj -MD -MP -MF "$(DEPDIR)/SND_SoundObject.Tpo" \
	  -c -o SND_SoundObject.obj `if test -f 'intern/SND_SoundObject.cpp'; then $(CYGPATH_W) 'intern/SND_SoundObject.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_SoundObject.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_SoundObject.Tpo" "$(DEPDIR)/SND_SoundObject.Po"; \
	else rm -f "$(DEPDIR)/SND_SoundObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_SoundObject.cpp' object='SND_SoundObject.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_SoundObject.Po' tmpdepfile='$(DEPDIR)/SND_SoundObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_SoundObject.obj `if test -f 'intern/SND_SoundObject.cpp'; then $(CYGPATH_W) 'intern/SND_SoundObject.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_SoundObject.cpp'; fi`

SND_SoundObject.lo: intern/SND_SoundObject.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_SoundObject.lo -MD -MP -MF "$(DEPDIR)/SND_SoundObject.Tpo" \
	  -c -o SND_SoundObject.lo `test -f 'intern/SND_SoundObject.cpp' || echo '$(srcdir)/'`intern/SND_SoundObject.cpp; \
	then mv -f "$(DEPDIR)/SND_SoundObject.Tpo" "$(DEPDIR)/SND_SoundObject.Plo"; \
	else rm -f "$(DEPDIR)/SND_SoundObject.Tpo"; exit 1; \
	fi
#	source='intern/SND_SoundObject.cpp' object='SND_SoundObject.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_SoundObject.Plo' tmpdepfile='$(DEPDIR)/SND_SoundObject.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_SoundObject.lo `test -f 'intern/SND_SoundObject.cpp' || echo '$(srcdir)/'`intern/SND_SoundObject.cpp

SND_Utils.o: intern/SND_Utils.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_Utils.o -MD -MP -MF "$(DEPDIR)/SND_Utils.Tpo" \
	  -c -o SND_Utils.o `test -f 'intern/SND_Utils.cpp' || echo '$(srcdir)/'`intern/SND_Utils.cpp; \
	then mv -f "$(DEPDIR)/SND_Utils.Tpo" "$(DEPDIR)/SND_Utils.Po"; \
	else rm -f "$(DEPDIR)/SND_Utils.Tpo"; exit 1; \
	fi
#	source='intern/SND_Utils.cpp' object='SND_Utils.o' libtool=no \
#	depfile='$(DEPDIR)/SND_Utils.Po' tmpdepfile='$(DEPDIR)/SND_Utils.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_Utils.o `test -f 'intern/SND_Utils.cpp' || echo '$(srcdir)/'`intern/SND_Utils.cpp

SND_Utils.obj: intern/SND_Utils.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_Utils.obj -MD -MP -MF "$(DEPDIR)/SND_Utils.Tpo" \
	  -c -o SND_Utils.obj `if test -f 'intern/SND_Utils.cpp'; then $(CYGPATH_W) 'intern/SND_Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_Utils.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_Utils.Tpo" "$(DEPDIR)/SND_Utils.Po"; \
	else rm -f "$(DEPDIR)/SND_Utils.Tpo"; exit 1; \
	fi
#	source='intern/SND_Utils.cpp' object='SND_Utils.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_Utils.Po' tmpdepfile='$(DEPDIR)/SND_Utils.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_Utils.obj `if test -f 'intern/SND_Utils.cpp'; then $(CYGPATH_W) 'intern/SND_Utils.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_Utils.cpp'; fi`

SND_Utils.lo: intern/SND_Utils.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_Utils.lo -MD -MP -MF "$(DEPDIR)/SND_Utils.Tpo" \
	  -c -o SND_Utils.lo `test -f 'intern/SND_Utils.cpp' || echo '$(srcdir)/'`intern/SND_Utils.cpp; \
	then mv -f "$(DEPDIR)/SND_Utils.Tpo" "$(DEPDIR)/SND_Utils.Plo"; \
	else rm -f "$(DEPDIR)/SND_Utils.Tpo"; exit 1; \
	fi
#	source='intern/SND_Utils.cpp' object='SND_Utils.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_Utils.Plo' tmpdepfile='$(DEPDIR)/SND_Utils.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_Utils.lo `test -f 'intern/SND_Utils.cpp' || echo '$(srcdir)/'`intern/SND_Utils.cpp

SND_WaveCache.o: intern/SND_WaveCache.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_WaveCache.o -MD -MP -MF "$(DEPDIR)/SND_WaveCache.Tpo" \
	  -c -o SND_WaveCache.o `test -f 'intern/SND_WaveCache.cpp' || echo '$(srcdir)/'`intern/SND_WaveCache.cpp; \
	then mv -f "$(DEPDIR)/SND_WaveCache.Tpo" "$(DEPDIR)/SND_WaveCache.Po"; \
	else rm -f "$(DEPDIR)/SND_WaveCache.Tpo"; exit 1; \
	fi
#	source='intern/SND_WaveCache.cpp' object='SND_WaveCache.o' libtool=no \
#	depfile='$(DEPDIR)/SND_WaveCache.Po' tmpdepfile='$(DEPDIR)/SND_WaveCache.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_WaveCache.o `test -f 'intern/SND_WaveCache.cpp' || echo '$(srcdir)/'`intern/SND_WaveCache.cpp

SND_WaveCache.obj: intern/SND_WaveCache.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_WaveCache.obj -MD -MP -MF "$(DEPDIR)/SND_WaveCache.Tpo" \
	  -c -o SND_WaveCache.obj `if test -f 'intern/SND_WaveCache.cpp'; then $(CYGPATH_W) 'intern/SND_WaveCache.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_WaveCache.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_WaveCache.Tpo" "$(DEPDIR)/SND_WaveCache.Po"; \
	else rm -f "$(DEPDIR)/SND_WaveCache.Tpo"; exit 1; \
	fi
#	source='intern/SND_WaveCache.cpp' object='SND_WaveCache.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_WaveCache.Po' tmpdepfile='$(DEPDIR)/SND_WaveCache.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_WaveCache.obj `if test -f 'intern/SND_WaveCache.cpp'; then $(CYGPATH_W) 'intern/SND_WaveCache.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_WaveCache.cpp'; fi`

SND_WaveCache.lo: intern/SND_WaveCache.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_WaveCache.lo -MD -MP -MF "$(DEPDIR)/SND_WaveCache.Tpo" \
	  -c -o SND_WaveCache.lo `test -f 'intern/SND_WaveCache.cpp' || echo '$(srcdir)/'`intern/SND_WaveCache.cpp; \
	then mv -f "$(DEPDIR)/SND_WaveCache.Tpo" "$(DEPDIR)/SND_WaveCache.Plo"; \
	else rm -f "$(DEPDIR)/SND_WaveCache.Tpo"; exit 1; \
	fi
#	source='intern/SND_WaveCache.cpp' object='SND_WaveCache.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_WaveCache.Plo' tmpdepfile='$(DEPDIR)/SND_WaveCache.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_WaveCache.lo `test -f 'intern/SND_WaveCache.cpp' || echo '$(srcdir)/'`intern/SND_WaveCache.cpp

SND_WaveSlot.o: intern/SND_WaveSlot.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_WaveSlot.o -MD -MP -MF "$(DEPDIR)/SND_WaveSlot.Tpo" \
	  -c -o SND_WaveSlot.o `test -f 'intern/SND_WaveSlot.cpp' || echo '$(srcdir)/'`intern/SND_WaveSlot.cpp; \
	then mv -f "$(DEPDIR)/SND_WaveSlot.Tpo" "$(DEPDIR)/SND_WaveSlot.Po"; \
	else rm -f "$(DEPDIR)/SND_WaveSlot.Tpo"; exit 1; \
	fi
#	source='intern/SND_WaveSlot.cpp' object='SND_WaveSlot.o' libtool=no \
#	depfile='$(DEPDIR)/SND_WaveSlot.Po' tmpdepfile='$(DEPDIR)/SND_WaveSlot.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_WaveSlot.o `test -f 'intern/SND_WaveSlot.cpp' || echo '$(srcdir)/'`intern/SND_WaveSlot.cpp

SND_WaveSlot.obj: intern/SND_WaveSlot.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_WaveSlot.obj -MD -MP -MF "$(DEPDIR)/SND_WaveSlot.Tpo" \
	  -c -o SND_WaveSlot.obj `if test -f 'intern/SND_WaveSlot.cpp'; then $(CYGPATH_W) 'intern/SND_WaveSlot.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_WaveSlot.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_WaveSlot.Tpo" "$(DEPDIR)/SND_WaveSlot.Po"; \
	else rm -f "$(DEPDIR)/SND_WaveSlot.Tpo"; exit 1; \
	fi
#	source='intern/SND_WaveSlot.cpp' object='SND_WaveSlot.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_WaveSlot.Po' tmpdepfile='$(DEPDIR)/SND_WaveSlot.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_WaveSlot.obj `if test -f 'intern/SND_WaveSlot.cpp'; then $(CYGPATH_W) 'intern/SND_WaveSlot.cpp'; else $(CYGPATH_W) '$(srcdir)/intern/SND_WaveSlot.cpp'; fi`

SND_WaveSlot.lo: intern/SND_WaveSlot.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_WaveSlot.lo -MD -MP -MF "$(DEPDIR)/SND_WaveSlot.Tpo" \
	  -c -o SND_WaveSlot.lo `test -f 'intern/SND_WaveSlot.cpp' || echo '$(srcdir)/'`intern/SND_WaveSlot.cpp; \
	then mv -f "$(DEPDIR)/SND_WaveSlot.Tpo" "$(DEPDIR)/SND_WaveSlot.Plo"; \
	else rm -f "$(DEPDIR)/SND_WaveSlot.Tpo"; exit 1; \
	fi
#	source='intern/SND_WaveSlot.cpp' object='SND_WaveSlot.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_WaveSlot.Plo' tmpdepfile='$(DEPDIR)/SND_WaveSlot.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_WaveSlot.lo `test -f 'intern/SND_WaveSlot.cpp' || echo '$(srcdir)/'`intern/SND_WaveSlot.cpp

SND_OpenALDevice.o: openal/SND_OpenALDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_OpenALDevice.o -MD -MP -MF "$(DEPDIR)/SND_OpenALDevice.Tpo" \
	  -c -o SND_OpenALDevice.o `test -f 'openal/SND_OpenALDevice.cpp' || echo '$(srcdir)/'`openal/SND_OpenALDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_OpenALDevice.Tpo" "$(DEPDIR)/SND_OpenALDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_OpenALDevice.Tpo"; exit 1; \
	fi
#	source='openal/SND_OpenALDevice.cpp' object='SND_OpenALDevice.o' libtool=no \
#	depfile='$(DEPDIR)/SND_OpenALDevice.Po' tmpdepfile='$(DEPDIR)/SND_OpenALDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_OpenALDevice.o `test -f 'openal/SND_OpenALDevice.cpp' || echo '$(srcdir)/'`openal/SND_OpenALDevice.cpp

SND_OpenALDevice.obj: openal/SND_OpenALDevice.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_OpenALDevice.obj -MD -MP -MF "$(DEPDIR)/SND_OpenALDevice.Tpo" \
	  -c -o SND_OpenALDevice.obj `if test -f 'openal/SND_OpenALDevice.cpp'; then $(CYGPATH_W) 'openal/SND_OpenALDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/openal/SND_OpenALDevice.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SND_OpenALDevice.Tpo" "$(DEPDIR)/SND_OpenALDevice.Po"; \
	else rm -f "$(DEPDIR)/SND_OpenALDevice.Tpo"; exit 1; \
	fi
#	source='openal/SND_OpenALDevice.cpp' object='SND_OpenALDevice.obj' libtool=no \
#	depfile='$(DEPDIR)/SND_OpenALDevice.Po' tmpdepfile='$(DEPDIR)/SND_OpenALDevice.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_OpenALDevice.obj `if test -f 'openal/SND_OpenALDevice.cpp'; then $(CYGPATH_W) 'openal/SND_OpenALDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/openal/SND_OpenALDevice.cpp'; fi`

SND_OpenALDevice.lo: openal/SND_OpenALDevice.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SND_OpenALDevice.lo -MD -MP -MF "$(DEPDIR)/SND_OpenALDevice.Tpo" \
	  -c -o SND_OpenALDevice.lo `test -f 'openal/SND_OpenALDevice.cpp' || echo '$(srcdir)/'`openal/SND_OpenALDevice.cpp; \
	then mv -f "$(DEPDIR)/SND_OpenALDevice.Tpo" "$(DEPDIR)/SND_OpenALDevice.Plo"; \
	else rm -f "$(DEPDIR)/SND_OpenALDevice.Tpo"; exit 1; \
	fi
#	source='openal/SND_OpenALDevice.cpp' object='SND_OpenALDevice.lo' libtool=yes \
#	depfile='$(DEPDIR)/SND_OpenALDevice.Plo' tmpdepfile='$(DEPDIR)/SND_OpenALDevice.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SND_OpenALDevice.lo `test -f 'openal/SND_OpenALDevice.cpp' || echo '$(srcdir)/'`openal/SND_OpenALDevice.cpp

pthread_cancel.o: openal/pthread_cancel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pthread_cancel.o -MD -MP -MF "$(DEPDIR)/pthread_cancel.Tpo" \
	  -c -o pthread_cancel.o `test -f 'openal/pthread_cancel.cpp' || echo '$(srcdir)/'`openal/pthread_cancel.cpp; \
	then mv -f "$(DEPDIR)/pthread_cancel.Tpo" "$(DEPDIR)/pthread_cancel.Po"; \
	else rm -f "$(DEPDIR)/pthread_cancel.Tpo"; exit 1; \
	fi
#	source='openal/pthread_cancel.cpp' object='pthread_cancel.o' libtool=no \
#	depfile='$(DEPDIR)/pthread_cancel.Po' tmpdepfile='$(DEPDIR)/pthread_cancel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pthread_cancel.o `test -f 'openal/pthread_cancel.cpp' || echo '$(srcdir)/'`openal/pthread_cancel.cpp

pthread_cancel.obj: openal/pthread_cancel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pthread_cancel.obj -MD -MP -MF "$(DEPDIR)/pthread_cancel.Tpo" \
	  -c -o pthread_cancel.obj `if test -f 'openal/pthread_cancel.cpp'; then $(CYGPATH_W) 'openal/pthread_cancel.cpp'; else $(CYGPATH_W) '$(srcdir)/openal/pthread_cancel.cpp'; fi`; \
	then mv -f "$(DEPDIR)/pthread_cancel.Tpo" "$(DEPDIR)/pthread_cancel.Po"; \
	else rm -f "$(DEPDIR)/pthread_cancel.Tpo"; exit 1; \
	fi
#	source='openal/pthread_cancel.cpp' object='pthread_cancel.obj' libtool=no \
#	depfile='$(DEPDIR)/pthread_cancel.Po' tmpdepfile='$(DEPDIR)/pthread_cancel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pthread_cancel.obj `if test -f 'openal/pthread_cancel.cpp'; then $(CYGPATH_W) 'openal/pthread_cancel.cpp'; else $(CYGPATH_W) '$(srcdir)/openal/pthread_cancel.cpp'; fi`

pthread_cancel.lo: openal/pthread_cancel.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pthread_cancel.lo -MD -MP -MF "$(DEPDIR)/pthread_cancel.Tpo" \
	  -c -o pthread_cancel.lo `test -f 'openal/pthread_cancel.cpp' || echo '$(srcdir)/'`openal/pthread_cancel.cpp; \
	then mv -f "$(DEPDIR)/pthread_cancel.Tpo" "$(DEPDIR)/pthread_cancel.Plo"; \
	else rm -f "$(DEPDIR)/pthread_cancel.Tpo"; exit 1; \
	fi
#	source='openal/pthread_cancel.cpp' object='pthread_cancel.lo' libtool=yes \
#	depfile='$(DEPDIR)/pthread_cancel.Plo' tmpdepfile='$(DEPDIR)/pthread_cancel.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pthread_cancel.lo `test -f 'openal/pthread_cancel.cpp' || echo '$(srcdir)/'`openal/pthread_cancel.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	$(mkinstalldirs) $(distdir)/dummy $(distdir)/fmod $(distdir)/intern $(distdir)/openal
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES)

installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-depend distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-data install-data-am \
	install-exec install-exec-am install-info install-info-am \
	install-man install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
