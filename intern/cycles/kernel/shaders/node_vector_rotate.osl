/*
 * Copyright 2011-2020 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "node_math.h"
#include "stdcycles.h"

shader node_vector_rotate(int invert = 0,
                          string type = "axis",
                          vector VectorIn = vector(0.0, 0.0, 0.0),
                          point Center = point(0.0, 0.0, 0.0),
                          point Rotation = point(0.0, 0.0, 0.0),
                          vector Axis = vector(0.0, 0.0, 1.0),
                          float Angle = 0.0,
                          output vector VectorOut = vector(0.0, 0.0, 0.0))
{
  if (type == "euler_xyz") {
    matrix rmat = (invert) ? transpose(euler_to_mat(Rotation)) : euler_to_mat(Rotation);
    VectorOut = transform(rmat, VectorIn - Center) + Center;
  }
  else {
    float a = (invert) ? -Angle : Angle;
    if (type == "x_axis") {
      VectorOut = rotate(VectorIn - Center, a, point(0.0), vector(1.0, 0.0, 0.0)) + Center;
    }
    else if (type == "y_axis") {
      VectorOut = rotate(VectorIn - Center, a, point(0.0), vector(0.0, 1.0, 0.0)) + Center;
    }
    else if (type == "z_axis") {
      VectorOut = rotate(VectorIn - Center, a, point(0.0), vector(0.0, 0.0, 1.0)) + Center;
    }
    else {  // axis
      VectorOut = (length(Axis) != 0.0) ? rotate(VectorIn - Center, a, point(0.0), Axis) + Center :
                                          VectorIn;
    }
  }
}
