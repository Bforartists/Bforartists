/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"

float safe_divide(float a, float b)
{
  return (b != 0.0) ? a / b : 0.0;
}

float safe_modulo(float a, float b)
{
  return (b != 0.0) ? fmod(a, b) : 0.0;
}

float safe_sqrt(float a)
{
  return (a > 0.0) ? sqrt(a) : 0.0;
}

float safe_log(float a, float b)
{
  return (a > 0.0 && b > 0.0) ? log(a) / log(b) : 0.0;
}

/* OSL asin, acos, and pow functions are safe by default. */
shader node_math(string type = "add",
                 float Value1 = 0.5,
                 float Value2 = 0.5,
                 output float Value = 0.0)
{
  if (type == "add")
    Value = Value1 + Value2;
  else if (type == "subtract")
    Value = Value1 - Value2;
  else if (type == "multiply")
    Value = Value1 * Value2;
  else if (type == "divide")
    Value = safe_divide(Value1, Value2);
  else if (type == "power")
    Value = pow(Value1, Value2);
  else if (type == "logarithm")
    Value = safe_log(Value1, Value2);
  else if (type == "sqrt")
    Value = safe_sqrt(Value1);
  else if (type == "absolute")
    Value = fabs(Value1);
  else if (type == "minimum")
    Value = min(Value1, Value2);
  else if (type == "maximum")
    Value = max(Value1, Value2);
  else if (type == "less_than")
    Value = Value1 < Value2;
  else if (type == "greater_than")
    Value = Value1 > Value2;
  else if (type == "round")
    Value = floor(Value1 + 0.5);
  else if (type == "floor")
    Value = floor(Value1);
  else if (type == "ceil")
    Value = ceil(Value1);
  else if (type == "fraction")
    Value = Value1 - floor(Value1);
  else if (type == "modulo")
    Value = safe_modulo(Value1, Value2);
  else if (type == "sine")
    Value = sin(Value1);
  else if (type == "cosine")
    Value = cos(Value1);
  else if (type == "tangent")
    Value = tan(Value1);
  else if (type == "arcsine")
    Value = asin(Value1);
  else if (type == "arccosine")
    Value = acos(Value1);
  else if (type == "arctangent")
    Value = atan(Value1);
  else if (type == "arctan2")
    Value = atan2(Value1, Value2);
  else
    warning("%s", "Unknown math operator!");
}
