/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

#include "stdosl.h"

float safe_divide(float a, float b)
{
	float result;

	if (b == 0.0)
		result = 0.0;
	else
		result = a / b;
	
	return result;
}

float safe_modulo(float a, float b)
{
	float result;

	if (b == 0.0)
		result = 0.0;
	else
		result = fmod(a, b);
	
	return result;
}

float safe_log(float a, float b)
{
	if (a < 0.0 || b < 0.0)
		return 0.0;
	
	return log(a) / log(b);
}

shader node_math(
	string type = "Add",
	int Clamp = 0,
	float Value1 = 0.0,
	float Value2 = 0.0,
	output float Value = 0.0)
{
	/* OSL asin, acos, pow check for values that could give rise to nan */

	if (type == "Add")
		Value = Value1 + Value2;
	else if (type == "Subtract")
		Value = Value1 - Value2;
	else if (type == "Multiply")
		Value = Value1 * Value2;
	else if (type == "Divide")
		Value = safe_divide(Value1, Value2);
	else if (type == "Sine")
		Value = sin(Value1);
	else if (type == "Cosine")
		Value = cos(Value1);
	else if (type == "Tangent")
		Value = tan(Value1);
	else if (type == "Arcsine")
		Value = asin(Value1);
	else if (type == "Arccosine")
		Value = acos(Value1);
	else if (type == "Arctangent")
		Value = atan(Value1);
	else if (type == "Power")
		Value = pow(Value1, Value2);
	else if (type == "Logarithm")
		Value = safe_log(Value1, Value2);
	else if (type == "Minimum")
		Value = min(Value1, Value2);
	else if (type == "Maximum")
		Value = max(Value1, Value2);
	else if (type == "Round")
		Value = floor(Value1 + 0.5);
	else if (type == "Less Than")
		Value = Value1 < Value2;
	else if (type == "Greater Than")
		Value = Value1 > Value2;
	else if (type == "Modulo")
		Value = safe_modulo(Value1, Value2);

	if (Clamp)
		Value = clamp(Value1, 0.0, 1.0);
}

