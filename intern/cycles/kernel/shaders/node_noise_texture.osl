/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

#include "stdosl.h"
#include "node_texture.h"

/* Noise */

float noise(point p, string basis, float distortion, float detail, float fac, color Color)
{
	point r;
	int hard = 0;

	if (distortion != 0.0) {
		r[0] = noise_basis(p + point(13.5), basis) * distortion;
		r[1] = noise_basis(p, basis) * distortion;
		r[2] = noise_basis(p - point(13.5), basis) * distortion;
		
		p += r;
	}

	fac = noise_turbulence(p, basis, detail, hard);
	
	Color = color(fac, noise_turbulence(point(p[1], p[0], p[2]), basis, detail, hard),
		noise_turbulence(point(p[1], p[2], p[0]), basis, detail, hard));

	return fac;
}

shader node_noise_texture(
	int use_mapping = 0,
	matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	float Distortion = 0.0,
	float Scale = 5.0,
	float Detail = 2.0,
	point Vector = P,
	output float Fac = 0.0,
	output color Color = 0.0)
{
	point p = Vector;

	if (use_mapping)
		p = transform(mapping, p);

	string Basis = "Perlin";
	Fac = noise(p * Scale, Basis, Distortion, Detail, Fac, Color);
}

