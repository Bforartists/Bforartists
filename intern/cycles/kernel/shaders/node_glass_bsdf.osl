/*
 * Copyright 2011, Blender Foundation.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#include "stdosl.h"
#include "node_fresnel.h"

shader node_glass_bsdf(
	color Color = 0.8,
	string distribution = "Sharp",
	float Roughness = 0.2,
	float IOR = 1.45,
	normal Normal = N,
	output closure color BSDF = 0)
{
	float f = max(IOR, 1.0 + 1e-5);
	float eta = backfacing() ? 1.0 / f: f;
	float Fr = fresnel_dielectric(I, Normal, eta);

	if (distribution == "Sharp")
		BSDF = Color * (Fr * reflection(Normal) + (1.0 - Fr) * refraction(Normal, eta));
	else if (distribution == "Beckmann")
		BSDF = Color * (Fr * microfacet_beckmann(Normal, Roughness) +
		                (1.0 - Fr) * microfacet_beckmann_refraction(Normal, Roughness, eta));
	else if (distribution == "GGX")
		BSDF = Color * (Fr * microfacet_ggx(Normal, Roughness) +
		                (1.0 - Fr) * microfacet_ggx_refraction(Normal, Roughness, eta));
}

