/*
 * Copyright 2011, Blender Foundation.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#include "stdosl.h"
#include "node_texture.h"

/* Distorted Noise (variable lacunarity noise) */

float noise_distorted(point p, string basis, string distortion_basis, float distortion)
{
	point r;

	r[0] = noise_basis(p + point(13.5), basis) * distortion;
	r[1] = noise_basis(p, basis) * distortion;
	r[2] = noise_basis(p - point(13.5), basis) * distortion;

    return noise_basis(p + r, distortion_basis); /* distorted-domain noise */
}

shader node_distorted_noise_texture(
	string Basis = "Perlin",
	string DistortionBasis = "Perlin",
	float Distortion = 1.0,
	float Size = 0.25,
	point Vector = P,
	output float Fac = 0.0)
{
	float size = nonzero(Size, 1e-5);
	Fac = noise_distorted(Vector/size, Basis, DistortionBasis, Distortion);
}

