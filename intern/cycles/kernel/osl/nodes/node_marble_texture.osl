/*
 * Copyright 2011, Blender Foundation.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#include "stdosl.h"
#include "node_texture.h"

/* Marble */

float marble(point p, float size, string type, string wave, string basis, int hard, float turb, int depth)
{
	float x = p[0];
	float y = p[1];
	float z = p[2];

    float n = 5.0 * (x + y + z);

	float mi = n + turb * noise_turbulence(p/size, basis, depth, hard);

	mi = noise_wave(wave, mi);

	if(type == "Sharp")
		mi = sqrt(mi);
	else if(type == "Sharper")
		mi = sqrt(sqrt(mi));

    return mi;
}

shader node_marble_texture(
	string Type = "Soft",
	string Wave = "Sine",
	string Basis = "Perlin",
	int Hard = 0,
	float Size = 0.25,
	float Turbulence = 5.0,
	int Depth = 2,
	point Vector = P,
	output float Fac = 0.0)
{
	float size = nonzero(Size, 1e-5);
	Fac = marble(Vector, size, Type, Wave, Basis, Hard, Turbulence, Depth);
}

