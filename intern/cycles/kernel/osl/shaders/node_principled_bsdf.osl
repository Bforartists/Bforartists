/* SPDX-FileCopyrightText: 2011-2022 Blender Foundation
 *
 * SPDX-License-Identifier: Apache-2.0 */

#include "node_fresnel.h"
#include "stdcycles.h"

shader node_principled_bsdf(string distribution = "multi_ggx",
                            string subsurface_method = "random_walk",
                            color BaseColor = color(0.8, 0.8, 0.8),
                            float Subsurface = 0.0,
                            float SubsurfaceScale = 0.1,
                            vector SubsurfaceRadius = vector(1.0, 1.0, 1.0),
                            float SubsurfaceIOR = 1.4,
                            float SubsurfaceAnisotropy = 0.0,
                            float Metallic = 0.0,
                            float Specular = 0.5,
                            float SpecularTint = 0.0,
                            float Roughness = 0.5,
                            float Anisotropic = 0.0,
                            float AnisotropicRotation = 0.0,
                            float Sheen = 0.0,
                            float SheenRoughness = 0.5,
                            color SheenTint = 0.5,
                            float Coat = 0.0,
                            float CoatRoughness = 0.03,
                            float CoatIOR = 1.5,
                            color CoatTint = color(1.0, 1.0, 1.0),
                            float IOR = 1.45,
                            float Transmission = 0.0,
                            color Emission = 1.0,
                            float EmissionStrength = 0.0,
                            float Alpha = 1.0,
                            normal Normal = N,
                            normal CoatNormal = N,
                            normal Tangent = normalize(dPdu),
                            output closure color BSDF = 0)
{
  float r2 = Roughness * Roughness;
  float alpha_x = r2, alpha_y = r2;

  /* Handle anisotropy. */
  vector T = Tangent;
  if (Anisotropic > 0.0) {
    float aspect = sqrt(1.0 - clamp(Anisotropic, 0.0, 1.0) * 0.9);
    alpha_x /= aspect;
    alpha_y *= aspect;
    if (AnisotropicRotation != 0.0)
      T = rotate(T, AnisotropicRotation * M_2PI, point(0.0, 0.0, 0.0), Normal);
  }

  if (Metallic < 1.0 && Transmission < 1.0) {
    BSDF = BaseColor * diffuse(Normal);
    if (Subsurface > 1e-5) {
      vector radius = SubsurfaceScale * SubsurfaceRadius;
      float subsurface_ior = (subsurface_method == "random_walk") ? SubsurfaceIOR : IOR;
      closure color SubsurfBSDF = bssrdf(subsurface_method,
                                         Normal,
                                         SubsurfaceScale * SubsurfaceRadius,
                                         BaseColor,
                                         "roughness",
                                         Roughness,
                                         "ior",
                                         subsurface_ior,
                                         "anisotropy",
                                         SubsurfaceAnisotropy);
      BSDF = mix(BSDF, BaseColor * SubsurfBSDF, Subsurface);
    }

    color f0 = color(F0_from_ior(IOR));
    color f90 = color(1.0);

    /* Apply specular tint */
    float m_cdlum = luminance(BaseColor);
    color m_ctint = m_cdlum > 0.0 ? BaseColor / m_cdlum : color(1.0);
    color specTint = mix(color(1.0), m_ctint, SpecularTint);
    f0 *= (specTint * 2.0 * Specular);

    BSDF = layer(
        generalized_schlick_bsdf(
            Normal, T, color(1.0), color(0.0), alpha_x, alpha_y, f0, f90, -IOR, distribution),
        BSDF);
  }

  closure color TransmissionBSDF = 0;
  if (Metallic < 1.0 && Transmission > 0.0) {
    color reflectTint = mix(color(1.0), BaseColor, SpecularTint);
    float eta = max(IOR, 1e-5);
    eta = backfacing() ? 1.0 / eta : eta;

    TransmissionBSDF = dielectric_bsdf(
        Normal, vector(0.0), reflectTint, sqrt(BaseColor), r2, r2, eta, distribution);
    BSDF = mix(BSDF, TransmissionBSDF, clamp(Transmission, 0.0, 1.0));
  }

  closure color MetallicBSDF = 0;
  if (Metallic > 0.0) {
    color f0 = BaseColor;
    color f90 = color(1.0);
    MetallicBSDF = generalized_schlick_bsdf(
        Normal, T, color(1.0), color(0.0), alpha_x, alpha_y, f0, f90, 5.0, distribution);
    BSDF = mix(BSDF, MetallicBSDF, clamp(Metallic, 0.0, 1.0));
  }

  if (EmissionStrength > 0.0 && Emission != color(0.0)) {
    BSDF += EmissionStrength * Emission * emission();
  }

  if (Coat > 1e-5) {
    float coat_ior = max(CoatIOR, 1.0);
    if (CoatTint != color(1.0)) {
      float coat_neta = 1.0 / coat_ior;
      float cosNI = dot(I, CoatNormal);
      float cosNT = sqrt(1.0 - coat_neta * coat_neta * (1 - cosNI * cosNI));
      BSDF *= pow(CoatTint, Coat / cosNT);
    }
    float coat_r2 = CoatRoughness * CoatRoughness;
    closure color CoatBSDF = dielectric_bsdf(
        CoatNormal, vector(0.0), color(1.0), color(0.0), coat_r2, coat_r2, coat_ior, "ggx");
    BSDF = layer(Coat * CoatBSDF, BSDF);
  }

  if (Sheen > 1e-5) {
    closure color SheenBSDF = sheen(Normal, SheenRoughness);
    BSDF = layer(SheenTint * Sheen * SheenBSDF, BSDF);
  }

  BSDF = mix(transparent(), BSDF, Alpha);
}
