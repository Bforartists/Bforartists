/* SPDX-FileCopyrightText: 2011-2022 Blender Foundation
 *
 * SPDX-License-Identifier: Apache-2.0 */

#include "node_fresnel.h"
#include "stdcycles.h"

shader node_principled_bsdf(string distribution = "multi_ggx",
                            string subsurface_method = "random_walk",
                            color BaseColor = color(0.8, 0.8, 0.8),
                            float Subsurface = 0.0,
                            vector SubsurfaceRadius = vector(1.0, 1.0, 1.0),
                            color SubsurfaceColor = color(0.7, 0.1, 0.1),
                            float SubsurfaceIOR = 1.4,
                            float SubsurfaceAnisotropy = 0.0,
                            float Metallic = 0.0,
                            float Specular = 0.5,
                            float SpecularTint = 0.0,
                            float Roughness = 0.5,
                            float Anisotropic = 0.0,
                            float AnisotropicRotation = 0.0,
                            float Sheen = 0.0,
                            float SheenRoughness = 0.5,
                            color SheenTint = 0.5,
                            float Clearcoat = 0.0,
                            float ClearcoatRoughness = 0.03,
                            float IOR = 1.45,
                            float Transmission = 0.0,
                            normal Normal = N,
                            normal ClearcoatNormal = N,
                            normal Tangent = normalize(dPdu),
                            output closure color BSDF = 0)
{
  float r2 = Roughness * Roughness;
  float alpha_x = r2, alpha_y = r2;

  /* Handle anisotropy. */
  vector T = Tangent;
  if (Anisotropic > 0.0) {
    float aspect = sqrt(1.0 - clamp(Anisotropic, 0.0, 1.0) * 0.9);
    alpha_x /= aspect;
    alpha_y *= aspect;
    if (AnisotropicRotation != 0.0)
      T = rotate(T, AnisotropicRotation * M_2PI, point(0.0, 0.0, 0.0), Normal);
  }

  if (Metallic < 1.0 && Transmission < 1.0) {
    color diffuse_color = mix(BaseColor, SubsurfaceColor, Subsurface);
    if (Subsurface > 1e-5) {
      BSDF = diffuse_color * bssrdf(subsurface_method,
                                    Normal,
                                    Subsurface * SubsurfaceRadius,
                                    diffuse_color,
                                    "roughness",
                                    Roughness,
                                    "ior",
                                    SubsurfaceIOR,
                                    "anisotropy",
                                    SubsurfaceAnisotropy);
    }
    else {
      BSDF = diffuse_color * diffuse(Normal);
    }

    color f0 = color(F0_from_ior(IOR));
    color f90 = color(1.0);

    /* Apply specular tint */
    float m_cdlum = luminance(BaseColor);
    color m_ctint = m_cdlum > 0.0 ? BaseColor / m_cdlum : color(1.0);
    color specTint = mix(color(1.0), m_ctint, SpecularTint);
    f0 *= (specTint * 2.0 * Specular);

    BSDF = layer(
        generalized_schlick_bsdf(
            Normal, T, color(1.0), color(0.0), alpha_x, alpha_y, f0, f90, -IOR, distribution),
        BSDF);
  }

  closure color TransmissionBSDF = 0;
  if (Metallic < 1.0 && Transmission > 0.0) {
    color reflectTint = mix(color(1.0), BaseColor, SpecularTint);
    float eta = max(IOR, 1e-5);
    eta = backfacing() ? 1.0 / eta : eta;

    TransmissionBSDF = dielectric_bsdf(
        Normal, vector(0.0), reflectTint, BaseColor, r2, r2, eta, distribution);
    BSDF = mix(BSDF, TransmissionBSDF, clamp(Transmission, 0.0, 1.0));
  }

  closure color MetallicBSDF = 0;
  if (Metallic > 0.0) {
    color f0 = BaseColor;
    color f90 = color(1.0);
    MetallicBSDF = generalized_schlick_bsdf(
        Normal, T, color(1.0), color(0.0), alpha_x, alpha_y, f0, f90, 5.0, distribution);
    BSDF = mix(BSDF, MetallicBSDF, clamp(Metallic, 0.0, 1.0));
  }

  if (Clearcoat > 1e-5) {
    float clearcoat_r2 = ClearcoatRoughness * ClearcoatRoughness;
    closure color ClearcoatBSDF = microfacet("clearcoat", ClearcoatNormal, clearcoat_r2, 1.5, 0);
    BSDF = layer(0.25 * Clearcoat * ClearcoatBSDF, BSDF);
  }

  if (Sheen > 1e-5) {
    closure color SheenBSDF = sheen(Normal, SheenRoughness);
    BSDF = layer(SheenTint * Sheen * SheenBSDF, BSDF);
  }
}
