#
# SConstruct for Verse
#
# This file is still quite crude, but it does it's job, and
# is geared towards future extensions.
#
# I did this only on Windows so people should look into the
# if...elif...
# construction about the platform specific stuff.
#
# I think it is quite straight-forward to add new platforms,
# just look at the old makefile and at the existing platforms.
#
# This SConstruct creates a configuration file which can be
# used for tweaking a build.
#
# For more about SConstruct, see <http://www.scons.org/>.
#

import os
import sys
import time
import string
from distutils import sysconfig

Import('env')

root_build_dir = '..' + os.sep + 'build' + os.sep

defines = []
cflags = []
debug_flags = []
extra_flags = []
release_flags = []
warn_flags = []
platform_libs = []
platform_libpath = []
platform_linkflags = []

window_system = env['OURPLATFORM']
if window_system == 'win32-vc':
    print "Building on win32"
    defines += ['_WIN32']
    warn_flags = ['/Wall']
    platform_libs = ['ws2_32']
elif window_system == 'win32-mingw':
    defines += ['_WIN32', 'WIN32']
    platform_libs = ['shell32', 'kernel32', 'gdi32', 'user32', 'ws2_32']
elif window_system == 'linux2':
    print "Building on linux2"
elif window_system== 'openbsd3':
    print "Building on openbsd3"

user_options_dict = env #user_options_env.Dictionary()

root_build_dir = user_options_dict['BF_BUILDDIR'] + os.sep + "extern" + os.sep + "verse"

if user_options_dict['VERSE_BUILD_BINARY'] == 'release':
    cflags = extra_flags + release_flags + warn_flags
    if window_system == 'win32-vc':
        defines += ['NDEBUG']
else:
    cflags = extra_flags + debug_flags + warn_flags
    if window_system== 'win32-vc':
        #defines += ['_DEBUG'] specifying this makes msvc want to link to python22_d.lib??
        platform_linkflags += ['/DEBUG','/PDB:verse.pdb']

library_env = env.Copy() #Environment()
library_env.Replace (CC = user_options_dict['CC'])
library_env.Replace (CXX = user_options_dict['CXX'])
#library_env.Replace (PATH = user_options_dict['PATH'])
#library_env.Replace (AR = user_options_dict['TARGET_AR'])

cmd_gen_files = (['v_cmd_gen.c',
                  'v_cmd_def_a.c',
                  'v_cmd_def_b.c',
                  'v_cmd_def_c.c',
                  'v_cmd_def_g.c',
                  'v_cmd_def_m.c',
                  'v_cmd_def_o.c',
                  'v_cmd_def_s.c',
                  'v_cmd_def_t.c'
                  ])

cmd_gen_deps = (['v_gen_pack_init.c',
                 'v_gen_pack_a_node.c',
                 'v_gen_pack_b_node.c',
                 'v_gen_pack_c_node.c',
                 'v_gen_pack_g_node.c',
                 'v_gen_pack_m_node.c',
                 'v_gen_pack_o_node.c',
                 'v_gen_pack_s_node.c',
                 'v_gen_pack_t_node.c',
                ])

if user_options_dict['VERSE_REGEN_PROTO']=='yes':
    cmd_gen_env = library_env.Copy()
    cmd_gen_env.Append(CPPDEFINES=['V_GENERATE_FUNC_MODE'])
    mkprot = cmd_gen_env.Program(target='mkprot', source=cmd_gen_files)
    cmd_gen_env.Command('regen', '' , './mkprot')

lib_source_files = (['v_cmd_buf.c',
                     'v_connect.c',
                     'v_connection.c',
                     'v_encryption.c',
                     'v_func_storage.c',
                     'v_man_pack_node.c',
                     'v_network.c',
                     'v_network_in_que.c',
                     'v_network_out_que.c',
                     'v_pack.c',
                     'v_pack_method.c',
                     'v_prime.c',
                     'v_randgen.c',
                     'v_util.c',
                     'v_bignum.c'
                     ])
lib_source_files += cmd_gen_deps

server_source_files = (['vs_connection.c',
                        'vs_main.c',
                        'vs_node_audio.c',
                        'vs_node_bitmap.c',
                        'vs_node_curve.c',
                        'vs_node_geometry.c',
                        'vs_node_head.c',
                        'vs_node_material.c',
                        'vs_node_object.c',
                        'vs_node_particle.c',
                        'vs_node_storage.c',
                        'vs_node_text.c'
                        ])

verselib_env = library_env.Copy()
verselib_env.Append(CPPDEFINES = defines)

#server commented out for now, though maybe there
#should be an option to build it.
verseserver_env = env.Copy()
verseserver_env.Append(CPPDEFINES = defines)
verseserver_env.Append (LIBS=['verse'])
verseserver_env.Append (LIBS= platform_libs)

verselib = env.BlenderLib(libname='verse', sources=lib_source_files, includes=[], defines=defines, libtype=['core', 'intern'], priority = [5, 5])

verseserver_env.BlenderProg(builddir="#"+root_build_dir, progname="verse",
  sources=server_source_files, libs=['verse'],
  libpath='#'+user_options_dict['BF_BUILDDIR']+'/lib')
 
if user_options_dict['VERSE_REGEN_PROTO']=='yes':
    verselib_env.Depends(verselib, mkprot)
