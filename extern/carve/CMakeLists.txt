# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The Original Code is Copyright (C) 2006, Blender Foundation
# All rights reserved.
#
# The Original Code is: all of this file.
#
# Contributor(s): Jacques Beaurai, Erwin Coumans
#
# ***** END GPL LICENSE BLOCK *****

# NOTE: This file is automatically generated by bundle.sh script
#       If you're doing changes in this file, please update template
#       in that script too

set(INC
	include
)

set(INC_SYS
)

set(SRC
	lib/intersection.cpp
	lib/intersect.cpp
	lib/triangulator.cpp
	lib/convex_hull.cpp
	lib/polyhedron.cpp
	lib/polyline.cpp
	lib/pointset.cpp
	lib/geom2d.cpp
	lib/math.cpp
	lib/intersect_half_classify_group.cpp
	lib/intersect_face_division.cpp
	lib/tag.cpp
	lib/aabb.cpp
	lib/intersect_classify_group.cpp
	lib/mesh.cpp
	lib/timing.cpp
	lib/geom3d.cpp
	lib/intersect_group.cpp
	lib/carve.cpp
	lib/intersect_classify_edge.cpp
	lib/csg.cpp
	lib/face.cpp
	lib/csg_collector.cpp
	lib/intersect_debug.cpp
	lib/edge.cpp
	lib/octree.cpp

	lib/intersect_debug.hpp
	lib/csg_collector.hpp
	lib/csg_data.hpp
	lib/intersect_classify_common.hpp
	lib/intersect_common.hpp
	lib/csg_detail.hpp
	lib/intersect_classify_common_impl.hpp

	include/carve/vertex_impl.hpp
	include/carve/aabb_impl.hpp
	include/carve/csg.hpp
	include/carve/pointset_iter.hpp
	include/carve/debug_hooks.hpp
	include/carve/mesh.hpp
	include/carve/triangulator_impl.hpp
	include/carve/edge_decl.hpp
	include/carve/collection/unordered.hpp
	include/carve/collection/unordered/tr1_impl.hpp
	include/carve/collection/unordered/fallback_impl.hpp
	include/carve/collection/unordered/std_impl.hpp
	include/carve/collection/unordered/vcpp_impl.hpp
	include/carve/collection/unordered/libstdcpp_impl.hpp
	include/carve/collection/unordered/boost_impl.hpp
	include/carve/convex_hull.hpp
	include/carve/geom.hpp
	include/carve/collection_types.hpp
	include/carve/cbrt.h
	include/carve/util.hpp
	include/carve/iobj.hpp
	include/carve/polyline_decl.hpp
	include/carve/polyline_impl.hpp
	include/carve/win32.h
	include/carve/edge_impl.hpp
	include/carve/carve.hpp
	include/carve/polyline.hpp
	include/carve/face_decl.hpp
	include/carve/matrix.hpp
	include/carve/classification.hpp
	include/carve/geom_impl.hpp
	include/carve/faceloop.hpp
	include/carve/mesh_ops.hpp
	include/carve/tree.hpp
	include/carve/geom2d.hpp
	include/carve/face_impl.hpp
	include/carve/polyhedron_decl.hpp
	include/carve/interpolator.hpp
	include/carve/poly_decl.hpp
	include/carve/mesh_impl.hpp
	include/carve/gnu_cxx.h
	include/carve/mesh_simplify.hpp
	include/carve/triangulator.hpp
	include/carve/pointset_impl.hpp
	include/carve/rtree.hpp
	include/carve/math_constants.hpp
	include/carve/vector.hpp
	include/carve/octree_impl.hpp
	include/carve/pointset.hpp
	include/carve/math.hpp
	include/carve/intersection.hpp
	include/carve/colour.hpp
	include/carve/kd_node.hpp
	include/carve/input.hpp
	include/carve/geom3d.hpp
	include/carve/exact.hpp
	include/carve/rescale.hpp
	include/carve/polyhedron_base.hpp
	include/carve/heap.hpp
	include/carve/spacetree.hpp
	include/carve/polyhedron_impl.hpp
	include/carve/vcpp_config.h
	include/carve/aabb.hpp
	include/carve/polyline_iter.hpp
	include/carve/djset.hpp
	include/carve/vertex_decl.hpp
	include/carve/csg_triangulator.hpp
	include/carve/poly.hpp
	include/carve/timing.hpp
	include/carve/octree_decl.hpp
	include/carve/pointset_decl.hpp
	include/carve/tag.hpp
	include/carve/collection.hpp
	include/carve/poly_impl.hpp
)

if(WITH_BOOST)
	if(NOT MSVC)
		# Boost is setting as preferred collections library in the Carve code when using MSVC compiler
		add_definitions(
			-DHAVE_BOOST_UNORDERED_COLLECTIONS
		)
	endif()

	add_definitions(
		-DCARVE_SYSTEM_BOOST
	)

	list(APPEND INC
		${BOOST_INCLUDE_DIR}
	)
endif()

blender_add_lib(extern_carve "${SRC}" "${INC}" "${INC_SYS}")
