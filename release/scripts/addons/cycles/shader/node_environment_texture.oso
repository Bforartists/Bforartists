OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -q -O2 -IC:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders -o C:/b/win64_cmake_vs2017/win64_cmake_vs2017/build/win64_cmake_vs2017/intern/cycles/kernel/shaders/node_environment_texture.oso
shader node_environment_texture
param	int	use_mapping	0		%read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{3,3} %write{2147483647,-1} %derivs
param	vector	Vector	0 0 0		%read{1,1} %write{0,0} %derivs %initexpr
param	string	filename	""		%read{49,49} %write{2147483647,-1}
param	string	projection	"equirectangular"		%read{5,5} %write{2147483647,-1}
param	string	interpolation	"linear"		%read{49,49} %write{2147483647,-1}
param	string	color_space	"sRGB"		%read{66,66} %write{2147483647,-1}
param	int	is_float	1		%read{62,62} %write{2147483647,-1}
param	int	use_alpha	1		%read{50,50} %write{2147483647,-1}
oparam	color	Color	0 0 0		%read{59,99} %write{49,114}
oparam	float	Alpha	1		%read{52,59} %write{49,49}
global	point	P	%read{0,0} %write{2147483647,-1} %derivs
local	float	___684_u	%read{25,25} %write{13,13} %derivs
local	float	___684_v	%read{25,25} %write{24,24} %derivs
local	vector	___685_dir	%read{28,42} %write{27,38} %derivs
local	float	___685_div	%read{36,38} %write{35,35} %derivs
local	float	___685_u	%read{45,45} %write{41,41} %derivs
local	float	___685_v	%read{45,45} %write{44,44} %derivs
local	vector	p	%read{3,47} %write{1,45} %derivs
const	string	$const1	"equirectangular"		%read{5,5} %write{2147483647,-1}
temp	int	$tmp1	%read{6,6} %write{5,5}
const	string	$const2	"environment_texture_direction_to_equirectangular"		%read{7,7} %write{2147483647,-1}
temp	float	$tmp2	%read{11,11} %write{10,10} %derivs
const	int	$const3	1		%read{8,84} %write{2147483647,-1}
temp	float	$tmp3	%read{10,10} %write{8,8} %derivs
const	int	$const4	0		%read{9,69} %write{2147483647,-1}
temp	float	$tmp4	%read{10,10} %write{9,9} %derivs
temp	float	$tmp5	%read{12,12} %write{11,11} %derivs
const	float	$const5	6.2831855		%read{12,12} %write{2147483647,-1}
temp	float	$tmp6	%read{13,13} %write{12,12} %derivs
const	float	$const6	0.5		%read{13,44} %write{2147483647,-1}
temp	float	$tmp7	%read{23,23} %write{22,22} %derivs
const	int	$const7	2		%read{14,99} %write{2147483647,-1}
temp	float	$tmp8	%read{22,22} %write{14,14} %derivs
temp	float	$tmp9	%read{22,22} %write{21,21} %derivs
temp	float	$tmp10	%read{18,18} %write{15,15} %derivs
temp	float	$tmp11	%read{19,19} %write{16,16} %derivs
const	string	$const8	"hypot"		%read{17,17} %write{2147483647,-1}
temp	float	$tmp12	%read{20,20} %write{18,18} %derivs
temp	float	$tmp13	%read{20,20} %write{19,19} %derivs
temp	float	$tmp14	%read{21,21} %write{20,20} %derivs
const	float	$const9	3.1415927		%read{23,23} %write{2147483647,-1}
temp	float	$tmp15	%read{24,24} %write{23,23} %derivs
const	float	$const10	0		%read{25,105} %write{2147483647,-1}
const	string	$const11	"environment_texture_direction_to_mirrorball"		%read{26,26} %write{2147483647,-1}
temp	float	$tmp16	%read{29,29} %write{28,28} %derivs
const	float	$const12	1		%read{29,110} %write{2147483647,-1}
temp	float	$tmp17	%read{30,30} %write{29,29} %derivs
const	float	$const13	2		%read{35,35} %write{2147483647,-1}
temp	float	$tmp18	%read{35,35} %write{34,34} %derivs
temp	float	$tmp19	%read{34,34} %write{33,33} %derivs
const	float	$const14	-0.5		%read{32,32} %write{2147483647,-1}
temp	float	$tmp20	%read{32,32} %write{31,31} %derivs
temp	float	$tmp21	%read{33,33} %write{32,32} %derivs
temp	int	$tmp22	%read{37,37} %write{36,36}
temp	float	$tmp23	%read{40,40} %write{39,39} %derivs
temp	float	$tmp24	%read{41,41} %write{40,40} %derivs
temp	float	$tmp25	%read{43,43} %write{42,42} %derivs
temp	float	$tmp26	%read{44,44} %write{43,43} %derivs
temp	float	$tmp27	%read{49,49} %write{46,46} %derivs
temp	float	$tmp28	%read{48,48} %write{47,47} %derivs
temp	float	$tmp29	%read{49,49} %write{48,48} %derivs
const	string	$const15	"wrap"		%read{49,49} %write{2147483647,-1}
const	string	$const16	"periodic"		%read{49,49} %write{2147483647,-1}
const	string	$const17	"interp"		%read{49,49} %write{2147483647,-1}
const	string	$const18	"alpha"		%read{49,49} %write{2147483647,-1}
const	string	$const19	"color_unpremultiply"		%read{51,51} %write{2147483647,-1}
temp	int	$tmp30	%read{53,53} %write{52,52}
temp	int	$tmp31	%read{54,58} %write{53,57}
temp	int	$tmp32	%read{56,56} %write{55,55}
temp	int	$tmp33	%read{57,57} %write{56,56}
temp	int	$tmp34	%read{63,63} %write{62,62}
temp	color	$tmp35	%read{65,65} %write{64,64}
const	string	$const20	"sRGB"		%read{66,66} %write{2147483647,-1}
temp	int	$tmp36	%read{67,67} %write{66,66}
const	string	$const21	"color_srgb_to_scene_linear"		%read{68,100} %write{2147483647,-1}
temp	float	$tmp37	%read{114,114} %write{75,82}
temp	float	$tmp38	%read{71,79} %write{69,69}
const	float	$const22	0.040449999		%read{71,101} %write{2147483647,-1}
temp	int	$tmp39	%read{72,72} %write{71,71}
temp	int	$tmp40	%read{74,74} %write{73,73}
const	float	$const23	12.92		%read{76,106} %write{2147483647,-1}
temp	float	$tmp41	%read{77,77} %write{76,76}
const	float	$const24	0.055		%read{79,109} %write{2147483647,-1}
temp	float	$tmp42	%read{81,81} %write{79,79}
const	float	$const25	1.0549999		%read{80,110} %write{2147483647,-1}
temp	float	$tmp43	%read{81,81} %write{80,80}
temp	float	$tmp44	%read{82,82} %write{81,81}
const	float	$const26	2.4000001		%read{82,112} %write{2147483647,-1}
temp	float	$tmp45	%read{114,114} %write{90,97}
temp	float	$tmp46	%read{86,94} %write{84,84}
temp	int	$tmp47	%read{87,87} %write{86,86}
temp	int	$tmp48	%read{89,89} %write{88,88}
temp	float	$tmp49	%read{92,92} %write{91,91}
temp	float	$tmp50	%read{96,96} %write{94,94}
temp	float	$tmp51	%read{96,96} %write{95,95}
temp	float	$tmp52	%read{97,97} %write{96,96}
temp	float	$tmp53	%read{114,114} %write{105,112}
temp	float	$tmp54	%read{101,109} %write{99,99}
temp	int	$tmp55	%read{102,102} %write{101,101}
temp	int	$tmp56	%read{104,104} %write{103,103}
temp	float	$tmp57	%read{107,107} %write{106,106}
temp	float	$tmp58	%read{111,111} %write{109,109}
temp	float	$tmp59	%read{111,111} %write{110,110}
temp	float	$tmp60	%read{112,112} %write{111,111}
code Vector
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:46
# 	vector Vector = P,
	assign		Vector P 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl"} %line{46} %argrw{"wr"}
code ___main___
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:56
# 	vector p = Vector;
	assign		p Vector 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl"} %line{56} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:58
# 	if (use_mapping)
	if		use_mapping 4 4 	%line{58} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:59
# 		p = transform(mapping, p);
	transformv	p mapping p 	%line{59} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:61
# 	p = normalize(p);
	normalize	p p 	%line{61} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:63
# 	if (projection == "equirectangular")
	eq		$tmp1 projection $const1 	%line{63} %argrw{"wrr"}
	if		$tmp1 26 46 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:64
# 		p = environment_texture_direction_to_equirectangular(p);
	functioncall	$const2 26 	%line{64} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:22
# 	float u = -atan2(dir[1], dir[0]) / (M_2PI) + 0.5;
	compref		$tmp3 p $const3 	%line{22} %argrw{"wrr"}
	compref		$tmp4 p $const4 	%argrw{"wrr"}
	atan2		$tmp2 $tmp3 $tmp4 	%argrw{"wrr"}
	neg		$tmp5 $tmp2 	%argrw{"wr"}
	div		$tmp6 $tmp5 $const5 	%argrw{"wrr"}
	add		___684_u $tmp6 $const6 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:23
# 	float v = atan2(dir[2], hypot(dir[0], dir[1])) / M_PI + 0.5;
	compref		$tmp8 p $const7 	%line{23} %argrw{"wrr"}
	compref		$tmp10 p $const4 	%argrw{"wrr"}
	compref		$tmp11 p $const3 	%argrw{"wrr"}
	functioncall	$const8 22 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h:113
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp12 $tmp10 $tmp10 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h"} %line{113} %argrw{"wrr"}
	mul		$tmp13 $tmp11 $tmp11 	%argrw{"wrr"}
	add		$tmp14 $tmp12 $tmp13 	%argrw{"wrr"}
	sqrt		$tmp9 $tmp14 	%argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:23
# 	float v = atan2(dir[2], hypot(dir[0], dir[1])) / M_PI + 0.5;
	atan2		$tmp7 $tmp8 $tmp9 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl"} %line{23} %argrw{"wrr"}
	div		$tmp15 $tmp7 $const9 	%argrw{"wrr"}
	add		___684_v $tmp15 $const6 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:25
# 	return vector(u, v, 0.0);
	vector		p ___684_u ___684_v $const10 	%line{25} %argrw{"wrrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:66
# 		p = environment_texture_direction_to_mirrorball(p);
	functioncall	$const11 46 	%line{66} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:30
# 	vector dir = idir;
	assign		___685_dir p 	%line{30} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:31
# 	dir[1] -= 1.0;
	compref		$tmp16 ___685_dir $const3 	%line{31} %argrw{"wrr"}
	sub		$tmp17 $tmp16 $const12 	%argrw{"wrr"}
	compassign	___685_dir $const3 $tmp17 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:33
# 	float div = 2.0 * sqrt(max(-0.5 * dir[1], 0.0));
	compref		$tmp20 ___685_dir $const3 	%line{33} %argrw{"wrr"}
	mul		$tmp21 $const14 $tmp20 	%argrw{"wrr"}
	max		$tmp19 $tmp21 $const10 	%argrw{"wrr"}
	sqrt		$tmp18 $tmp19 	%argrw{"wr"}
	mul		___685_div $const13 $tmp18 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:34
# 	if (div > 0.0)
	gt		$tmp22 ___685_div $const10 	%line{34} %argrw{"wrr"}
	if		$tmp22 39 39 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:35
# 		dir /= div;
	div		___685_dir ___685_dir ___685_div 	%line{35} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:37
# 	float u = 0.5 * (dir[0] + 1.0);
	compref		$tmp23 ___685_dir $const4 	%line{37} %argrw{"wrr"}
	add		$tmp24 $tmp23 $const12 	%argrw{"wrr"}
	mul		___685_u $const6 $tmp24 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:38
# 	float v = 0.5 * (dir[2] + 1.0);
	compref		$tmp25 ___685_dir $const7 	%line{38} %argrw{"wrr"}
	add		$tmp26 $tmp25 $const12 	%argrw{"wrr"}
	mul		___685_v $const6 $tmp26 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:40
# 	return vector(u, v, 0.0);
	vector		p ___685_u ___685_v $const10 	%line{40} %argrw{"wrrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:69
# 	Color = (color)texture(filename, p[0], 1.0 - p[1], "wrap", "periodic", "interp", interpolation, "alpha", Alpha);
	compref		$tmp27 p $const4 	%line{69} %argrw{"wrr"}
	compref		$tmp28 p $const3 	%argrw{"wrr"}
	sub		$tmp29 $const12 $tmp28 	%argrw{"wrr"}
	texture		Color filename $tmp27 $tmp29 $const15 $const16 $const17 interpolation $const18 Alpha 	%argrw{"wrrrrrrrrw"} %argderivs{2,3}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:71
# 	if (use_alpha) {
	if		use_alpha 66 66 	%line{71} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:72
# 		Color = color_unpremultiply(Color, Alpha);
	functioncall	$const19 62 	%line{72} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:53
# 	if (alpha != 1.0 && alpha != 0.0)
	neq		$tmp30 Alpha $const12 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h"} %line{53} %argrw{"wrr"}
	neq		$tmp31 $tmp30 $const4 	%argrw{"wrr"}
	if		$tmp31 58 58 	%argrw{"r"}
	neq		$tmp32 Alpha $const10 	%argrw{"wrr"}
	neq		$tmp33 $tmp32 $const4 	%argrw{"wrr"}
	assign		$tmp31 $tmp33 	%argrw{"wr"}
	if		$tmp31 61 61 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:54
# 		return c / alpha;
	div		Color Color Alpha 	%line{54} %argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:56
# 	return c;
	assign		Color Color 	%line{56} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:74
# 		if (!is_float)
	eq		$tmp34 is_float $const4 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl"} %line{74} %argrw{"wrr"}
	if		$tmp34 66 66 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:75
# 			Color = min(Color, 1.0);
	assign		$tmp35 $const12 	%line{75} %argrw{"wr"}
	min		Color Color $tmp35 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:78
# 	if (color_space == "sRGB")
	eq		$tmp36 color_space $const20 	%line{78} %argrw{"wrr"}
	if		$tmp36 115 115 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_environment_texture.osl:79
# 		Color = color_srgb_to_scene_linear(Color);
	functioncall	$const21 115 	%line{79} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:38
# 		color_srgb_to_scene_linear(c[0]),
	compref		$tmp38 Color $const4 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h"} %line{38} %argrw{"wrr"}
	functioncall	$const21 84 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp39 $tmp38 $const22 	%line{21} %argrw{"wrr"}
	if		$tmp39 79 84 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp40 $tmp38 $const10 	%line{22} %argrw{"wrr"}
	if		$tmp40 76 78 	%argrw{"r"}
	assign		$tmp37 $const10 	%argrw{"wr"}
	div		$tmp41 $const12 $const23 	%argrw{"wrr"}
	mul		$tmp37 $tmp38 $tmp41 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp42 $tmp38 $const24 	%line{24} %argrw{"wrr"}
	div		$tmp43 $const12 $const25 	%argrw{"wrr"}
	mul		$tmp44 $tmp42 $tmp43 	%argrw{"wrr"}
	pow		$tmp37 $tmp44 $const26 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:39
# 		color_srgb_to_scene_linear(c[1]),
	compref		$tmp46 Color $const3 	%line{39} %argrw{"wrr"}
	functioncall	$const21 99 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp47 $tmp46 $const22 	%line{21} %argrw{"wrr"}
	if		$tmp47 94 99 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp48 $tmp46 $const10 	%line{22} %argrw{"wrr"}
	if		$tmp48 91 93 	%argrw{"r"}
	assign		$tmp45 $const10 	%argrw{"wr"}
	div		$tmp49 $const12 $const23 	%argrw{"wrr"}
	mul		$tmp45 $tmp46 $tmp49 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp50 $tmp46 $const24 	%line{24} %argrw{"wrr"}
	div		$tmp51 $const12 $const25 	%argrw{"wrr"}
	mul		$tmp52 $tmp50 $tmp51 	%argrw{"wrr"}
	pow		$tmp45 $tmp52 $const26 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	compref		$tmp54 Color $const7 	%line{40} %argrw{"wrr"}
	functioncall	$const21 114 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:21
# 	if (c < 0.04045)
	lt		$tmp55 $tmp54 $const22 	%line{21} %argrw{"wrr"}
	if		$tmp55 109 114 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:22
# 		return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp56 $tmp54 $const10 	%line{22} %argrw{"wrr"}
	if		$tmp56 106 108 	%argrw{"r"}
	assign		$tmp53 $const10 	%argrw{"wr"}
	div		$tmp57 $const12 $const23 	%argrw{"wrr"}
	mul		$tmp53 $tmp54 $tmp57 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:24
# 		return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp58 $tmp54 $const24 	%line{24} %argrw{"wrr"}
	div		$tmp59 $const12 $const25 	%argrw{"wrr"}
	mul		$tmp60 $tmp58 $tmp59 	%argrw{"wrr"}
	pow		$tmp53 $tmp60 $const26 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_color.h:40
# 		color_srgb_to_scene_linear(c[2]));
	color		Color $tmp37 $tmp45 $tmp53 	%line{40} %argrw{"wrrr"}
	end
