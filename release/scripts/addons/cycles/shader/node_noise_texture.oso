OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -q -O2 -IC:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders -o C:/b/win64_cmake_vs2017/win64_cmake_vs2017/build/win64_cmake_vs2017/intern/cycles/kernel/shaders/node_noise_texture.oso
shader node_noise_texture
param	int	use_mapping	0		%read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{3,3} %write{2147483647,-1}
param	float	Distortion	0		%read{8,52} %write{2147483647,-1}
param	float	Scale	5		%read{4,4} %write{2147483647,-1}
param	float	Detail	2		%read{60,246} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{1,1} %write{0,0} %initexpr
oparam	float	Fac	0		%read{2147483647,-1} %write{331,331}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{330,330}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___681_f	%read{17,291} %write{12,285}
local	float	___682_fscale	%read{65,279} %write{56,274}
local	float	___682_amp	%read{65,296} %write{57,274}
local	float	___682_sum	%read{65,328} %write{58,327}
local	int	___682_i	%read{65,274} %write{64,274}
local	int	___682_n	%read{65,322} %write{62,248}
local	float	___682_octaves	%read{62,276} %write{61,247}
local	float	___684_t	%read{65,274} %write{65,274}
local	float	___682_rmd	%read{91,317} %write{90,276}
local	float	___685_t	%read{107,296} %write{103,295}
local	float	___685_sum2	%read{128,317} %write{111,314}
local	point	___688_r	%read{54,54} %write{24,53}
local	point	___688_p	%read{10,239} %write{6,54}
local	int	___688_hard	%read{65,292} %write{7,7}
local	float	___688_fac	%read{330,331} %write{132,142}
local	point	p	%read{3,4} %write{1,3}
temp	point	$tmp1	%read{6,6} %write{4,4}
const	string	$const1	"noise"		%read{5,5} %write{2147483647,-1}
const	int	$const2	0		%read{7,287} %write{2147483647,-1}
const	float	$const3	0		%read{8,281} %write{2147483647,-1}
temp	int	$tmp2	%read{9,9} %write{8,8}
temp	float	$tmp3	%read{23,23} %write{20,22}
const	point	$const4	13.5 13.5 13.5		%read{10,39} %write{2147483647,-1}
temp	point	$tmp5	%read{15,16} %write{10,10}
const	string	$const5	"unsigned"		%read{13,282} %write{2147483647,-1}
const	string	$const6	"safe_noise"		%read{11,280} %write{2147483647,-1}
const	string	$const7	"signed"		%read{13,282} %write{2147483647,-1}
temp	int	$tmp6	%read{14,14} %write{13,13}
const	string	$const8	"perlin"		%read{15,284} %write{2147483647,-1}
temp	int	$tmp7	%read{18,18} %write{17,17}
temp	int	$tmp8	%read{19,19} %write{18,18}
const	float	$const9	0.5		%read{20,289} %write{2147483647,-1}
temp	float	$tmp9	%read{24,24} %write{23,23}
temp	float	$tmp10	%read{37,37} %write{34,36}
temp	int	$tmp11	%read{28,28} %write{27,27}
temp	int	$tmp12	%read{32,32} %write{31,31}
temp	int	$tmp13	%read{33,33} %write{32,32}
temp	float	$tmp14	%read{38,38} %write{37,37}
const	int	$const10	1		%read{38,324} %write{2147483647,-1}
temp	float	$tmp15	%read{52,52} %write{49,51}
temp	vector	$tmp17	%read{44,45} %write{39,39}
temp	int	$tmp18	%read{43,43} %write{42,42}
temp	int	$tmp19	%read{47,47} %write{46,46}
temp	int	$tmp20	%read{48,48} %write{47,47}
temp	float	$tmp21	%read{53,53} %write{52,52}
const	int	$const11	2		%read{53,309} %write{2147483647,-1}
const	string	$const12	"noise_turbulence"		%read{55,241} %write{2147483647,-1}
const	float	$const13	1		%read{56,315} %write{2147483647,-1}
const	float	$const14	16		%read{60,246} %write{2147483647,-1}
const	string	$const15	"clamp"		%read{59,245} %write{2147483647,-1}
temp	float	$tmp22	%read{61,61} %write{60,60}
temp	int	$tmp23	%read{63,88} %write{64,88}
temp	point	$tmp24	%read{65,88} %write{65,88}
temp	int	$tmp25	%read{65,88} %write{65,88}
temp	int	$tmp26	%read{65,88} %write{65,88}
temp	int	$tmp27	%read{65,88} %write{65,88}
const	float	$const16	2		%read{80,293} %write{2147483647,-1}
temp	float	$tmp28	%read{65,88} %write{65,88}
temp	float	$tmp29	%read{65,88} %write{65,88}
temp	float	$tmp30	%read{65,88} %write{65,88}
temp	int	$tmp31	%read{2147483647,-1} %write{65,88}
temp	float	$tmp32	%read{90,90} %write{89,89}
temp	int	$tmp33	%read{92,92} %write{91,91}
temp	point	$tmp34	%read{98,99} %write{93,93}
temp	int	$tmp35	%read{97,97} %write{96,96}
temp	int	$tmp36	%read{101,101} %write{100,100}
temp	int	$tmp37	%read{102,102} %write{101,101}
temp	float	$tmp38	%read{108,108} %write{107,107}
temp	float	$tmp39	%read{109,109} %write{108,108}
temp	float	$tmp40	%read{111,111} %write{110,110}
temp	int	$tmp41	%read{113,113} %write{112,112}
temp	float	$tmp42	%read{118,118} %write{113,113}
temp	int	$tmp43	%read{115,115} %write{114,114}
temp	int	$tmp44	%read{116,116} %write{115,115}
temp	int	$tmp45	%read{117,117} %write{116,116}
temp	float	$tmp46	%read{118,118} %write{117,117}
temp	float	$tmp47	%read{119,119} %write{118,118}
temp	int	$tmp48	%read{121,121} %write{120,120}
temp	int	$tmp49	%read{122,122} %write{121,121}
temp	float	$tmp50	%read{127,127} %write{122,122}
temp	int	$tmp51	%read{124,124} %write{123,123}
temp	int	$tmp52	%read{125,125} %write{124,124}
temp	int	$tmp53	%read{126,126} %write{125,125}
temp	float	$tmp54	%read{127,127} %write{126,126}
temp	float	$tmp55	%read{128,128} %write{127,127}
temp	float	$tmp56	%read{130,130} %write{129,129}
temp	float	$tmp57	%read{132,132} %write{130,130}
temp	float	$tmp58	%read{132,132} %write{131,131}
temp	int	$tmp59	%read{135,135} %write{134,134}
temp	float	$tmp60	%read{140,140} %write{135,135}
temp	int	$tmp61	%read{137,137} %write{136,136}
temp	int	$tmp62	%read{138,138} %write{137,137}
temp	int	$tmp63	%read{139,139} %write{138,138}
temp	float	$tmp64	%read{140,140} %write{139,139}
temp	float	$tmp65	%read{141,141} %write{140,140}
temp	float	$tmp66	%read{330,330} %write{225,235}
temp	point	$tmp67	%read{158,186} %write{147,147}
temp	float	$tmp68	%read{147,147} %write{144,144}
temp	float	$tmp69	%read{147,147} %write{145,145}
temp	float	$tmp70	%read{147,147} %write{146,146}
temp	float	$tmp71	%read{154,154} %write{153,153}
temp	int	$tmp72	%read{156,181} %write{157,181}
temp	point	$tmp73	%read{158,181} %write{158,181}
temp	int	$tmp74	%read{158,181} %write{158,181}
temp	int	$tmp75	%read{158,181} %write{158,181}
temp	int	$tmp76	%read{158,181} %write{158,181}
temp	float	$tmp77	%read{158,181} %write{158,181}
temp	float	$tmp78	%read{158,181} %write{158,181}
temp	float	$tmp79	%read{158,181} %write{158,181}
temp	int	$tmp80	%read{2147483647,-1} %write{158,181}
temp	float	$tmp81	%read{183,183} %write{182,182}
temp	int	$tmp82	%read{185,185} %write{184,184}
temp	point	$tmp83	%read{191,192} %write{186,186}
temp	int	$tmp84	%read{190,190} %write{189,189}
temp	int	$tmp85	%read{194,194} %write{193,193}
temp	int	$tmp86	%read{195,195} %write{194,194}
temp	float	$tmp87	%read{201,201} %write{200,200}
temp	float	$tmp88	%read{202,202} %write{201,201}
temp	float	$tmp89	%read{204,204} %write{203,203}
temp	int	$tmp90	%read{206,206} %write{205,205}
temp	float	$tmp91	%read{211,211} %write{206,206}
temp	int	$tmp92	%read{208,208} %write{207,207}
temp	int	$tmp93	%read{209,209} %write{208,208}
temp	int	$tmp94	%read{210,210} %write{209,209}
temp	float	$tmp95	%read{211,211} %write{210,210}
temp	float	$tmp96	%read{212,212} %write{211,211}
temp	int	$tmp97	%read{214,214} %write{213,213}
temp	int	$tmp98	%read{215,215} %write{214,214}
temp	float	$tmp99	%read{220,220} %write{215,215}
temp	int	$tmp100	%read{217,217} %write{216,216}
temp	int	$tmp101	%read{218,218} %write{217,217}
temp	int	$tmp102	%read{219,219} %write{218,218}
temp	float	$tmp103	%read{220,220} %write{219,219}
temp	float	$tmp104	%read{221,221} %write{220,220}
temp	float	$tmp105	%read{223,223} %write{222,222}
temp	float	$tmp106	%read{225,225} %write{223,223}
temp	float	$tmp107	%read{225,225} %write{224,224}
temp	int	$tmp108	%read{228,228} %write{227,227}
temp	float	$tmp109	%read{233,233} %write{228,228}
temp	int	$tmp110	%read{230,230} %write{229,229}
temp	int	$tmp111	%read{231,231} %write{230,230}
temp	int	$tmp112	%read{232,232} %write{231,231}
temp	float	$tmp113	%read{233,233} %write{232,232}
temp	float	$tmp114	%read{234,234} %write{233,233}
temp	float	$tmp115	%read{330,330} %write{318,328}
temp	point	$tmp116	%read{251,279} %write{240,240}
temp	float	$tmp117	%read{240,240} %write{237,237}
temp	float	$tmp118	%read{240,240} %write{238,238}
temp	float	$tmp119	%read{240,240} %write{239,239}
temp	float	$tmp120	%read{247,247} %write{246,246}
temp	int	$tmp121	%read{249,274} %write{250,274}
temp	point	$tmp122	%read{251,274} %write{251,274}
temp	int	$tmp123	%read{251,274} %write{251,274}
temp	int	$tmp124	%read{251,274} %write{251,274}
temp	int	$tmp125	%read{251,274} %write{251,274}
temp	float	$tmp126	%read{251,274} %write{251,274}
temp	float	$tmp127	%read{251,274} %write{251,274}
temp	float	$tmp128	%read{251,274} %write{251,274}
temp	int	$tmp129	%read{2147483647,-1} %write{251,274}
temp	float	$tmp130	%read{276,276} %write{275,275}
temp	int	$tmp131	%read{278,278} %write{277,277}
temp	point	$tmp132	%read{284,285} %write{279,279}
temp	int	$tmp133	%read{283,283} %write{282,282}
temp	int	$tmp134	%read{287,287} %write{286,286}
temp	int	$tmp135	%read{288,288} %write{287,287}
temp	float	$tmp136	%read{294,294} %write{293,293}
temp	float	$tmp137	%read{295,295} %write{294,294}
temp	float	$tmp138	%read{297,297} %write{296,296}
temp	int	$tmp139	%read{299,299} %write{298,298}
temp	float	$tmp140	%read{304,304} %write{299,299}
temp	int	$tmp141	%read{301,301} %write{300,300}
temp	int	$tmp142	%read{302,302} %write{301,301}
temp	int	$tmp143	%read{303,303} %write{302,302}
temp	float	$tmp144	%read{304,304} %write{303,303}
temp	float	$tmp145	%read{305,305} %write{304,304}
temp	int	$tmp146	%read{307,307} %write{306,306}
temp	int	$tmp147	%read{308,308} %write{307,307}
temp	float	$tmp148	%read{313,313} %write{308,308}
temp	int	$tmp149	%read{310,310} %write{309,309}
temp	int	$tmp150	%read{311,311} %write{310,310}
temp	int	$tmp151	%read{312,312} %write{311,311}
temp	float	$tmp152	%read{313,313} %write{312,312}
temp	float	$tmp153	%read{314,314} %write{313,313}
temp	float	$tmp154	%read{316,316} %write{315,315}
temp	float	$tmp155	%read{318,318} %write{316,316}
temp	float	$tmp156	%read{318,318} %write{317,317}
temp	int	$tmp157	%read{321,321} %write{320,320}
temp	float	$tmp158	%read{326,326} %write{321,321}
temp	int	$tmp159	%read{323,323} %write{322,322}
temp	int	$tmp160	%read{324,324} %write{323,323}
temp	int	$tmp161	%read{325,325} %write{324,324}
temp	float	$tmp162	%read{326,326} %write{325,325}
temp	float	$tmp163	%read{327,327} %write{326,326}
code Vector
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:50
# 	point Vector = P,
	assign		Vector P 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{50} %argrw{"wr"}
code ___main___
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:54
# 	point p = Vector;
	assign		p Vector 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{54} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:56
# 	if (use_mapping)
	if		use_mapping 4 4 	%line{56} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:57
# 		p = transform(mapping, p);
	transform	p mapping p 	%line{57} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:59
# 	Fac = noise(p * Scale, Distortion, Detail, Color);
	mul		$tmp1 p Scale 	%line{59} %argrw{"wrr"}
	functioncall	$const1 332 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:25
# 	point p = ip;
	assign		___688_p $tmp1 	%line{25} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:26
# 	int hard = 0;
	assign		___688_hard $const2 	%line{26} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:28
# 	if (distortion != 0.0) {
	neq		$tmp2 Distortion $const3 	%line{28} %argrw{"wrr"}
	if		$tmp2 55 55 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:29
# 		r[0] = safe_noise(p + point(13.5), "unsigned") * distortion;
	add		$tmp5 ___688_p $const4 	%line{29} %argrw{"wrr"}
	functioncall	$const6 23 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp6 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp6 16 17 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp5 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp5 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp7 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp8 $tmp7 $const2 	%argrw{"wrr"}
	if		$tmp8 22 22 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp3 $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp3 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:29
# 		r[0] = safe_noise(p + point(13.5), "unsigned") * distortion;
	mul		$tmp9 $tmp3 Distortion 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{29} %argrw{"wrr"}
	compassign	___688_r $const2 $tmp9 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:30
# 		r[1] = safe_noise(p, "unsigned") * distortion;
	functioncall	$const6 37 	%line{30} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp11 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp11 30 31 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 ___688_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___688_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp12 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp13 $tmp12 $const2 	%argrw{"wrr"}
	if		$tmp13 36 36 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp10 $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp10 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:30
# 		r[1] = safe_noise(p, "unsigned") * distortion;
	mul		$tmp14 $tmp10 Distortion 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{30} %argrw{"wrr"}
	compassign	___688_r $const10 $tmp14 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:31
# 		r[2] = safe_noise(p - point(13.5), "unsigned") * distortion;
	sub		$tmp17 ___688_p $const4 	%line{31} %argrw{"wrr"}
	functioncall	$const6 52 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp18 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp18 45 46 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp17 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp17 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp19 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp20 $tmp19 $const2 	%argrw{"wrr"}
	if		$tmp20 51 51 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp15 $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp15 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:31
# 		r[2] = safe_noise(p - point(13.5), "unsigned") * distortion;
	mul		$tmp21 $tmp15 Distortion 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{31} %argrw{"wrr"}
	compassign	___688_r $const11 $tmp21 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:33
# 		p += r;
	add		___688_p ___688_p ___688_r 	%line{33} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:36
# 	float fac = noise_turbulence(p, detail, hard);
	functioncall	$const12 144 	%line{36} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:113
# 	float fscale = 1.0;
	assign		___682_fscale $const13 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{113} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:114
# 	float amp = 1.0;
	assign		___682_amp $const13 	%line{114} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:115
# 	float sum = 0.0;
	assign		___682_sum $const3 	%line{115} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:118
# 	float octaves = clamp(details, 0.0, 16.0);
	functioncall	$const15 62 	%line{118} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp22 Detail $const14 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		___682_octaves $tmp22 $const3 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:119
# 	n = (int)octaves;
	assign		___682_n ___682_octaves 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{119} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:121
# 	for (i = 0; i <= n; i++) {
	for		$tmp23 65 66 87 89 	%line{121} %argrw{"r"}
	assign		___682_i $const2 	%argrw{"wr"}
	le		$tmp23 ___682_i ___682_n 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:122
# 		float t = safe_noise(fscale * p, "unsigned");
	mul		$tmp24 ___682_fscale ___688_p 	%line{122} %argrw{"wrr"}
	functioncall	$const6 79 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp25 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp25 72 73 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp24 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp24 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp26 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp27 $tmp26 $const2 	%argrw{"wrr"}
	if		$tmp27 78 78 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		___684_t $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		___684_t ___681_f 	%line{106} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:124
# 		if (hard)
	if		___688_hard 83 83 	%line{124} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:125
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp28 $const16 ___684_t 	%line{125} %argrw{"wrr"}
	sub		$tmp29 $tmp28 $const13 	%argrw{"wrr"}
	fabs		___684_t $tmp29 	%argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:127
# 		sum += t * amp;
	mul		$tmp30 ___684_t ___682_amp 	%line{127} %argrw{"wrr"}
	add		___682_sum ___682_sum $tmp30 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:128
# 		amp *= 0.5;
	mul		___682_amp ___682_amp $const9 	%line{128} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:129
# 		fscale *= 2.0;
	mul		___682_fscale ___682_fscale $const16 	%line{129} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:121
# 	for (i = 0; i <= n; i++) {
	assign		$tmp31 ___682_i 	%line{121} %argrw{"wr"}
	add		___682_i ___682_i $const10 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:132
# 	float rmd = octaves - floor(octaves);
	floor		$tmp32 ___682_octaves 	%line{132} %argrw{"wr"}
	sub		___682_rmd ___682_octaves $tmp32 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:134
# 	if (rmd != 0.0) {
	neq		$tmp33 ___682_rmd $const3 	%line{134} %argrw{"wrr"}
	if		$tmp33 134 144 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:135
# 		float t = safe_noise(fscale * p, "unsigned");
	mul		$tmp34 ___682_fscale ___688_p 	%line{135} %argrw{"wrr"}
	functioncall	$const6 106 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp35 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp35 99 100 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp34 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp34 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp36 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp37 $tmp36 $const2 	%argrw{"wrr"}
	if		$tmp37 105 105 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		___685_t $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		___685_t ___681_f 	%line{106} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:137
# 		if (hard)
	if		___688_hard 110 110 	%line{137} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:138
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp38 $const16 ___685_t 	%line{138} %argrw{"wrr"}
	sub		$tmp39 $tmp38 $const13 	%argrw{"wrr"}
	fabs		___685_t $tmp39 	%argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:140
# 		float sum2 = sum + t * amp;
	mul		$tmp40 ___685_t ___682_amp 	%line{140} %argrw{"wrr"}
	add		___685_sum2 ___682_sum $tmp40 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:142
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp41 $const10 ___682_n 	%line{142} %argrw{"wrr"}
	assign		$tmp42 $tmp41 	%argrw{"wr"}
	add		$tmp43 ___682_n $const10 	%argrw{"wrr"}
	shl		$tmp44 $const10 $tmp43 	%argrw{"wrr"}
	sub		$tmp45 $tmp44 $const10 	%argrw{"wrr"}
	assign		$tmp46 $tmp45 	%argrw{"wr"}
	div		$tmp47 $tmp42 $tmp46 	%argrw{"wrr"}
	mul		___682_sum ___682_sum $tmp47 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:143
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp48 ___682_n $const10 	%line{143} %argrw{"wrr"}
	shl		$tmp49 $const10 $tmp48 	%argrw{"wrr"}
	assign		$tmp50 $tmp49 	%argrw{"wr"}
	add		$tmp51 ___682_n $const11 	%argrw{"wrr"}
	shl		$tmp52 $const10 $tmp51 	%argrw{"wrr"}
	sub		$tmp53 $tmp52 $const10 	%argrw{"wrr"}
	assign		$tmp54 $tmp53 	%argrw{"wr"}
	div		$tmp55 $tmp50 $tmp54 	%argrw{"wrr"}
	mul		___685_sum2 ___685_sum2 $tmp55 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:145
# 		return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp56 $const13 ___682_rmd 	%line{145} %argrw{"wrr"}
	mul		$tmp57 $tmp56 ___682_sum 	%argrw{"wrr"}
	mul		$tmp58 ___682_rmd ___685_sum2 	%argrw{"wrr"}
	add		___688_fac $tmp57 $tmp58 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:148
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp59 $const10 ___682_n 	%line{148} %argrw{"wrr"}
	assign		$tmp60 $tmp59 	%argrw{"wr"}
	add		$tmp61 ___682_n $const10 	%argrw{"wrr"}
	shl		$tmp62 $const10 $tmp61 	%argrw{"wrr"}
	sub		$tmp63 $tmp62 $const10 	%argrw{"wrr"}
	assign		$tmp64 $tmp63 	%argrw{"wr"}
	div		$tmp65 $tmp60 $tmp64 	%argrw{"wrr"}
	mul		___682_sum ___682_sum $tmp65 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:149
# 		return sum;
	assign		___688_fac ___682_sum 	%line{149} %argrw{"wr"}
	return
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:38
# 	Color = color(fac, noise_turbulence(point(p[1], p[0], p[2]), detail, hard),
	compref		$tmp68 ___688_p $const10 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{38} %argrw{"wrr"}
	compref		$tmp69 ___688_p $const2 	%argrw{"wrr"}
	compref		$tmp70 ___688_p $const11 	%argrw{"wrr"}
	point		$tmp67 $tmp68 $tmp69 $tmp70 	%argrw{"wrrr"}
	functioncall	$const12 237 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:113
# 	float fscale = 1.0;
	assign		___682_fscale $const13 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{113} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:114
# 	float amp = 1.0;
	assign		___682_amp $const13 	%line{114} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:115
# 	float sum = 0.0;
	assign		___682_sum $const3 	%line{115} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:118
# 	float octaves = clamp(details, 0.0, 16.0);
	functioncall	$const15 155 	%line{118} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp71 Detail $const14 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		___682_octaves $tmp71 $const3 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:119
# 	n = (int)octaves;
	assign		___682_n ___682_octaves 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{119} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:121
# 	for (i = 0; i <= n; i++) {
	for		$tmp72 158 159 180 182 	%line{121} %argrw{"r"}
	assign		___682_i $const2 	%argrw{"wr"}
	le		$tmp72 ___682_i ___682_n 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:122
# 		float t = safe_noise(fscale * p, "unsigned");
	mul		$tmp73 ___682_fscale $tmp67 	%line{122} %argrw{"wrr"}
	functioncall	$const6 172 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp74 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp74 165 166 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp73 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp73 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp75 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp76 $tmp75 $const2 	%argrw{"wrr"}
	if		$tmp76 171 171 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		___684_t $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		___684_t ___681_f 	%line{106} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:124
# 		if (hard)
	if		___688_hard 176 176 	%line{124} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:125
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp77 $const16 ___684_t 	%line{125} %argrw{"wrr"}
	sub		$tmp78 $tmp77 $const13 	%argrw{"wrr"}
	fabs		___684_t $tmp78 	%argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:127
# 		sum += t * amp;
	mul		$tmp79 ___684_t ___682_amp 	%line{127} %argrw{"wrr"}
	add		___682_sum ___682_sum $tmp79 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:128
# 		amp *= 0.5;
	mul		___682_amp ___682_amp $const9 	%line{128} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:129
# 		fscale *= 2.0;
	mul		___682_fscale ___682_fscale $const16 	%line{129} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:121
# 	for (i = 0; i <= n; i++) {
	assign		$tmp80 ___682_i 	%line{121} %argrw{"wr"}
	add		___682_i ___682_i $const10 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:132
# 	float rmd = octaves - floor(octaves);
	floor		$tmp81 ___682_octaves 	%line{132} %argrw{"wr"}
	sub		___682_rmd ___682_octaves $tmp81 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:134
# 	if (rmd != 0.0) {
	neq		$tmp82 ___682_rmd $const3 	%line{134} %argrw{"wrr"}
	if		$tmp82 227 237 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:135
# 		float t = safe_noise(fscale * p, "unsigned");
	mul		$tmp83 ___682_fscale $tmp67 	%line{135} %argrw{"wrr"}
	functioncall	$const6 199 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp84 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp84 192 193 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp83 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp83 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp85 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp86 $tmp85 $const2 	%argrw{"wrr"}
	if		$tmp86 198 198 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		___685_t $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		___685_t ___681_f 	%line{106} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:137
# 		if (hard)
	if		___688_hard 203 203 	%line{137} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:138
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp87 $const16 ___685_t 	%line{138} %argrw{"wrr"}
	sub		$tmp88 $tmp87 $const13 	%argrw{"wrr"}
	fabs		___685_t $tmp88 	%argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:140
# 		float sum2 = sum + t * amp;
	mul		$tmp89 ___685_t ___682_amp 	%line{140} %argrw{"wrr"}
	add		___685_sum2 ___682_sum $tmp89 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:142
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp90 $const10 ___682_n 	%line{142} %argrw{"wrr"}
	assign		$tmp91 $tmp90 	%argrw{"wr"}
	add		$tmp92 ___682_n $const10 	%argrw{"wrr"}
	shl		$tmp93 $const10 $tmp92 	%argrw{"wrr"}
	sub		$tmp94 $tmp93 $const10 	%argrw{"wrr"}
	assign		$tmp95 $tmp94 	%argrw{"wr"}
	div		$tmp96 $tmp91 $tmp95 	%argrw{"wrr"}
	mul		___682_sum ___682_sum $tmp96 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:143
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp97 ___682_n $const10 	%line{143} %argrw{"wrr"}
	shl		$tmp98 $const10 $tmp97 	%argrw{"wrr"}
	assign		$tmp99 $tmp98 	%argrw{"wr"}
	add		$tmp100 ___682_n $const11 	%argrw{"wrr"}
	shl		$tmp101 $const10 $tmp100 	%argrw{"wrr"}
	sub		$tmp102 $tmp101 $const10 	%argrw{"wrr"}
	assign		$tmp103 $tmp102 	%argrw{"wr"}
	div		$tmp104 $tmp99 $tmp103 	%argrw{"wrr"}
	mul		___685_sum2 ___685_sum2 $tmp104 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:145
# 		return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp105 $const13 ___682_rmd 	%line{145} %argrw{"wrr"}
	mul		$tmp106 $tmp105 ___682_sum 	%argrw{"wrr"}
	mul		$tmp107 ___682_rmd ___685_sum2 	%argrw{"wrr"}
	add		$tmp66 $tmp106 $tmp107 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:148
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp108 $const10 ___682_n 	%line{148} %argrw{"wrr"}
	assign		$tmp109 $tmp108 	%argrw{"wr"}
	add		$tmp110 ___682_n $const10 	%argrw{"wrr"}
	shl		$tmp111 $const10 $tmp110 	%argrw{"wrr"}
	sub		$tmp112 $tmp111 $const10 	%argrw{"wrr"}
	assign		$tmp113 $tmp112 	%argrw{"wr"}
	div		$tmp114 $tmp109 $tmp113 	%argrw{"wrr"}
	mul		___682_sum ___682_sum $tmp114 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:149
# 		return sum;
	assign		$tmp66 ___682_sum 	%line{149} %argrw{"wr"}
	return
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:39
# 		noise_turbulence(point(p[1], p[2], p[0]), detail, hard));
	compref		$tmp117 ___688_p $const10 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{39} %argrw{"wrr"}
	compref		$tmp118 ___688_p $const11 	%argrw{"wrr"}
	compref		$tmp119 ___688_p $const2 	%argrw{"wrr"}
	point		$tmp116 $tmp117 $tmp118 $tmp119 	%argrw{"wrrr"}
	functioncall	$const12 330 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:113
# 	float fscale = 1.0;
	assign		___682_fscale $const13 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{113} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:114
# 	float amp = 1.0;
	assign		___682_amp $const13 	%line{114} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:115
# 	float sum = 0.0;
	assign		___682_sum $const3 	%line{115} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:118
# 	float octaves = clamp(details, 0.0, 16.0);
	functioncall	$const15 248 	%line{118} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp120 Detail $const14 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		___682_octaves $tmp120 $const3 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:119
# 	n = (int)octaves;
	assign		___682_n ___682_octaves 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{119} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:121
# 	for (i = 0; i <= n; i++) {
	for		$tmp121 251 252 273 275 	%line{121} %argrw{"r"}
	assign		___682_i $const2 	%argrw{"wr"}
	le		$tmp121 ___682_i ___682_n 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:122
# 		float t = safe_noise(fscale * p, "unsigned");
	mul		$tmp122 ___682_fscale $tmp116 	%line{122} %argrw{"wrr"}
	functioncall	$const6 265 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp123 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp123 258 259 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp122 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp122 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp124 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp125 $tmp124 $const2 	%argrw{"wrr"}
	if		$tmp125 264 264 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		___684_t $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		___684_t ___681_f 	%line{106} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:124
# 		if (hard)
	if		___688_hard 269 269 	%line{124} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:125
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp126 $const16 ___684_t 	%line{125} %argrw{"wrr"}
	sub		$tmp127 $tmp126 $const13 	%argrw{"wrr"}
	fabs		___684_t $tmp127 	%argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:127
# 		sum += t * amp;
	mul		$tmp128 ___684_t ___682_amp 	%line{127} %argrw{"wrr"}
	add		___682_sum ___682_sum $tmp128 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:128
# 		amp *= 0.5;
	mul		___682_amp ___682_amp $const9 	%line{128} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:129
# 		fscale *= 2.0;
	mul		___682_fscale ___682_fscale $const16 	%line{129} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:121
# 	for (i = 0; i <= n; i++) {
	assign		$tmp129 ___682_i 	%line{121} %argrw{"wr"}
	add		___682_i ___682_i $const10 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:132
# 	float rmd = octaves - floor(octaves);
	floor		$tmp130 ___682_octaves 	%line{132} %argrw{"wr"}
	sub		___682_rmd ___682_octaves $tmp130 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:134
# 	if (rmd != 0.0) {
	neq		$tmp131 ___682_rmd $const3 	%line{134} %argrw{"wrr"}
	if		$tmp131 320 330 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:135
# 		float t = safe_noise(fscale * p, "unsigned");
	mul		$tmp132 ___682_fscale $tmp116 	%line{135} %argrw{"wrr"}
	functioncall	$const6 292 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const3 	%line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp133 $const5 $const7 	%line{95} %argrw{"wrr"}
	if		$tmp133 285 286 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const8 $tmp132 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f $tmp132 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp134 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp135 $tmp134 $const2 	%argrw{"wrr"}
	if		$tmp135 291 291 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		___685_t $const9 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		___685_t ___681_f 	%line{106} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:137
# 		if (hard)
	if		___688_hard 296 296 	%line{137} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:138
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp136 $const16 ___685_t 	%line{138} %argrw{"wrr"}
	sub		$tmp137 $tmp136 $const13 	%argrw{"wrr"}
	fabs		___685_t $tmp137 	%argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:140
# 		float sum2 = sum + t * amp;
	mul		$tmp138 ___685_t ___682_amp 	%line{140} %argrw{"wrr"}
	add		___685_sum2 ___682_sum $tmp138 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:142
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp139 $const10 ___682_n 	%line{142} %argrw{"wrr"}
	assign		$tmp140 $tmp139 	%argrw{"wr"}
	add		$tmp141 ___682_n $const10 	%argrw{"wrr"}
	shl		$tmp142 $const10 $tmp141 	%argrw{"wrr"}
	sub		$tmp143 $tmp142 $const10 	%argrw{"wrr"}
	assign		$tmp144 $tmp143 	%argrw{"wr"}
	div		$tmp145 $tmp140 $tmp144 	%argrw{"wrr"}
	mul		___682_sum ___682_sum $tmp145 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:143
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp146 ___682_n $const10 	%line{143} %argrw{"wrr"}
	shl		$tmp147 $const10 $tmp146 	%argrw{"wrr"}
	assign		$tmp148 $tmp147 	%argrw{"wr"}
	add		$tmp149 ___682_n $const11 	%argrw{"wrr"}
	shl		$tmp150 $const10 $tmp149 	%argrw{"wrr"}
	sub		$tmp151 $tmp150 $const10 	%argrw{"wrr"}
	assign		$tmp152 $tmp151 	%argrw{"wr"}
	div		$tmp153 $tmp148 $tmp152 	%argrw{"wrr"}
	mul		___685_sum2 ___685_sum2 $tmp153 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:145
# 		return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp154 $const13 ___682_rmd 	%line{145} %argrw{"wrr"}
	mul		$tmp155 $tmp154 ___682_sum 	%argrw{"wrr"}
	mul		$tmp156 ___682_rmd ___685_sum2 	%argrw{"wrr"}
	add		$tmp115 $tmp155 $tmp156 	%argrw{"wrr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:148
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp157 $const10 ___682_n 	%line{148} %argrw{"wrr"}
	assign		$tmp158 $tmp157 	%argrw{"wr"}
	add		$tmp159 ___682_n $const10 	%argrw{"wrr"}
	shl		$tmp160 $const10 $tmp159 	%argrw{"wrr"}
	sub		$tmp161 $tmp160 $const10 	%argrw{"wrr"}
	assign		$tmp162 $tmp161 	%argrw{"wr"}
	div		$tmp163 $tmp158 $tmp162 	%argrw{"wrr"}
	mul		___682_sum ___682_sum $tmp163 	%argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:149
# 		return sum;
	assign		$tmp115 ___682_sum 	%line{149} %argrw{"wr"}
	return
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:39
# 		noise_turbulence(point(p[1], p[2], p[0]), detail, hard));
	color		Color ___688_fac $tmp66 $tmp115 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl"} %line{39} %argrw{"wrrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_noise_texture.osl:41
# 	return fac;
	assign		Fac ___688_fac 	%line{41} %argrw{"wr"}
	end
