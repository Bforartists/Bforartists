OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -q -O2 -IC:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders -o C:/b/win64_cmake_vs2017/win64_cmake_vs2017/build/win64_cmake_vs2017/intern/cycles/kernel/shaders/node_musgrave_texture.oso
shader node_musgrave_texture
param	int	use_mapping	0		%read{8,8} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{9,9} %write{2147483647,-1}
param	string	type	"fBM"		%read{11,249} %write{2147483647,-1}
param	float	Dimension	2		%read{1,1} %write{2147483647,-1}
param	float	Lacunarity	1		%read{5,5} %write{2147483647,-1}
param	float	Detail	2		%read{3,3} %write{2147483647,-1}
param	float	Offset	0		%read{134,310} %write{2147483647,-1}
param	float	Gain	1		%read{135,222} %write{2147483647,-1}
param	float	Scale	5		%read{10,10} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{7,7} %write{0,0} %initexpr
oparam	float	Fac	0		%read{317,317} %write{63,316}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{317,317}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___681_f	%read{21,309} %write{21,303}
local	float	___688_rmd	%read{96,110} %write{95,95}
local	float	___688_value	%read{74,113} %write{67,112}
local	float	___688_pwr	%read{74,111} %write{68,93}
local	float	___688_pwHL	%read{74,93} %write{70,70}
local	int	___688_i	%read{74,93} %write{73,93}
local	point	___688_p	%read{74,103} %write{71,93}
local	float	___691_rmd	%read{44,46} %write{43,43}
local	float	___691_value	%read{21,62} %write{14,61}
local	float	___691_pwr	%read{21,46} %write{15,41}
local	float	___691_pwHL	%read{21,41} %write{17,17}
local	int	___691_i	%read{21,41} %write{20,41}
local	point	___691_p	%read{21,52} %write{18,41}
local	float	___694_value	%read{272,315} %write{268,314}
local	float	___694_increment	%read{272,313} %write{272,312}
local	float	___694_rmd	%read{296,313} %write{295,295}
local	float	___694_pwHL	%read{254,293} %write{253,253}
local	float	___694_pwr	%read{272,311} %write{254,293}
local	int	___694_i	%read{272,293} %write{271,293}
local	point	___694_p	%read{260,303} %write{255,293}
local	float	___698_result	%read{135,191} %write{134,190}
local	float	___698_signal	%read{139,170} %write{139,170}
local	float	___698_weight	%read{139,170} %write{135,170}
local	float	___698_rmd	%read{173,189} %write{172,172}
local	float	___698_pwHL	%read{120,170} %write{119,119}
local	float	___698_pwr	%read{139,188} %write{120,170}
local	int	___698_i	%read{139,170} %write{138,170}
local	point	___698_p	%read{126,180} %write{121,170}
local	float	___701_result	%read{219,247} %write{215,246}
local	float	___701_signal	%read{214,246} %write{213,246}
local	float	___701_weight	%read{219,246} %write{216,246}
local	float	___701_pwHL	%read{198,246} %write{197,197}
local	float	___701_pwr	%read{219,246} %write{198,246}
local	int	___701_i	%read{219,246} %write{218,246}
local	point	___701_p	%read{204,246} %write{199,246}
local	float	dimension	%read{16,252} %write{1,1}
local	float	octaves	%read{21,295} %write{4,4}
local	float	lacunarity	%read{17,293} %write{5,5}
local	float	intensity	%read{63,316} %write{6,6}
local	point	p	%read{9,255} %write{7,10}
const	float	$const1	9.9999997e-06		%read{1,5} %write{2147483647,-1}
const	float	$const2	0		%read{4,299} %write{2147483647,-1}
const	float	$const3	16		%read{3,3} %write{2147483647,-1}
const	string	$const4	"clamp"		%read{2,223} %write{2147483647,-1}
temp	float	$tmp1	%read{4,4} %write{3,3}
const	float	$const5	1		%read{6,224} %write{2147483647,-1}
const	string	$const6	"multifractal"		%read{11,11} %write{2147483647,-1}
temp	int	$tmp2	%read{12,12} %write{11,11}
temp	float	$tmp3	%read{63,63} %write{62,62}
const	string	$const7	"noise_musgrave_multi_fractal"		%read{13,13} %write{2147483647,-1}
temp	float	$tmp4	%read{17,17} %write{16,16}
const	int	$const8	0		%read{20,305} %write{2147483647,-1}
temp	int	$tmp5	%read{21,41} %write{21,41}
temp	int	$tmp6	%read{19,41} %write{20,41}
temp	float	$tmp7	%read{21,41} %write{21,41}
const	string	$const9	"signed"		%read{25,300} %write{2147483647,-1}
const	string	$const10	"safe_noise"		%read{23,298} %write{2147483647,-1}
temp	int	$tmp8	%read{21,41} %write{21,41}
const	string	$const11	"perlin"		%read{27,302} %write{2147483647,-1}
temp	int	$tmp9	%read{21,41} %write{21,41}
temp	int	$tmp10	%read{21,41} %write{21,41}
const	float	$const12	0.5		%read{32,307} %write{2147483647,-1}
temp	float	$tmp11	%read{21,41} %write{21,41}
temp	float	$tmp12	%read{21,41} %write{21,41}
const	int	$const13	1		%read{41,293} %write{2147483647,-1}
temp	int	$tmp13	%read{2147483647,-1} %write{21,41}
temp	float	$tmp14	%read{43,43} %write{42,42}
temp	int	$tmp15	%read{45,45} %write{44,44}
temp	float	$tmp16	%read{59,59} %write{46,46}
temp	float	$tmp17	%read{59,59} %write{56,58}
temp	int	$tmp18	%read{50,50} %write{49,49}
temp	int	$tmp19	%read{54,54} %write{53,53}
temp	int	$tmp20	%read{55,55} %write{54,54}
temp	float	$tmp21	%read{60,60} %write{59,59}
temp	float	$tmp22	%read{61,61} %write{60,60}
const	string	$const14	"fBM"		%read{64,64} %write{2147483647,-1}
temp	int	$tmp23	%read{65,65} %write{64,64}
temp	float	$tmp24	%read{114,114} %write{113,113}
const	string	$const15	"noise_musgrave_fBm"		%read{66,66} %write{2147483647,-1}
temp	float	$tmp25	%read{70,70} %write{69,69}
temp	int	$tmp26	%read{74,93} %write{74,93}
temp	int	$tmp27	%read{72,93} %write{73,93}
temp	float	$tmp28	%read{74,93} %write{74,93}
temp	int	$tmp29	%read{74,93} %write{74,93}
temp	int	$tmp30	%read{74,93} %write{74,93}
temp	int	$tmp31	%read{74,93} %write{74,93}
temp	float	$tmp32	%read{74,93} %write{74,93}
temp	int	$tmp33	%read{2147483647,-1} %write{74,93}
temp	float	$tmp34	%read{95,95} %write{94,94}
temp	int	$tmp35	%read{97,97} %write{96,96}
temp	float	$tmp36	%read{110,110} %write{107,109}
temp	int	$tmp37	%read{101,101} %write{100,100}
temp	int	$tmp38	%read{105,105} %write{104,104}
temp	int	$tmp39	%read{106,106} %write{105,105}
temp	float	$tmp40	%read{111,111} %write{110,110}
temp	float	$tmp41	%read{112,112} %write{111,111}
const	string	$const16	"hybrid_multifractal"		%read{115,115} %write{2147483647,-1}
temp	int	$tmp42	%read{116,116} %write{115,115}
temp	float	$tmp43	%read{192,192} %write{191,191}
const	string	$const17	"noise_musgrave_hybrid_multi_fractal"		%read{117,117} %write{2147483647,-1}
temp	float	$tmp44	%read{119,119} %write{118,118}
temp	float	$tmp45	%read{134,134} %write{131,133}
temp	int	$tmp46	%read{125,125} %write{124,124}
temp	int	$tmp47	%read{129,129} %write{128,128}
temp	int	$tmp48	%read{130,130} %write{129,129}
const	float	$const18	0.001		%read{139,139} %write{2147483647,-1}
temp	int	$tmp49	%read{139,170} %write{139,170}
temp	int	$tmp50	%read{137,170} %write{138,170}
temp	int	$tmp51	%read{139,170} %write{139,170}
temp	int	$tmp52	%read{139,170} %write{139,170}
temp	int	$tmp53	%read{139,170} %write{139,170}
temp	int	$tmp54	%read{139,170} %write{139,170}
temp	float	$tmp55	%read{139,170} %write{139,170}
temp	int	$tmp56	%read{139,170} %write{139,170}
temp	int	$tmp57	%read{139,170} %write{139,170}
temp	int	$tmp58	%read{139,170} %write{139,170}
temp	float	$tmp59	%read{139,170} %write{139,170}
temp	float	$tmp60	%read{139,170} %write{139,170}
temp	float	$tmp61	%read{139,170} %write{139,170}
temp	int	$tmp62	%read{2147483647,-1} %write{139,170}
temp	float	$tmp63	%read{172,172} %write{171,171}
temp	int	$tmp64	%read{174,174} %write{173,173}
temp	float	$tmp65	%read{187,187} %write{184,186}
temp	int	$tmp66	%read{178,178} %write{177,177}
temp	int	$tmp67	%read{182,182} %write{181,181}
temp	int	$tmp68	%read{183,183} %write{182,182}
temp	float	$tmp69	%read{188,188} %write{187,187}
temp	float	$tmp70	%read{189,189} %write{188,188}
temp	float	$tmp71	%read{190,190} %write{189,189}
const	string	$const19	"ridged_multifractal"		%read{193,193} %write{2147483647,-1}
temp	int	$tmp72	%read{194,194} %write{193,193}
temp	float	$tmp73	%read{248,248} %write{247,247}
const	string	$const20	"noise_musgrave_ridged_multi_fractal"		%read{195,195} %write{2147483647,-1}
temp	float	$tmp74	%read{197,197} %write{196,196}
temp	float	$tmp75	%read{213,213} %write{212,212}
temp	float	$tmp76	%read{212,212} %write{209,211}
temp	int	$tmp77	%read{203,203} %write{202,202}
temp	int	$tmp78	%read{207,207} %write{206,206}
temp	int	$tmp79	%read{208,208} %write{207,207}
temp	int	$tmp80	%read{219,246} %write{219,246}
temp	int	$tmp81	%read{217,246} %write{218,246}
temp	float	$tmp82	%read{219,246} %write{219,246}
temp	float	$tmp83	%read{219,246} %write{219,246}
temp	float	$tmp84	%read{219,246} %write{219,246}
temp	float	$tmp85	%read{219,246} %write{219,246}
temp	int	$tmp86	%read{219,246} %write{219,246}
temp	int	$tmp87	%read{219,246} %write{219,246}
temp	int	$tmp88	%read{219,246} %write{219,246}
temp	float	$tmp89	%read{219,246} %write{219,246}
temp	int	$tmp90	%read{2147483647,-1} %write{219,246}
const	string	$const21	"hetero_terrain"		%read{249,249} %write{2147483647,-1}
temp	int	$tmp91	%read{250,250} %write{249,249}
temp	float	$tmp92	%read{316,316} %write{315,315}
const	string	$const22	"noise_musgrave_hetero_terrain"		%read{251,251} %write{2147483647,-1}
temp	float	$tmp93	%read{253,253} %write{252,252}
temp	float	$tmp94	%read{268,268} %write{265,267}
temp	int	$tmp95	%read{259,259} %write{258,258}
temp	int	$tmp96	%read{263,263} %write{262,262}
temp	int	$tmp97	%read{264,264} %write{263,263}
temp	int	$tmp98	%read{272,293} %write{272,293}
temp	int	$tmp99	%read{270,293} %write{271,293}
temp	float	$tmp100	%read{272,293} %write{272,293}
temp	int	$tmp101	%read{272,293} %write{272,293}
temp	int	$tmp102	%read{272,293} %write{272,293}
temp	int	$tmp103	%read{272,293} %write{272,293}
temp	float	$tmp104	%read{272,293} %write{272,293}
temp	float	$tmp105	%read{272,293} %write{272,293}
temp	int	$tmp106	%read{2147483647,-1} %write{272,293}
temp	float	$tmp107	%read{295,295} %write{294,294}
temp	int	$tmp108	%read{297,297} %write{296,296}
temp	float	$tmp109	%read{310,310} %write{307,309}
temp	int	$tmp110	%read{301,301} %write{300,300}
temp	int	$tmp111	%read{305,305} %write{304,304}
temp	int	$tmp112	%read{306,306} %write{305,305}
temp	float	$tmp113	%read{311,311} %write{310,310}
temp	float	$tmp114	%read{312,312} %write{311,311}
temp	float	$tmp115	%read{314,314} %write{313,313}
code Vector
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:202
# 	point Vector = P,
	assign		Vector P 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{202} %argrw{"wr"}
code ___main___
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:206
# 	float dimension = max(Dimension, 1e-5);
	max		dimension Dimension $const1 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{206} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:207
# 	float octaves = clamp(Detail, 0.0, 16.0);
	functioncall	$const4 5 	%line{207} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1 Detail $const3 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		octaves $tmp1 $const2 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:208
# 	float lacunarity = max(Lacunarity, 1e-5);
	max		lacunarity Lacunarity $const1 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{208} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:209
# 	float intensity = 1.0;
	assign		intensity $const5 	%line{209} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:211
# 	point p = Vector;
	assign		p Vector 	%line{211} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:213
# 	if (use_mapping)
	if		use_mapping 10 10 	%line{213} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:214
# 		p = transform(mapping, p);
	transform	p mapping p 	%line{214} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:216
# 	p = p * Scale;
	mul		p p Scale 	%line{216} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:218
# 	if (type == "multifractal")
	eq		$tmp2 type $const6 	%line{218} %argrw{"wrr"}
	if		$tmp2 64 317 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:219
# 		Fac = intensity * noise_musgrave_multi_fractal(p, dimension, lacunarity, octaves);
	functioncall	$const7 63 	%line{219} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:61
# 	float value = 1.0;
	assign		___691_value $const5 	%line{61} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:62
# 	float pwr = 1.0;
	assign		___691_pwr $const5 	%line{62} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:63
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp4 dimension 	%line{63} %argrw{"wr"}
	pow		___691_pwHL lacunarity $tmp4 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:65
# 	point p = ip;
	assign		___691_p p 	%line{65} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:67
# 	for (i = 0; i < (int)octaves; i++) {
	for		$tmp6 21 23 40 42 	%line{67} %argrw{"r"}
	assign		___691_i $const8 	%argrw{"wr"}
	assign		$tmp5 octaves 	%argrw{"wr"}
	lt		$tmp6 ___691_i $tmp5 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:68
# 		value *= (pwr * safe_noise(p, "signed") + 1.0);
	functioncall	$const10 35 	%line{68} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp8 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp8 28 29 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___691_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___691_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp9 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp10 $tmp9 $const8 	%argrw{"wrr"}
	if		$tmp10 34 34 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp7 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp7 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:68
# 		value *= (pwr * safe_noise(p, "signed") + 1.0);
	mul		$tmp11 ___691_pwr $tmp7 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{68} %argrw{"wrr"}
	add		$tmp12 $tmp11 $const5 	%argrw{"wrr"}
	mul		___691_value ___691_value $tmp12 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:69
# 		pwr *= pwHL;
	mul		___691_pwr ___691_pwr ___691_pwHL 	%line{69} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:70
# 		p *= lacunarity;
	mul		___691_p ___691_p lacunarity 	%line{70} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:67
# 	for (i = 0; i < (int)octaves; i++) {
	assign		$tmp13 ___691_i 	%line{67} %argrw{"wr"}
	add		___691_i ___691_i $const13 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:73
# 	rmd = octaves - floor(octaves);
	floor		$tmp14 octaves 	%line{73} %argrw{"wr"}
	sub		___691_rmd octaves $tmp14 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:74
# 	if (rmd != 0.0)
	neq		$tmp15 ___691_rmd $const2 	%line{74} %argrw{"wrr"}
	if		$tmp15 62 62 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:75
# 		value *= (rmd * pwr * safe_noise(p, "signed") + 1.0); /* correct? */
	mul		$tmp16 ___691_rmd ___691_pwr 	%line{75} %argrw{"wrr"}
	functioncall	$const10 59 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp18 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp18 52 53 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___691_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___691_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp19 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp20 $tmp19 $const8 	%argrw{"wrr"}
	if		$tmp20 58 58 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp17 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp17 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:75
# 		value *= (rmd * pwr * safe_noise(p, "signed") + 1.0); /* correct? */
	mul		$tmp21 $tmp16 $tmp17 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{75} %argrw{"wrr"}
	add		$tmp22 $tmp21 $const5 	%argrw{"wrr"}
	mul		___691_value ___691_value $tmp22 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:77
# 	return value;
	assign		$tmp3 ___691_value 	%line{77} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:219
# 		Fac = intensity * noise_musgrave_multi_fractal(p, dimension, lacunarity, octaves);
	mul		Fac intensity $tmp3 	%line{219} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:220
# 	else if (type == "fBM")
	eq		$tmp23 type $const14 	%line{220} %argrw{"wrr"}
	if		$tmp23 115 317 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:221
# 		Fac = intensity * noise_musgrave_fBm(p, dimension, lacunarity, octaves);
	functioncall	$const15 114 	%line{221} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:32
# 	float value = 0.0;
	assign		___688_value $const2 	%line{32} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:33
# 	float pwr = 1.0;
	assign		___688_pwr $const5 	%line{33} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:34
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp25 dimension 	%line{34} %argrw{"wr"}
	pow		___688_pwHL lacunarity $tmp25 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:36
# 	point p = ip;
	assign		___688_p p 	%line{36} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:38
# 	for (i = 0; i < (int)octaves; i++) {
	for		$tmp27 74 76 92 94 	%line{38} %argrw{"r"}
	assign		___688_i $const8 	%argrw{"wr"}
	assign		$tmp26 octaves 	%argrw{"wr"}
	lt		$tmp27 ___688_i $tmp26 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:39
# 		value += safe_noise(p, "signed") * pwr;
	functioncall	$const10 88 	%line{39} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp29 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp29 81 82 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___688_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___688_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp30 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp31 $tmp30 $const8 	%argrw{"wrr"}
	if		$tmp31 87 87 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp28 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp28 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:39
# 		value += safe_noise(p, "signed") * pwr;
	mul		$tmp32 $tmp28 ___688_pwr 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{39} %argrw{"wrr"}
	add		___688_value ___688_value $tmp32 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:40
# 		pwr *= pwHL;
	mul		___688_pwr ___688_pwr ___688_pwHL 	%line{40} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:41
# 		p *= lacunarity;
	mul		___688_p ___688_p lacunarity 	%line{41} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:38
# 	for (i = 0; i < (int)octaves; i++) {
	assign		$tmp33 ___688_i 	%line{38} %argrw{"wr"}
	add		___688_i ___688_i $const13 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:44
# 	rmd = octaves - floor(octaves);
	floor		$tmp34 octaves 	%line{44} %argrw{"wr"}
	sub		___688_rmd octaves $tmp34 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:45
# 	if (rmd != 0.0)
	neq		$tmp35 ___688_rmd $const2 	%line{45} %argrw{"wrr"}
	if		$tmp35 113 113 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:46
# 		value += rmd * safe_noise(p, "signed") * pwr;
	functioncall	$const10 110 	%line{46} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp37 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp37 103 104 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___688_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___688_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp38 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp39 $tmp38 $const8 	%argrw{"wrr"}
	if		$tmp39 109 109 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp36 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp36 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:46
# 		value += rmd * safe_noise(p, "signed") * pwr;
	mul		$tmp40 ___688_rmd $tmp36 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{46} %argrw{"wrr"}
	mul		$tmp41 $tmp40 ___688_pwr 	%argrw{"wrr"}
	add		___688_value ___688_value $tmp41 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:48
# 	return value;
	assign		$tmp24 ___688_value 	%line{48} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:221
# 		Fac = intensity * noise_musgrave_fBm(p, dimension, lacunarity, octaves);
	mul		Fac intensity $tmp24 	%line{221} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:222
# 	else if (type == "hybrid_multifractal")
	eq		$tmp42 type $const16 	%line{222} %argrw{"wrr"}
	if		$tmp42 193 317 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:223
# 		Fac = intensity * noise_musgrave_hybrid_multi_fractal(p, dimension, lacunarity, octaves, Offset, Gain);
	functioncall	$const17 192 	%line{223} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:128
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp44 dimension 	%line{128} %argrw{"wr"}
	pow		___698_pwHL lacunarity $tmp44 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:129
# 	float pwr = pwHL;
	assign		___698_pwr ___698_pwHL 	%line{129} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:131
# 	point p = ip;
	assign		___698_p p 	%line{131} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:133
# 	result = safe_noise(p, "signed") + offset;
	functioncall	$const10 134 	%line{133} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp46 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp46 127 128 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___698_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___698_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp47 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp48 $tmp47 $const8 	%argrw{"wrr"}
	if		$tmp48 133 133 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp45 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp45 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:133
# 	result = safe_noise(p, "signed") + offset;
	add		___698_result $tmp45 Offset 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{133} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:134
# 	weight = gain * result;
	mul		___698_weight Gain ___698_result 	%line{134} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:135
# 	p *= lacunarity;
	mul		___698_p ___698_p lacunarity 	%line{135} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:137
# 	for (i = 1; (weight > 0.001) && (i < (int)octaves); i++) {
	for		$tmp50 139 146 169 171 	%line{137} %argrw{"r"}
	assign		___698_i $const13 	%argrw{"wr"}
	gt		$tmp49 ___698_weight $const18 	%argrw{"wrr"}
	neq		$tmp50 $tmp49 $const8 	%argrw{"wrr"}
	if		$tmp50 146 146 	%argrw{"r"}
	assign		$tmp51 octaves 	%argrw{"wr"}
	lt		$tmp52 ___698_i $tmp51 	%argrw{"wrr"}
	neq		$tmp53 $tmp52 $const8 	%argrw{"wrr"}
	assign		$tmp50 $tmp53 	%argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:138
# 		if (weight > 1.0)
	gt		$tmp54 ___698_weight $const5 	%line{138} %argrw{"wrr"}
	if		$tmp54 149 149 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:139
# 			weight = 1.0;
	assign		___698_weight $const5 	%line{139} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:141
# 		signal = (safe_noise(p, "signed") + offset) * pwr;
	functioncall	$const10 161 	%line{141} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp56 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp56 154 155 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___698_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___698_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp57 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp58 $tmp57 $const8 	%argrw{"wrr"}
	if		$tmp58 160 160 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp55 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp55 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:141
# 		signal = (safe_noise(p, "signed") + offset) * pwr;
	add		$tmp59 $tmp55 Offset 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{141} %argrw{"wrr"}
	mul		___698_signal $tmp59 ___698_pwr 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:142
# 		pwr *= pwHL;
	mul		___698_pwr ___698_pwr ___698_pwHL 	%line{142} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:143
# 		result += weight * signal;
	mul		$tmp60 ___698_weight ___698_signal 	%line{143} %argrw{"wrr"}
	add		___698_result ___698_result $tmp60 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:144
# 		weight *= gain * signal;
	mul		$tmp61 Gain ___698_signal 	%line{144} %argrw{"wrr"}
	mul		___698_weight ___698_weight $tmp61 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:145
# 		p *= lacunarity;
	mul		___698_p ___698_p lacunarity 	%line{145} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:137
# 	for (i = 1; (weight > 0.001) && (i < (int)octaves); i++) {
	assign		$tmp62 ___698_i 	%line{137} %argrw{"wr"}
	add		___698_i ___698_i $const13 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:148
# 	rmd = octaves - floor(octaves);
	floor		$tmp63 octaves 	%line{148} %argrw{"wr"}
	sub		___698_rmd octaves $tmp63 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:149
# 	if (rmd != 0.0)
	neq		$tmp64 ___698_rmd $const2 	%line{149} %argrw{"wrr"}
	if		$tmp64 191 191 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:150
# 		result += rmd * ((safe_noise(p, "signed") + offset) * pwr);
	functioncall	$const10 187 	%line{150} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp66 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp66 180 181 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___698_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___698_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp67 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp68 $tmp67 $const8 	%argrw{"wrr"}
	if		$tmp68 186 186 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp65 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp65 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:150
# 		result += rmd * ((safe_noise(p, "signed") + offset) * pwr);
	add		$tmp69 $tmp65 Offset 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{150} %argrw{"wrr"}
	mul		$tmp70 $tmp69 ___698_pwr 	%argrw{"wrr"}
	mul		$tmp71 ___698_rmd $tmp70 	%argrw{"wrr"}
	add		___698_result ___698_result $tmp71 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:152
# 	return result;
	assign		$tmp43 ___698_result 	%line{152} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:223
# 		Fac = intensity * noise_musgrave_hybrid_multi_fractal(p, dimension, lacunarity, octaves, Offset, Gain);
	mul		Fac intensity $tmp43 	%line{223} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:224
# 	else if (type == "ridged_multifractal")
	eq		$tmp72 type $const19 	%line{224} %argrw{"wrr"}
	if		$tmp72 249 317 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:225
# 		Fac = intensity * noise_musgrave_ridged_multi_fractal(p, dimension, lacunarity, octaves, Offset, Gain);
	functioncall	$const20 248 	%line{225} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:167
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp74 dimension 	%line{167} %argrw{"wr"}
	pow		___701_pwHL lacunarity $tmp74 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:168
# 	float pwr = pwHL;
	assign		___701_pwr ___701_pwHL 	%line{168} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:170
# 	point p = ip;
	assign		___701_p p 	%line{170} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:172
# 	signal = offset - fabs(safe_noise(p, "signed"));
	functioncall	$const10 212 	%line{172} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp77 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp77 205 206 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___701_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___701_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp78 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp79 $tmp78 $const8 	%argrw{"wrr"}
	if		$tmp79 211 211 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp76 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp76 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:172
# 	signal = offset - fabs(safe_noise(p, "signed"));
	fabs		$tmp75 $tmp76 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{172} %argrw{"wr"}
	sub		___701_signal Offset $tmp75 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:173
# 	signal *= signal;
	mul		___701_signal ___701_signal ___701_signal 	%line{173} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:174
# 	result = signal;
	assign		___701_result ___701_signal 	%line{174} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:175
# 	weight = 1.0;
	assign		___701_weight $const5 	%line{175} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:177
# 	for (i = 1; i < (int)octaves; i++) {
	for		$tmp81 219 221 245 247 	%line{177} %argrw{"r"}
	assign		___701_i $const13 	%argrw{"wr"}
	assign		$tmp80 octaves 	%argrw{"wr"}
	lt		$tmp81 ___701_i $tmp80 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:178
# 		p *= lacunarity;
	mul		___701_p ___701_p lacunarity 	%line{178} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:179
# 		weight = clamp(signal * gain, 0.0, 1.0);
	mul		$tmp82 ___701_signal Gain 	%line{179} %argrw{"wrr"}
	functioncall	$const4 226 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp83 $tmp82 $const5 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		___701_weight $tmp83 $const2 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:180
# 		signal = offset - fabs(safe_noise(p, "signed"));
	functioncall	$const10 238 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{180} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp86 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp86 231 232 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___701_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___701_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp87 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp88 $tmp87 $const8 	%argrw{"wrr"}
	if		$tmp88 237 237 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp85 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp85 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:180
# 		signal = offset - fabs(safe_noise(p, "signed"));
	fabs		$tmp84 $tmp85 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{180} %argrw{"wr"}
	sub		___701_signal Offset $tmp84 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:181
# 		signal *= signal;
	mul		___701_signal ___701_signal ___701_signal 	%line{181} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:182
# 		signal *= weight;
	mul		___701_signal ___701_signal ___701_weight 	%line{182} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:183
# 		result += signal * pwr;
	mul		$tmp89 ___701_signal ___701_pwr 	%line{183} %argrw{"wrr"}
	add		___701_result ___701_result $tmp89 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:184
# 		pwr *= pwHL;
	mul		___701_pwr ___701_pwr ___701_pwHL 	%line{184} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:177
# 	for (i = 1; i < (int)octaves; i++) {
	assign		$tmp90 ___701_i 	%line{177} %argrw{"wr"}
	add		___701_i ___701_i $const13 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:187
# 	return result;
	assign		$tmp73 ___701_result 	%line{187} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:225
# 		Fac = intensity * noise_musgrave_ridged_multi_fractal(p, dimension, lacunarity, octaves, Offset, Gain);
	mul		Fac intensity $tmp73 	%line{225} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:226
# 	else if (type == "hetero_terrain")
	eq		$tmp91 type $const21 	%line{226} %argrw{"wrr"}
	if		$tmp91 317 317 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:227
# 		Fac = intensity * noise_musgrave_hetero_terrain(p, dimension, lacunarity, octaves, Offset);
	functioncall	$const22 316 	%line{227} %argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:91
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp93 dimension 	%line{91} %argrw{"wr"}
	pow		___694_pwHL lacunarity $tmp93 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:92
# 	float pwr = pwHL;
	assign		___694_pwr ___694_pwHL 	%line{92} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:94
# 	point p = ip;
	assign		___694_p p 	%line{94} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:97
# 	value = offset + safe_noise(p, "signed");
	functioncall	$const10 268 	%line{97} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp95 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp95 261 262 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___694_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___694_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp96 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp97 $tmp96 $const8 	%argrw{"wrr"}
	if		$tmp97 267 267 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp94 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp94 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:97
# 	value = offset + safe_noise(p, "signed");
	add		___694_value Offset $tmp94 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{97} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:98
# 	p *= lacunarity;
	mul		___694_p ___694_p lacunarity 	%line{98} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:100
# 	for (i = 1; i < (int)octaves; i++) {
	for		$tmp99 272 274 292 294 	%line{100} %argrw{"r"}
	assign		___694_i $const13 	%argrw{"wr"}
	assign		$tmp98 octaves 	%argrw{"wr"}
	lt		$tmp99 ___694_i $tmp98 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:101
# 		increment = (safe_noise(p, "signed") + offset) * pwr * value;
	functioncall	$const10 286 	%line{101} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp101 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp101 279 280 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___694_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___694_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp102 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp103 $tmp102 $const8 	%argrw{"wrr"}
	if		$tmp103 285 285 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp100 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp100 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:101
# 		increment = (safe_noise(p, "signed") + offset) * pwr * value;
	add		$tmp104 $tmp100 Offset 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{101} %argrw{"wrr"}
	mul		$tmp105 $tmp104 ___694_pwr 	%argrw{"wrr"}
	mul		___694_increment $tmp105 ___694_value 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:102
# 		value += increment;
	add		___694_value ___694_value ___694_increment 	%line{102} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:103
# 		pwr *= pwHL;
	mul		___694_pwr ___694_pwr ___694_pwHL 	%line{103} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:104
# 		p *= lacunarity;
	mul		___694_p ___694_p lacunarity 	%line{104} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:100
# 	for (i = 1; i < (int)octaves; i++) {
	assign		$tmp106 ___694_i 	%line{100} %argrw{"wr"}
	add		___694_i ___694_i $const13 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:107
# 	rmd = octaves - floor(octaves);
	floor		$tmp107 octaves 	%line{107} %argrw{"wr"}
	sub		___694_rmd octaves $tmp107 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:108
# 	if (rmd != 0.0) {
	neq		$tmp108 ___694_rmd $const2 	%line{108} %argrw{"wrr"}
	if		$tmp108 315 315 	%argrw{"r"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:109
# 		increment = (safe_noise(p, "signed") + offset) * pwr * value;
	functioncall	$const10 310 	%line{109} %argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:92
# 	float f = 0.0;
	assign		___681_f $const2 	%filename{"C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h"} %line{92} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:95
# 	if (type == "signed")
	eq		$tmp110 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp110 303 304 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:96
# 		f = noise("perlin", p);
	noise		___681_f $const11 ___694_p 	%line{96} %argrw{"wrr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:100
# 		f = noise(p);
	noise		___681_f ___694_p 	%line{100} %argrw{"wr"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp111 ___681_f 	%line{103} %argrw{"wr"}
	eq		$tmp112 $tmp111 $const8 	%argrw{"wrr"}
	if		$tmp112 309 309 	%argrw{"r"}
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:104
# 		return 0.5;
	assign		$tmp109 $const12 	%line{104} %argrw{"wr"}
	return
# C:\b\win64_cmake_vs2017\win64_cmake_vs2017\blender.git\intern\cycles\kernel\shaders\node_texture.h:106
# 	return f;
	assign		$tmp109 ___681_f 	%line{106} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:109
# 		increment = (safe_noise(p, "signed") + offset) * pwr * value;
	add		$tmp113 $tmp109 Offset 	%filename{"C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{109} %argrw{"wrr"}
	mul		$tmp114 $tmp113 ___694_pwr 	%argrw{"wrr"}
	mul		___694_increment $tmp114 ___694_value 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:110
# 		value += rmd * increment;
	mul		$tmp115 ___694_rmd ___694_increment 	%line{110} %argrw{"wrr"}
	add		___694_value ___694_value $tmp115 	%argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:113
# 	return value;
	assign		$tmp92 ___694_value 	%line{113} %argrw{"wr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:227
# 		Fac = intensity * noise_musgrave_hetero_terrain(p, dimension, lacunarity, octaves, Offset);
	mul		Fac intensity $tmp92 	%line{227} %argrw{"wrr"}
# C:/b/win64_cmake_vs2017/win64_cmake_vs2017/blender.git/intern/cycles/kernel/shaders/node_musgrave_texture.osl:229
# 	Color = color(Fac, Fac, Fac);
	color		Color Fac Fac Fac 	%line{229} %argrw{"wrrr"}
	end
